import express from 'express'
import DataModel from '../../app/models/index.js'
import { generateCode } from '../../app/utils/codeGenerator.js'

const router = express.Router()

router.get('/banggia/:loaiPhong', async (req, res) => {
    try {
        const { loaiPhong } = req.params
        const bangGia = await DataModel.Data_BangGiaPhong_Model.find({
            LoaiPhong: loaiPhong,
        })
            .lean()
            .exec()

        res.json(bangGia)
    } catch (err) {
        console.error('Error:', err)
        res.status(500).json({ error: 'L·ªói server!' })
    }
})

// API ƒë·ªÉ l∆∞u b·∫£ng gi√°
router.post('/banggia/:loaiPhong', async (req, res) => {
    try {
        const { loaiPhong, bangGia } = req.body;      
        
        console.log('üì• Nh·∫≠n d·ªØ li·ªáu b·∫£ng gi√°:', {
            loaiPhong: loaiPhong,
            soKhungGio: bangGia ? bangGia.length : 0
        });

        // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!loaiPhong || !bangGia || !Array.isArray(bangGia)) {
            return res.status(400).json({
                success: false,
                message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: thi·∫øu loaiPhong ho·∫∑c bangGia'
            });
        }

        if (bangGia.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt khung gi·ªù'
            });
        }

        // Validate t·ª´ng khung gi·ªù
        for (let i = 0; i < bangGia.length; i++) {
            const gia = bangGia[i];
            if (!gia.KhungGio || gia.GiaTien === undefined || gia.GiaTien === null) {
                return res.status(400).json({
                    success: false,
                    message: `Khung gi·ªù th·ª© ${i + 1} thi·∫øu th√¥ng tin KhungGio ho·∫∑c GiaTien`
                });
            }
            if (gia.GiaTien < 1000) {
                return res.status(400).json({
                    success: false,
                    message: `Khung gi·ªù "${gia.KhungGio}" c√≥ gi√° ti·ªÅn kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 1,000 VNƒê)`
                });
            }
        }

        console.log('üóëÔ∏è ƒêang x√≥a khung gi·ªù c≈© cho lo·∫°i ph√≤ng:', loaiPhong);
        
        // X√≥a c√°c khung gi·ªù c≈© - GI·ªÆ NGUY√äN LOGIC C≈®
        const deleteResult = await DataModel.Data_BangGiaPhong_Model.deleteMany({ 
            LoaiPhong: loaiPhong 
        });
        
        console.log('‚úÖ ƒê√£ x√≥a:', deleteResult.deletedCount, 'khung gi·ªù c≈©');

        // T·∫°o m√£ cho t·ª´ng khung gi·ªù - GI·ªÆ NGUY√äN LOGIC C≈®
        const newBangGia = [];
        
        // L·∫•y m√£ cu·ªëi c√πng m·ªôt l·∫ßn ƒë·ªÉ t·ªëi ∆∞u - GI·ªÆ NGUY√äN LOGIC C≈®
        const lastMaGia = await generateCode('PG', DataModel.Data_BangGiaPhong_Model, 'MaGia');
        const lastNumber = parseInt(lastMaGia.replace('PG', '')) || 0;
        
        console.log('üî¢ M√£ cu·ªëi c√πng:', lastMaGia, 'S·ªë:', lastNumber);

        // T·∫°o d·ªØ li·ªáu m·ªõi - GI·ªÆ NGUY√äN LOGIC C≈®
        for (let i = 0; i < bangGia.length; i++) {
            const gia = bangGia[i];
            const newNumber = lastNumber + i + 1;
            const maGia = `PG${newNumber.toString().padStart(3, '0')}`;
            
            newBangGia.push({
                MaGia: maGia,
                LoaiPhong: loaiPhong,
                KhungGio: gia.KhungGio,
                GiaTien: parseInt(gia.GiaTien),
                createdAt: new Date()
            });

            console.log(`üìù T·∫°o khung gi·ªù ${i + 1}:`, {
                maGia: maGia,
                khungGio: gia.KhungGio,
                giaTien: gia.GiaTien
            });
        }

        console.log('üíæ ƒêang l∆∞u', newBangGia.length, 'khung gi·ªù m·ªõi...');
        
        // L∆∞u d·ªØ li·ªáu m·ªõi - GI·ªÆ NGUY√äN LOGIC C≈®
        const result = await DataModel.Data_BangGiaPhong_Model.insertMany(newBangGia);
        
        console.log('‚úÖ ƒê√£ th√™m th√†nh c√¥ng:', result.length, 'khung gi·ªù');
        console.log('üìã M√£ ƒë∆∞·ª£c t·∫°o:', result.map(item => item.MaGia));
        
        // Response - GI·ªÆ NGUY√äN LOGIC C≈® + TH√äM TH√îNG TIN
        res.json({
            success: true,
            message: `C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.length} khung gi·ªù cho lo·∫°i ph√≤ng "${loaiPhong}"!`,
            data: {
                soKhungGio: result.length,
                maGiaList: result.map(item => item.MaGia),
                bangGia: result
            }
        });

    } catch (error) {
        console.error('‚ùå L·ªói l∆∞u b·∫£ng gi√°:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l∆∞u b·∫£ng gi√°: ' + error.message,
            error: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

router.post('/loaiphong', async (req, res) => {
    try {
        console.log('=== üö® API /api/loaiphong ===')
        console.log('üì¶ Request body:', req.body)

        const { TenLoaiPhong, Action, OldRoomType } = req.body

        // VALIDATION
        if (!TenLoaiPhong || !Action) {
            return res.status(400).json({
                error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: TenLoaiPhong v√† Action',
            })
        }

        if (Action === 'add') {
            console.log('üîç Ki·ªÉm tra lo·∫°i ph√≤ng t·ªìn t·∫°i:', TenLoaiPhong)

            // Ki·ªÉm tra tr√πng
            const existing = await DataModel.Data_BangGiaPhong_Model.findOne({
                LoaiPhong: TenLoaiPhong,
            })

            if (existing) {
                console.log('‚ùå Lo·∫°i ph√≤ng ƒë√£ t·ªìn t·∫°i')
                return res.status(400).json({ error: 'Lo·∫°i ph√≤ng ƒë√£ t·ªìn t·∫°i!' })
            }

            console.log('üíæ ƒêang t·∫°o lo·∫°i ph√≤ng m·ªõi...')

            const lastMaGia = await generateCode('PG', DataModel.Data_BangGiaPhong_Model, 'MaGia')
            const lastNumber = parseInt(lastMaGia.replace('PG', '')) || 0

            const newNumber = lastNumber + 1
            const maGia = `PG${newNumber.toString().padStart(3, '0')}`

            // T·∫°o lo·∫°i ph√≤ng m·ªõi v·ªõi b·∫£ng gi√° r·ªóng
            const newRoomType = new DataModel.Data_BangGiaPhong_Model({
                MaGia: maGia,
                LoaiPhong: TenLoaiPhong,
                BangGia: [],
                CreatedAt: new Date(),
                UpdatedAt: new Date(),
            })

            await newRoomType.save()
            console.log('‚úÖ ƒê√£ l∆∞u lo·∫°i ph√≤ng m·ªõi th√†nh c√¥ng')

            res.json({
                success: true,
                message: `ƒê√£ th√™m lo·∫°i ph√≤ng "${TenLoaiPhong}" th√†nh c√¥ng!`,
                data: newRoomType,
            })
        } else if (Action === 'edit') {
            // S·ª¨A LO·∫†I PH√íNG - C·∫¨P NH·∫¨T T·∫§T C·∫¢ DOCUMENTS
            if (!OldRoomType) {
                return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin lo·∫°i ph√≤ng c≈©!' })
            }

            console.log(`‚úèÔ∏è ƒêang ƒë·ªïi "${OldRoomType}" th√†nh "${TenLoaiPhong}"`)

            // Ki·ªÉm tra tr√πng t√™n m·ªõi
            if (TenLoaiPhong !== OldRoomType) {
                const existing = await DataModel.Data_BangGiaPhong_Model.findOne({
                    LoaiPhong: TenLoaiPhong,
                })

                if (existing) {
                    return res.status(400).json({ error: 'T√™n lo·∫°i ph√≤ng m·ªõi ƒë√£ t·ªìn t·∫°i!' })
                }
            }

            // C·∫≠p nh·∫≠t TRONG T·∫§T C·∫¢ document c√≥ LoaiPhong c≈©
            const bangGiaResult = await DataModel.Data_BangGiaPhong_Model.updateMany(
                { LoaiPhong: OldRoomType },
                {
                    $set: {
                        LoaiPhong: TenLoaiPhong,
                        UpdatedAt: new Date(),
                    },
                }
            )

            console.log(`üìä ƒê√£ c·∫≠p nh·∫≠t ${bangGiaResult.modifiedCount} document trong Data_BangGiaPhong_Model`)

            // C·∫≠p nh·∫≠t trong collection ph√≤ng h√°t
            const phongHatResult = await DataModel.Data_PhongHat_Model.updateMany({ LoaiPhong: OldRoomType }, { $set: { LoaiPhong: TenLoaiPhong } })

            console.log(`üìä ƒê√£ c·∫≠p nh·∫≠t ${phongHatResult.modifiedCount} ph√≤ng trong Data_PhongHat_Model`)

            if (bangGiaResult.modifiedCount === 0 && phongHatResult.modifiedCount === 0) {
                return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y lo·∫°i ph√≤ng ƒë·ªÉ s·ª≠a!' })
            }

            res.json({
                success: true,
                message: `ƒê√£ ƒë·ªïi lo·∫°i ph√≤ng "${OldRoomType}" th√†nh "${TenLoaiPhong}"! (${bangGiaResult.modifiedCount} b·∫£ng gi√°, ${phongHatResult.modifiedCount} ph√≤ng)`,
                data: {
                    old: OldRoomType,
                    new: TenLoaiPhong,
                    bangGiaUpdated: bangGiaResult.modifiedCount,
                    phongHatUpdated: phongHatResult.modifiedCount,
                },
            })
        } else if (Action === 'delete') {
            // X√ìA LO·∫†I PH√íNG - X√ìA T·∫§T C·∫¢ DOCUMENTS
            console.log(`üóëÔ∏è ƒêang x√≥a lo·∫°i ph√≤ng: ${TenLoaiPhong}`)

            // Ki·ªÉm tra xem lo·∫°i ph√≤ng c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
            const usedRooms = await DataModel.Data_PhongHat_Model.find({
                LoaiPhong: TenLoaiPhong,
            })

            if (usedRooms.length > 0) {
                return res.status(400).json({
                    error: `Kh√¥ng th·ªÉ x√≥a! C√≥ ${usedRooms.length} ph√≤ng ƒëang s·ª≠ d·ª•ng lo·∫°i ph√≤ng "${TenLoaiPhong}".`,
                })
            }

            // X√≥a T·∫§T C·∫¢ document c√≥ LoaiPhong n√†y
            const result = await DataModel.Data_BangGiaPhong_Model.deleteMany({
                LoaiPhong: TenLoaiPhong,
            })

            console.log(`üìä ƒê√£ x√≥a ${result.deletedCount} document trong Data_BangGiaPhong_Model`)

            if (result.deletedCount === 0) {
                return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y lo·∫°i ph√≤ng ƒë·ªÉ x√≥a!' })
            }

            res.json({
                success: true,
                message: `ƒê√£ x√≥a lo·∫°i ph√≤ng "${TenLoaiPhong}" th√†nh c√¥ng! (${result.deletedCount} b·∫£ng gi√°)`,
                data: { deletedCount: result.deletedCount },
            })
        } else {
            return res.status(400).json({ error: 'Action kh√¥ng h·ª£p l·ªá!' })
        }
    } catch (err) {
        console.error('üí• L·ªñI SERVER CHI TI·∫æT:')
        console.error('Message:', err.message)
        console.error('Stack:', err.stack)

        res.status(500).json({
            error: 'L·ªói server: ' + err.message,
        })
    }
})


router.put('/banggia/:loaiPhong', async (req, res) => {
    try {
        const { loaiPhong, bangGia } = req.body

        console.log('üì• Nh·∫≠n d·ªØ li·ªáu b·∫£ng gi√°:', {
            loaiPhong: loaiPhong,
            soKhungGio: bangGia ? bangGia.length : 0,
        })

        // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!loaiPhong || !bangGia || !Array.isArray(bangGia)) {
            return res.status(400).json({
                success: false,
                message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: thi·∫øu loaiPhong ho·∫∑c bangGia',
            })
        }

        if (bangGia.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt khung gi·ªù',
            })
        }

        // Validate t·ª´ng khung gi·ªù
        for (let i = 0; i < bangGia.length; i++) {
            const gia = bangGia[i]
            if (!gia.KhungGio || gia.GiaTien === undefined || gia.GiaTien === null) {
                return res.status(400).json({
                    success: false,
                    message: `Khung gi·ªù th·ª© ${i + 1} thi·∫øu th√¥ng tin KhungGio ho·∫∑c GiaTien`,
                })
            }
            if (gia.GiaTien < 1000) {
                return res.status(400).json({
                    success: false,
                    message: `Khung gi·ªù "${gia.KhungGio}" c√≥ gi√° ti·ªÅn kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 1,000 VNƒê)`,
                })
            }
        }

        console.log('üóëÔ∏è ƒêang x√≥a khung gi·ªù c≈© cho lo·∫°i ph√≤ng:', loaiPhong)

        // X√≥a c√°c khung gi·ªù c≈© - GI·ªÆ NGUY√äN LOGIC C≈®
        const deleteResult = await DataModel.Data_BangGiaPhong_Model.deleteMany({
            LoaiPhong: loaiPhong,
        })

        console.log('‚úÖ ƒê√£ x√≥a:', deleteResult.deletedCount, 'khung gi·ªù c≈©')

        // T·∫°o m√£ cho t·ª´ng khung gi·ªù - GI·ªÆ NGUY√äN LOGIC C≈®
        const newBangGia = []

        // L·∫•y m√£ cu·ªëi c√πng m·ªôt l·∫ßn ƒë·ªÉ t·ªëi ∆∞u - GI·ªÆ NGUY√äN LOGIC C≈®
        const lastMaGia = await generateCode('PG', DataModel.Data_BangGiaPhong_Model, 'MaGia')
        const lastNumber = parseInt(lastMaGia.replace('PG', '')) || 0

        console.log('üî¢ M√£ cu·ªëi c√πng:', lastMaGia, 'S·ªë:', lastNumber)

        // T·∫°o d·ªØ li·ªáu m·ªõi - GI·ªÆ NGUY√äN LOGIC C≈®
        for (let i = 0; i < bangGia.length; i++) {
            const gia = bangGia[i]
            const newNumber = lastNumber + i + 1
            const maGia = `PG${newNumber.toString().padStart(3, '0')}`

            newBangGia.push({
                MaGia: maGia,
                LoaiPhong: loaiPhong,
                KhungGio: gia.KhungGio,
                GiaTien: parseInt(gia.GiaTien),
                createdAt: new Date(),
            })

            console.log(`üìù T·∫°o khung gi·ªù ${i + 1}:`, {
                maGia: maGia,
                khungGio: gia.KhungGio,
                giaTien: gia.GiaTien,
            })
        }

        console.log('üíæ ƒêang l∆∞u', newBangGia.length, 'khung gi·ªù m·ªõi...')

        // L∆∞u d·ªØ li·ªáu m·ªõi - GI·ªÆ NGUY√äN LOGIC C≈®
        const result = await DataModel.Data_BangGiaPhong_Model.insertMany(newBangGia)

        console.log('‚úÖ ƒê√£ th√™m th√†nh c√¥ng:', result.length, 'khung gi·ªù')
        console.log(
            'üìã M√£ ƒë∆∞·ª£c t·∫°o:',
            result.map((item) => item.MaGia)
        )

        // Response - GI·ªÆ NGUY√äN LOGIC C≈® + TH√äM TH√îNG TIN
        res.json({
            success: true,
            message: `C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.length} khung gi·ªù cho lo·∫°i ph√≤ng "${loaiPhong}"!`,
            data: {
                soKhungGio: result.length,
                maGiaList: result.map((item) => item.MaGia),
                bangGia: result,
            },
        })
    } catch (error) {
        console.error('‚ùå L·ªói l∆∞u b·∫£ng gi√°:', error)
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l∆∞u b·∫£ng gi√°: ' + error.message,
            error: process.env.NODE_ENV === 'development' ? error.stack : undefined,
        })
    }
})

// X√≥a lo·∫°i ph√≤ng
router.delete('/banggia/:loaiPhong', async (req, res) => {
    try {
        const { loaiPhong } = req.params;
        
        console.log('üóëÔ∏è ƒêang x√≥a b·∫£ng gi√° cho:', loaiPhong);

        const roomsUsingType = await DataModel.Data_PhongHat_Model.find({ 
            LoaiPhong: loaiPhong 
        });
        
        if (roomsUsingType.length > 0) {
            return res.status(400).json({
                success: false,
                error: `Kh√¥ng th·ªÉ x√≥a lo·∫°i ph√≤ng "${loaiPhong}"! C√≥ ${roomsUsingType.length} ph√≤ng ƒëang s·ª≠ d·ª•ng lo·∫°i ph√≤ng n√†y.`
            });
        }
        
        const deleteResult = await DataModel.Data_BangGiaPhong_Model.deleteMany({ 
            LoaiPhong: loaiPhong 
        });
        
        console.log('‚úÖ ƒê√£ x√≥a:', deleteResult.deletedCount, 'khung gi·ªù');
        
        res.json({
            success: true,
            message: `ƒê√£ x√≥a ${deleteResult.deletedCount} khung gi·ªù`,
            deletedCount: deleteResult.deletedCount
        });

    } catch (error) {
        console.error('‚ùå L·ªói x√≥a b·∫£ng gi√°:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi x√≥a b·∫£ng gi√°: ' + error.message
        });
    }
});

export default router