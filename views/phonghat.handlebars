<div class="main-content">
  <div class="admin-dashboard">
    <!-- Header Premium -->
    <div class="dashboard-header">
      <div class="header-content">
        <div class="header-title">
          <div class="title-icon">üé§</div>
          <div>
            <h1>Qu·∫£n l√Ω ph√≤ng h√°t</h1>
            <p>Theo d√µi v√† qu·∫£n l√Ω tr·∫°ng th√°i ph√≤ng karaoke</p>
          </div>
        </div>
        <div class="header-actions">
          <button class="btn-primary" id="addRoomBtn">
            <i class="fas fa-plus"></i>
            <span>Th√™m ph√≤ng</span>
          </button>
          <div class="action-buttons">
            <button class="btn-secondary" id="exportBtn">
              <i class="fas fa-download"></i>
            </button>
            <button class="btn-secondary" id="importBtn">
              <i class="fas fa-upload"></i>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Search and Filter Bar -->
    <div class="search-filter-bar">
      <div class="search-box">
        <i class="fas fa-search"></i>
        <input type="text" id="searchInput" placeholder="T√¨m ki·∫øm ph√≤ng h√°t...">
        <button class="search-btn" id="searchBtn">T√¨m ki·∫øm</button>
      </div>
      <div class="filter-controls">
        <select class="filter-select" id="typeFilter">
          <option value="">T·∫•t c·∫£ lo·∫°i ph√≤ng</option>
          <option value="VIP">VIP</option>
          <option value="Th∆∞·ªùng">Th∆∞·ªùng</option>
          <option value="Premium">Premium</option>
          <option value="Deluxe">Deluxe</option>
        </select>
        <select class="filter-select" id="statusFilter">
          <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option value="1">üü¢ C√≤n tr·ªëng</option>
          <option value="0">üî¥ ƒêang s·ª≠ d·ª•ng</option>
          <option value="2">üü° ƒê√£ ƒë·∫∑t tr∆∞·ªõc</option>
        </select>
        <button class="clear-filters" id="clearFilters">
          <i class="fas fa-times"></i>
          X√≥a l·ªçc
        </button>
      </div>
    </div>

    <!-- Stats Overview -->
    <div class="stats-overview">
      <div class="stat-card">
        <div class="stat-icon total">
          <i class="fas fa-door-closed"></i>
        </div>
        <div class="stat-info">
          <h3 id="totalRooms">{{phonghats.length}}</h3>
          <p>T·ªïng ph√≤ng</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon available">
          <i class="fas fa-door-open"></i>
        </div>
        <div class="stat-info">
          <h3 id="countAvailable">0</h3>
          <p>ƒêang tr·ªëng</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon busy">
          <i class="fas fa-microphone-alt"></i>
        </div>
        <div class="stat-info">
          <h3 id="countBusy">0</h3>
          <p>ƒêang s·ª≠ d·ª•ng</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon reserved">
          <i class="fas fa-calendar-check"></i>
        </div>
        <div class="stat-info">
          <h3 id="countReserved">0</h3>
          <p>ƒê√£ ƒë·∫∑t tr∆∞·ªõc</p>
        </div>
      </div>
    </div>

    <!-- Rooms Grid -->
    <div class="rooms-grid" id="roomsGrid">
      {{#each phonghats}}
      <div class="room-card" data-id="{{this._id}}" data-name="{{this.TenPhong}}" 
           data-type="{{this.LoaiPhong}}" data-status="{{this.TrangThai}}">
        <div class="room-image">
          <img src="{{this.AnhPhong}}" alt="{{this.TenPhong}}"
               onerror="this.src='https://images.unsplash.com/photo-1567598476652-7cbc5bf3b31b?w=400&h=250&fit=crop'">
          <div class="room-overlay">
            <div class="room-actions">
              <button class="btn-edit edit-room" 
                      data-id="{{this._id}}"
                      data-name="{{this.TenPhong}}"
                      data-type="{{this.LoaiPhong}}"
                      data-price="{{this.GiaPhong}}"
                      data-size="{{this.SucChua}}"
                      data-status="{{this.TrangThai}}"
                      data-description="{{this.MoTa}}"
                      data-image="{{this.AnhPhong}}">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn-delete delete-room" 
                      data-id="{{this._id}}" 
                      data-name="{{this.TenPhong}}">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
          <div class="room-badge" data-status="{{this.TrangThai}}">
            {{#if (eq this.TrangThai "1")}}üü¢ Tr·ªëng{{/if}}
            {{#if (eq this.TrangThai "0")}}üî¥ B·∫≠n{{/if}}
            {{#if (eq this.TrangThai "2")}}üü° ƒê√£ ƒë·∫∑t{{/if}}
          </div>
          <div class="room-type">{{this.LoaiPhong}}</div>
        </div>
        
        <div class="room-content">
          <h3 class="room-title">{{this.TenPhong}}</h3>
          <p class="room-description">{{this.MoTa}}</p>
          
          <div class="room-details">
            <div class="detail-item">
              <i class="fas fa-money-bill-wave"></i>
              <span class="price" data-price="{{this.GiaPhong}}">{{this.GiaPhong}} VNƒê/gi·ªù</span>
            </div>
            <div class="detail-item">
              <i class="fas fa-users"></i>
              <span>T·ªëi ƒëa {{this.SucChua}} ng∆∞·ªùi</span>
            </div>
          </div>
          
          <div class="room-footer">
            <span class="room-id">#{{this._id}}</span>
            <button class="btn-status status-toggle" data-status="{{this.TrangThai}}">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
      </div>
      {{/each}}
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="emptyState" style="display: none;">
      <div class="empty-icon">üé§</div>
      <h3>Kh√¥ng t√¨m th·∫•y ph√≤ng h√°t</h3>
      <p>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c th√™m ph√≤ng m·ªõi</p>
      <button class="btn-primary" id="addRoomEmptyBtn">
        <i class="fas fa-plus"></i>
        Th√™m ph√≤ng ƒë·∫ßu ti√™n
      </button>
    </div>
  </div>

  <!-- Room Modal -->
  <div class="modal-overlay" id="roomModal" style="display: none;">
    <div class="modal-container">
      <div class="modal-header">
        <h2 id="modalTitle">Th√™m ph√≤ng h√°t m·ªõi</h2>
        <button class="modal-close" id="modalClose">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-body">
        <form id="roomForm">
          <input type="hidden" id="roomId">
          
          <div class="form-grid">
            <div class="form-group">
              <label for="roomName">T√™n ph√≤ng h√°t</label>
              <input type="text" id="roomName" required placeholder="Nh·∫≠p t√™n ph√≤ng">
            </div>
            
            <div class="form-group">
              <label for="roomType">Lo·∫°i ph√≤ng</label>
              <select id="roomType" required>
                <option value="">Ch·ªçn lo·∫°i ph√≤ng</option>
                <option value="VIP">VIP</option>
                <option value="Th∆∞·ªùng">Th∆∞·ªùng</option>
                <option value="Premium">Premium</option>
                <option value="Deluxe">Deluxe</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="roomPrice">Gi√° thu√™ (VNƒê/gi·ªù)</label>
              <input type="number" id="roomPrice" required placeholder="Nh·∫≠p gi√° thu√™">
            </div>
            
            <div class="form-group">
              <label for="roomSize">S·ª©c ch·ª©a</label>
              <input type="number" id="roomSize" required placeholder="S·ªë ng∆∞·ªùi t·ªëi ƒëa">
            </div>
            
            <div class="form-group">
              <label for="roomStatus">Tr·∫°ng th√°i</label>
              <select id="roomStatus" required>
                <option value="1">üü¢ C√≤n tr·ªëng</option>
                <option value="0">üî¥ ƒêang s·ª≠ d·ª•ng</option>
                <option value="2">üü° ƒê√£ ƒë·∫∑t tr∆∞·ªõc</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="roomImage">Link ·∫£nh</label>
              <input type="text" id="roomImage" placeholder="URL h√¨nh ·∫£nh">
            </div>
          </div>
          
          <div class="form-group full-width">
            <label for="roomDescription">M√¥ t·∫£</label>
            <textarea id="roomDescription" rows="3" placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ ph√≤ng h√°t"></textarea>
          </div>
          
          <div class="form-group full-width" id="imagePreviewContainer">
            <label>Preview ·∫£nh</label>
            <div class="image-preview" id="imagePreview">
              <i class="fas fa-image"></i>
              <p>Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
            </div>
          </div>
        </form>
      </div>
      
      <div class="modal-footer">
        <button class="btn-secondary" id="modalCancel">H·ªßy</button>
        <button class="btn-primary" id="saveRoomBtn">L∆∞u th√¥ng tin</button>
      </div>
    </div>
  </div>

  <!-- Import Modal -->
  <div class="modal-overlay" id="importModal" style="display: none;">
    <div class="modal-container">
      <div class="modal-header">
        <h2>Import t·ª´ Excel</h2>
        <button class="modal-close" id="importModalClose">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-body">
        <div class="alert-info">
          <i class="fas fa-info-circle"></i>
          T·∫£i file m·∫´u ƒë·ªÉ bi·∫øt ƒë·ªãnh d·∫°ng d·ªØ li·ªáu
        </div>
        
        <div class="form-group">
          <label for="importFile">Ch·ªçn file Excel (.xlsx)</label>
          <input type="file" id="importFile" accept=".xlsx, .xls">
        </div>
        
        <div class="form-check">
          <input type="checkbox" id="overwriteData">
          <label for="overwriteData">Ghi ƒë√® d·ªØ li·ªáu hi·ªán t·∫°i</label>
        </div>
      </div>
      
      <div class="modal-footer">
        <button class="btn-secondary" id="downloadTemplate">
          <i class="fas fa-download"></i>
          T·∫£i file m·∫´u
        </button>
        <button class="btn-secondary" id="importCancel">H·ªßy</button>
        <button class="btn-primary" id="confirmImport">Import</button>
      </div>
    </div>
  </div>
</div>

<style>
/* ===== MAIN CONTENT STYLES ===== */
.main-content {
  margin-left: 280px;
  transition: margin-left 0.3s ease;
  min-height: 100vh;
  background: #f7fafc;
}

/* Khi sidebar collapsed */
.sidebar-collapsed .main-content {
  margin-left: 80px;
}

/* Tr√™n mobile */
@media (max-width: 768px) {
  .main-content {
    margin-left: 0 !important;
    width: 100% !important;
  }
}

/* ===== DASHBOARD STYLES ===== */
.admin-dashboard {
  padding: 20px;
  min-height: 100vh;
}

.dashboard-header {
  background: white;
  border-radius: 12px;
  padding: 24px;
  margin-bottom: 24px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 16px;
}

.header-title {
  display: flex;
  align-items: center;
  gap: 16px;
}

.title-icon {
  font-size: 2.5rem;
}

.header-title h1 {
  margin: 0;
  color: #2d3748;
  font-size: 1.75rem;
}

.header-title p {
  margin: 4px 0 0 0;
  color: #718096;
}

.header-actions {
  display: flex;
  gap: 12px;
  align-items: center;
}

.btn-primary {
  background: #667eea;
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 500;
  transition: background 0.3s;
}

.btn-primary:hover {
  background: #5a6fd8;
}

.btn-secondary {
  background: #e2e8f0;
  color: #4a5568;
  border: none;
  padding: 12px;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: background 0.3s;
}

.btn-secondary:hover {
  background: #cbd5e0;
}

.action-buttons {
  display: flex;
  gap: 8px;
}

/* Search and Filter */
.search-filter-bar {
  background: white;
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 24px;
  display: flex;
  gap: 20px;
  align-items: center;
  flex-wrap: wrap;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.search-box {
  display: flex;
  align-items: center;
  background: #f7fafc;
  border-radius: 8px;
  padding: 8px 16px;
  flex: 1;
  min-width: 300px;
}

.search-box i {
  color: #a0aec0;
  margin-right: 12px;
}

.search-box input {
  border: none;
  background: none;
  outline: none;
  flex: 1;
  padding: 8px 0;
  font-size: 14px;
}

.search-btn {
  background: #667eea;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 6px;
  cursor: pointer;
  margin-left: 12px;
  font-weight: 500;
  transition: background 0.3s;
}

.search-btn:hover {
  background: #5a6fd8;
}

.filter-controls {
  display: flex;
  gap: 12px;
  align-items: center;
  flex-wrap: wrap;
}

.filter-select {
  padding: 10px 16px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  background: white;
  color: #4a5568;
  min-width: 160px;
  font-size: 14px;
}

.clear-filters {
  background: none;
  border: 1px solid #e2e8f0;
  color: #718096;
  padding: 10px 16px;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: background 0.3s;
}

.clear-filters:hover {
  background: #f7fafc;
}

/* Stats Overview */
.stats-overview {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 20px;
  margin-bottom: 24px;
}

.stat-card {
  background: white;
  border-radius: 12px;
  padding: 24px;
  display: flex;
  align-items: center;
  gap: 16px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s;
}

.stat-card:hover {
  transform: translateY(-2px);
}

.stat-icon {
  width: 60px;
  height: 60px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
}

.stat-icon.total {
  background: #fed7d7;
  color: #e53e3e;
}

.stat-icon.available {
  background: #c6f6d5;
  color: #38a169;
}

.stat-icon.busy {
  background: #fed7d7;
  color: #e53e3e;
}

.stat-icon.reserved {
  background: #fefcbf;
  color: #d69e2e;
}

.stat-info h3 {
  margin: 0;
  font-size: 1.75rem;
  color: #2d3748;
}

.stat-info p {
  margin: 4px 0 0 0;
  color: #718096;
}

/* Rooms Grid */
.rooms-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 24px;
}

.room-card {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s, box-shadow 0.3s;
}

.room-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.room-image {
  position: relative;
  height: 200px;
  overflow: hidden;
}

.room-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s;
}

.room-card:hover .room-image img {
  transform: scale(1.05);
}

.room-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s;
}

.room-card:hover .room-overlay {
  opacity: 1;
}

.room-actions {
  display: flex;
  gap: 12px;
}

.btn-edit, .btn-delete {
  width: 44px;
  height: 44px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  transition: transform 0.2s;
}

.btn-edit {
  background: #48bb78;
  color: white;
}

.btn-delete {
  background: #f56565;
  color: white;
}

.btn-edit:hover, .btn-delete:hover {
  transform: scale(1.1);
}

.room-badge {
  position: absolute;
  top: 12px;
  left: 12px;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  backdrop-filter: blur(10px);
}

.room-badge.available {
  background: rgba(72, 187, 120, 0.9);
  color: white;
}

.room-badge.busy {
  background: rgba(245, 101, 101, 0.9);
  color: white;
}

.room-badge.reserved {
  background: rgba(237, 137, 54, 0.9);
  color: white;
}

.room-type {
  position: absolute;
  top: 12px;
  right: 12px;
  background: rgba(102, 126, 234, 0.9);
  color: white;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
}

.room-content {
  padding: 20px;
}

.room-title {
  margin: 0 0 8px 0;
  color: #2d3748;
  font-size: 1.25rem;
}

.room-description {
  margin: 0 0 16px 0;
  color: #718096;
  line-height: 1.5;
  font-size: 0.9rem;
}

.room-details {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-bottom: 16px;
}

.detail-item {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #4a5568;
  font-size: 0.9rem;
}

.detail-item i {
  color: #667eea;
  width: 16px;
}

.price {
  font-weight: 600;
  color: #2d3748;
}

.room-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 16px;
  border-top: 1px solid #e2e8f0;
}

.room-id {
  color: #a0aec0;
  font-size: 0.875rem;
}

.btn-status {
  background: #e2e8f0;
  border: none;
  width: 36px;
  height: 36px;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #4a5568;
  transition: background 0.3s;
}

.btn-status:hover {
  background: #cbd5e0;
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.empty-icon {
  font-size: 4rem;
  margin-bottom: 20px;
}

.empty-state h3 {
  margin: 0 0 8px 0;
  color: #2d3748;
}

.empty-state p {
  margin: 0 0 24px 0;
  color: #718096;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
  padding: 20px;
}

.modal-container {
  background: white;
  border-radius: 12px;
  width: 100%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px;
  border-bottom: 1px solid #e2e8f0;
}

.modal-header h2 {
  margin: 0;
  color: #2d3748;
}

.modal-close {
  background: none;
  border: none;
  font-size: 1.25rem;
  color: #a0aec0;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
}

.modal-close:hover {
  background: #f7fafc;
  color: #4a5568;
}

.modal-body {
  padding: 24px;
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
  margin-bottom: 16px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group.full-width {
  grid-column: 1 / -1;
}

.form-group label {
  margin-bottom: 8px;
  color: #4a5568;
  font-weight: 500;
}

.form-group input,
.form-group select,
.form-group textarea {
  padding: 12px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  transition: border-color 0.3s;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #667eea;
}

.form-group textarea {
  resize: vertical;
  min-height: 80px;
}

.image-preview {
  border: 2px dashed #e2e8f0;
  border-radius: 8px;
  padding: 40px 20px;
  text-align: center;
  color: #a0aec0;
  margin-top: 8px;
}

.image-preview img {
  max-width: 100%;
  max-height: 200px;
  border-radius: 6px;
}

.alert-info {
  background: #ebf8ff;
  border: 1px solid #bee3f8;
  color: #3182ce;
  padding: 12px 16px;
  border-radius: 8px;
  margin-bottom: 16px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.form-check {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-top: 16px;
}

.form-check input {
  margin: 0;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding: 24px;
  border-top: 1px solid #e2e8f0;
}

/* Responsive */
@media (max-width: 1024px) {
  .main-content {
    margin-left: 80px;
  }
}

@media (max-width: 768px) {
  .main-content {
    margin-left: 0 !important;
  }
  
  .header-content {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-filter-bar {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-box {
    min-width: auto;
  }
  
  .filter-controls {
    flex-direction: column;
    align-items: stretch;
  }
  
  .filter-select {
    min-width: auto;
  }
  
  .form-grid {
    grid-template-columns: 1fr;
  }
  
  .rooms-grid {
    grid-template-columns: 1fr;
  }
  
  .stats-overview {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 480px) {
  .admin-dashboard {
    padding: 10px;
  }
  
  .stats-overview {
    grid-template-columns: 1fr;
  }
  
  .header-actions {
    flex-direction: column;
    width: 100%;
  }
  
  .btn-primary {
    width: 100%;
    justify-content: center;
  }
  
  .action-buttons {
    width: 100%;
    justify-content: space-between;
  }
}

/* Fix z-index for SweetAlert2 */
.swal2-container {
  z-index: 3000 !important;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<script>
// Helper functions
function getStatusClass(status) {
  const statusMap = {
    '1': 'available',
    '0': 'busy', 
    '2': 'reserved'
  };
  return statusMap[status] || 'available';
}

function getStatusText(status) {
  const statusMap = {
    '1': 'üü¢ Tr·ªëng',
    '0': 'üî¥ B·∫≠n',
    '2': 'üü° ƒê√£ ƒë·∫∑t'
  };
  return statusMap[status] || 'üü¢ Tr·ªëng';
}

function formatNumber(price) {
  return new Intl.NumberFormat('vi-VN').format(price);
}

// Format all prices on page load
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.price[data-price]').forEach(element => {
    const price = element.getAttribute('data-price');
    if (price) {
      element.textContent = formatNumber(price) + ' VNƒê/gi·ªù';
    }
  });
  
  // Initialize room badges
  document.querySelectorAll('.room-badge[data-status]').forEach(badge => {
    const status = badge.getAttribute('data-status');
    badge.className = `room-badge ${getStatusClass(status)}`;
    badge.textContent = getStatusText(status);
  });
});

// API Functions
class RoomAPI {
  static async getAllRooms() {
    try {
      const response = await fetch('/api/phonghat');
      if (!response.ok) throw new Error('L·ªói khi l·∫•y d·ªØ li·ªáu ph√≤ng');
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  static async getRoomById(id) {
    try {
      const response = await fetch(`/api/phonghat/${id}`);
      if (!response.ok) throw new Error('L·ªói khi l·∫•y th√¥ng tin ph√≤ng');
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  static async createRoom(roomData) {
    try {
      const response = await fetch('/api/phonghat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(roomData)
      });
      if (!response.ok) throw new Error('L·ªói khi t·∫°o ph√≤ng');
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  static async updateRoom(id, roomData) {
    try {
      const response = await fetch(`/api/phonghat/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(roomData)
      });
      if (!response.ok) throw new Error('L·ªói khi c·∫≠p nh·∫≠t ph√≤ng');
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  static async deleteRoom(id) {
    try {
      const response = await fetch(`/api/phonghat/${id}`, {
        method: 'DELETE'
      });
      if (!response.ok) throw new Error('L·ªói khi x√≥a ph√≤ng');
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  static async updateRoomStatus(id, status) {
    try {
      const response = await fetch(`/api/phonghat/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ TrangThai: status })
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }
}

// Main Application
class RoomManager {
  constructor() {
    this.currentEditId = null;
    this.init();
  }

  init() {
    this.bindEvents();
    this.countRooms();
  }

  bindEvents() {
    // Room actions
    document.getElementById('addRoomBtn').addEventListener('click', () => this.openRoomModal());
    document.getElementById('addRoomEmptyBtn').addEventListener('click', () => this.openRoomModal());
    document.getElementById('saveRoomBtn').addEventListener('click', () => this.saveRoom());
    document.getElementById('modalClose').addEventListener('click', () => this.closeModal());
    document.getElementById('modalCancel').addEventListener('click', () => this.closeModal());

    // Search and filter
    document.getElementById('searchBtn').addEventListener('click', () => this.filterRooms());
    document.getElementById('clearFilters').addEventListener('click', () => this.clearFilters());

    // Import/Export
    document.getElementById('exportBtn').addEventListener('click', () => this.exportToExcel());
    document.getElementById('importBtn').addEventListener('click', () => this.openImportModal());
    document.getElementById('importModalClose').addEventListener('click', () => this.closeImportModal());
    document.getElementById('importCancel').addEventListener('click', () => this.closeImportModal());
    document.getElementById('downloadTemplate').addEventListener('click', () => this.downloadTemplate());
    document.getElementById('confirmImport').addEventListener('click', () => this.confirmImport());

    // Image preview
    document.getElementById('roomImage').addEventListener('input', (e) => this.updateImagePreview(e.target.value));

    // Dynamic event delegation
    document.addEventListener('click', (e) => {
      if (e.target.closest('.edit-room')) {
        this.handleEditRoom(e.target.closest('.edit-room'));
      }
      if (e.target.closest('.delete-room')) {
        this.handleDeleteRoom(e.target.closest('.delete-room'));
      }
      if (e.target.closest('.status-toggle')) {
        this.handleStatusToggle(e.target.closest('.status-toggle'));
      }
    });
  }

  countRooms() {
    const cards = document.querySelectorAll('.room-card');
    let available = 0, busy = 0, reserved = 0, total = 0;
    
    cards.forEach(card => {
      if (card.style.display !== 'none') {
        total++;
        const status = card.getAttribute('data-status');
        if (status === '1') available++;
        else if (status === '0') busy++;
        else if (status === '2') reserved++;
      }
    });
    
    document.getElementById('totalRooms').textContent = total;  
    document.getElementById('countAvailable').textContent = available;
    document.getElementById('countBusy').textContent = busy;
    document.getElementById('countReserved').textContent = reserved;
  }

  filterRooms() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const typeFilter = document.getElementById('typeFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    
    const cards = document.querySelectorAll('.room-card');
    let visibleCount = 0;
    
    cards.forEach(card => {
      const name = card.getAttribute('data-name').toLowerCase();
      const type = card.getAttribute('data-type');
      const status = card.getAttribute('data-status');
      
      const matchesSearch = name.includes(searchTerm);
      const matchesType = !typeFilter || type === typeFilter;
      const matchesStatus = !statusFilter || status === statusFilter;
      
      if (matchesSearch && matchesType && matchesStatus) {
        card.style.display = 'block';
        visibleCount++;
      } else {
        card.style.display = 'none';
      }
    });
    
    this.toggleEmptyState(visibleCount === 0);
    this.countRooms();
  }

  toggleEmptyState(show) {
    const emptyState = document.getElementById('emptyState');
    const roomsGrid = document.getElementById('roomsGrid');
    
    if (show) {
      roomsGrid.style.display = 'none';
      emptyState.style.display = 'block';
    } else {
      roomsGrid.style.display = 'grid';
      emptyState.style.display = 'none';
    }
  }

  clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('typeFilter').value = '';
    document.getElementById('statusFilter').value = '';
    this.filterRooms();
  }

  openRoomModal(roomData = null) {
    this.currentEditId = roomData ? roomData.id : null;
    const modal = document.getElementById('roomModal');
    const title = document.getElementById('modalTitle');
    
    if (roomData) {
      title.textContent = 'Ch·ªânh s·ª≠a ph√≤ng h√°t';
      this.fillForm(roomData);
    } else {
      title.textContent = 'Th√™m ph√≤ng h√°t m·ªõi';
      this.resetForm();
    }
    
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  fillForm(roomData) {
    document.getElementById('roomId').value = roomData.id;
    document.getElementById('roomName').value = roomData.name;
    document.getElementById('roomType').value = roomData.type;
    document.getElementById('roomPrice').value = roomData.price;
    document.getElementById('roomSize').value = roomData.size;
    document.getElementById('roomStatus').value = roomData.status;
    document.getElementById('roomDescription').value = roomData.description;
    document.getElementById('roomImage').value = roomData.image;
    this.updateImagePreview(roomData.image);
  }

  resetForm() {
    document.getElementById('roomForm').reset();
    document.getElementById('roomStatus').value = '1';
    this.updateImagePreview('');
  }

  closeModal() {
    document.getElementById('roomModal').style.display = 'none';
    document.getElementById('importModal').style.display = 'none';
    document.body.style.overflow = 'auto';
    this.currentEditId = null;
  }

  async saveRoom() {
    const formData = {
      TenPhong: document.getElementById('roomName').value,
      LoaiPhong: document.getElementById('roomType').value,
      GiaPhong: parseInt(document.getElementById('roomPrice').value),
      SucChua: parseInt(document.getElementById('roomSize').value),
      TrangThai: parseInt(document.getElementById('roomStatus').value),
      MoTa: document.getElementById('roomDescription').value,
      AnhPhong: document.getElementById('roomImage').value
    };
    
    if (!this.validateForm(formData)) {
      return;
    }
    
    try {
      let result;
      if (this.currentEditId) {
        result = await RoomAPI.updateRoom(this.currentEditId, formData);
      } else {
        result = await RoomAPI.createRoom(formData);
      }
      
      await Swal.fire({
        icon: 'success',
        title: 'Th√†nh c√¥ng!',
        text: `Ph√≤ng "${formData.TenPhong}" ƒë√£ ƒë∆∞·ª£c ${this.currentEditId ? 'c·∫≠p nh·∫≠t' : 'th√™m'} th√†nh c√¥ng`,
        timer: 2000
      });
      
      this.closeModal();
      window.location.reload();
      
    } catch (error) {
      await Swal.fire({
        icon: 'error',
        title: 'L·ªói!',
        text: 'Kh√¥ng th·ªÉ l∆∞u th√¥ng tin ph√≤ng',
        confirmButtonColor: '#667eea'
      });
    }
  }

  validateForm(formData) {
    if (!formData.TenPhong?.trim()) {
      this.showError('Vui l√≤ng nh·∫≠p t√™n ph√≤ng');
      return false;
    }
    if (!formData.LoaiPhong) {
      this.showError('Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng');
      return false;
    }
    if (!formData.GiaPhong || formData.GiaPhong <= 0) {
      this.showError('Vui l√≤ng nh·∫≠p gi√° thu√™ h·ª£p l·ªá');
      return false;
    }
    if (!formData.SucChua || formData.SucChua <= 0) {
      this.showError('Vui l√≤ng nh·∫≠p s·ª©c ch·ª©a h·ª£p l·ªá');
      return false;
    }
    return true;
  }

  showError(message) {
    Swal.fire({
      icon: 'warning',
      title: 'Thi·∫øu th√¥ng tin',
      text: message,
      confirmButtonColor: '#667eea'
    });
  }

  handleEditRoom(button) {
    const roomData = {
      id: button.getAttribute('data-id'),
      name: button.getAttribute('data-name'),
      type: button.getAttribute('data-type'),
      price: button.getAttribute('data-price'),
      size: button.getAttribute('data-size'),
      status: button.getAttribute('data-status'),
      description: button.getAttribute('data-description'),
      image: button.getAttribute('data-image')
    };
    this.openRoomModal(roomData);
  }

  async handleDeleteRoom(button) {
    const roomId = button.getAttribute('data-id');
    const roomName = button.getAttribute('data-name');
    
    const result = await Swal.fire({
      title: 'X√°c nh·∫≠n x√≥a?',
      html: `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√≤ng <strong>${roomName}</strong>?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#e53e3e',
      cancelButtonColor: '#667eea',
      confirmButtonText: 'X√≥a',
      cancelButtonText: 'H·ªßy'
    });

    if (result.isConfirmed) {
      try {
        await RoomAPI.deleteRoom(roomId);
        button.closest('.room-card').remove();
        this.countRooms();
        
        await Swal.fire({
          icon: 'success',
          title: 'ƒê√£ x√≥a!',
          text: 'Ph√≤ng h√°t ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng',
          timer: 1500
        });
      } catch (error) {
        await Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: 'Kh√¥ng th·ªÉ x√≥a ph√≤ng h√°t',
          confirmButtonColor: '#667eea'
        });
      }
    }
  }

  async handleStatusToggle(button) {
    const card = button.closest('.room-card');
    const roomId = card.getAttribute('data-id');
    const currentStatus = card.getAttribute('data-status');

    console.log('Current status:', currentStatus, 'Room ID:', roomId); // Debug log
    
    const statusMap = {
      '1': { next: '2', text: 'üü¢ Tr·ªëng', class: 'available' },
      '2': { next: '0', text: 'üü° ƒê√£ ƒë·∫∑t', class: 'reserved' },
      '0': { next: '1', text: 'üî¥ B·∫≠n', class: 'busy' }
    };
    
    const currentStatusInfo = statusMap[currentStatus];
    const nextStatusInfo = statusMap[currentStatusInfo.next];
    
    const result = await Swal.fire({
      title: 'ƒê·ªïi tr·∫°ng th√°i?',
      html: `Chuy·ªÉn t·ª´ <strong>${currentStatusInfo.text}</strong> sang <strong>${nextStatusInfo.text}</strong>?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#667eea',
      cancelButtonColor: '#a0aec0',
      confirmButtonText: 'ƒê·ªìng √Ω',
      cancelButtonText: 'H·ªßy'
    });

    if (result.isConfirmed) {
      try {
        await RoomAPI.updateRoomStatus(roomId, parseInt(currentStatusInfo.next));
        
        // Update UI
        const badge = card.querySelector('.room-badge');
        badge.className = `room-badge ${nextStatusInfo.class}`;
        badge.textContent = nextStatusInfo.text;
        card.setAttribute('data-status', currentStatusInfo.next);
        
        this.countRooms();
        
        await Swal.fire({
          icon: 'success',
          title: 'ƒê√£ c·∫≠p nh·∫≠t!',
          text: 'Tr·∫°ng th√°i ph√≤ng ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi',
          timer: 1500
        });
      } catch (error) {
        await Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i',
          confirmButtonColor: '#667eea'
        });
      }
    }
  }

  updateImagePreview(imageUrl) {
    const preview = document.getElementById('imagePreview');
    if (imageUrl && imageUrl.trim() !== '') {
      preview.innerHTML = `<img src="${imageUrl}" alt="Preview" onerror="this.remove(); preview.innerHTML='<i class=\\'fas fa-exclamation-triangle\\'></i><p>Kh√¥ng th·ªÉ t·∫£i ·∫£nh</p>'">`;
    } else {
      preview.innerHTML = '<i class="fas fa-image"></i><p>Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>';
    }
  }

  exportToExcel() {
    const rooms = Array.from(document.querySelectorAll('.room-card')).map(card => ({
      'T√™n ph√≤ng': card.getAttribute('data-name'),
      'Lo·∫°i ph√≤ng': card.getAttribute('data-type'),
      'Tr·∫°ng th√°i': getStatusText(card.getAttribute('data-status')),
      'Gi√° thu√™': card.querySelector('.price')?.textContent || '',
      'S·ª©c ch·ª©a': card.querySelector('.detail-item:last-child span')?.textContent || '',
      'M√¥ t·∫£': card.querySelector('.room-description')?.textContent || ''
    }));
    
    const ws = XLSX.utils.json_to_sheet(rooms);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Ph√≤ng h√°t');
    XLSX.writeFile(wb, 'danh-sach-phong-hat.xlsx');
    
    Swal.fire({
      icon: 'success',
      title: 'Export th√†nh c√¥ng!',
      text: 'File Excel ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ',
      timer: 1500
    });
  }

  openImportModal() {
    document.getElementById('importModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  closeImportModal() {
    document.getElementById('importModal').style.display = 'none';
    document.body.style.overflow = 'auto';
    document.getElementById('importFile').value = '';
  }

  downloadTemplate() {
    const templateData = [{
      'T√™n ph√≤ng': 'Ph√≤ng VIP 01',
      'Lo·∫°i ph√≤ng': 'VIP',
      'Gi√° thu√™': '500000',
      'S·ª©c ch·ª©a': '8',
      'Tr·∫°ng th√°i': 'C√≤n tr·ªëng',
      'M√¥ t·∫£': 'Ph√≤ng h√°t cao c·∫•p',
      '·∫¢nh': 'https://example.com/image.jpg'
    }];
    
    const ws = XLSX.utils.json_to_sheet(templateData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'M·∫´u d·ªØ li·ªáu');
    XLSX.writeFile(wb, 'mau-import-phong-hat.xlsx');
  }

  async confirmImport() {
    const fileInput = document.getElementById('importFile');
    if (!fileInput.files.length) {
      await Swal.fire({
        icon: 'warning',
        title: 'Ch∆∞a ch·ªçn file',
        text: 'Vui l√≤ng ch·ªçn file Excel ƒë·ªÉ import',
        confirmButtonColor: '#667eea'
      });
      return;
    }
    
    // Implementation for import would go here
    await Swal.fire({
      icon: 'success',
      title: 'Import th√†nh c√¥ng!',
      text: 'D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c import th√†nh c√¥ng',
      timer: 2000
    });
    
    this.closeImportModal();
  }
}

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
  new RoomManager();
});
</script>