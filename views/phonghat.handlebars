<div class="main-content">
  <div class="admin-dashboard">
    <!-- Header Premium -->
    <div class="dashboard-header">
      <div class="header-content">
        <div class="header-title">
          <div class="title-icon">üé§</div>
          <div>
            <h1>QU·∫¢N L√ù PH√íNG H√ÅT</h1>
            <p>Theo d√µi v√† qu·∫£n l√Ω tr·∫°ng th√°i ph√≤ng karaoke</p>
          </div>
        </div>
        <div class="header-actions">
          <button class="btn-primary" onclick="openRoomModal()">
            <i class="fas fa-plus"></i>
            <span>Th√™m ph√≤ng</span>
          </button>
          {{!-- <button class="btn-primary" onclick="openRoomTypesModal()">
            <i class="fas fa-tags"></i>
            <span>Lo·∫°i ph√≤ng</span>
          </button> --}}
          <button class="btn-primary" onclick="openPriceModal()">
            <i class="fas fa-money-bill"></i>
            <span>B·∫£ng gi√°</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Search and Filter Bar -->
    <div class="search-filter-bar">
      <div class="search-box">
        <i class="fas fa-search"></i>
        <input type="text" id="searchInput" placeholder="T√¨m ki·∫øm ph√≤ng h√°t..." onkeyup="filterRooms()">
        <button class="search-btn" onclick="filterRooms()">T√¨m ki·∫øm</button>
      </div>
      <div class="filter-controls">
        <select class="filter-select" id="typeFilter" onchange="filterRooms()">
          <option value="">T·∫•t c·∫£ lo·∫°i ph√≤ng</option>
          {{#each roomTypes}}
          <option value="{{this}}">{{this}}</option>
          {{/each}}
        </select>
        <select class="filter-select" id="statusFilter" onchange="filterRooms()">
          <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option value="Tr·ªëng">üü¢ C√≤n tr·ªëng</option>
          <option value="ƒêang s·ª≠ d·ª•ng">üî¥ ƒêang s·ª≠ d·ª•ng</option>
          <option value="ƒê√£ ƒë·∫∑t tr∆∞·ªõc">üü° ƒê√£ ƒë·∫∑t tr∆∞·ªõc</option>
        </select>
        <button class="clear-filters" onclick="clearFilters()">
          <i class="fas fa-times"></i>
          X√≥a l·ªçc
        </button>
      </div>
    </div>

    <!-- Stats Overview -->
    <div class="stats-overview">
      <div class="stat-card">
        <div class="stat-icon total">
          <i class="fas fa-door-closed"></i>
        </div>
        <div class="stat-info">
          <h3>{{totalRooms}}</h3>
          <p>T·ªïng ph√≤ng</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon available">
          <i class="fas fa-door-open"></i>
        </div>
        <div class="stat-info">
          <h3>{{countAvailable}}</h3>
          <p>ƒêang tr·ªëng</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon busy">
          <i class="fas fa-microphone-alt"></i>
        </div>
        <div class="stat-info">
          <h3>{{countBusy}}</h3>
          <p>ƒêang s·ª≠ d·ª•ng</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon reserved">
          <i class="fas fa-calendar-check"></i>
        </div>
        <div class="stat-info">
          <h3>{{countReserved}}</h3>
          <p>ƒê√£ ƒë·∫∑t tr∆∞·ªõc</p>
        </div>
      </div>
    </div>

    <!-- Rooms Grid -->
    <div class="rooms-grid" id="roomsGrid">
      {{#each phonghats}}
      <div class="room-card" data-id="{{this._id}}" data-name="{{this.TenPhong}}" data-type="{{this.LoaiPhong}}"
        data-status="{{this.TrangThai}}">
        <div class="room-image">
          <img src="{{this.LinkAnh}}" alt="{{this.TenPhong}}">
          <div class="room-overlay">
            <div class="room-actions">
              <button class="btn-edit"
                onclick="editRoom('{{this._id}}', '{{this.TenPhong}}', '{{this.LoaiPhong}}', '{{this.SucChua}}', '{{this.TrangThai}}', `{{this.GhiChu}}`, '{{this.LinkAnh}}')">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn-delete" onclick="deleteRoom('{{this._id}}', '{{this.TenPhong}}')">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
          <div class="room-badge {{this.TrangThai}}">
            {{#if (eq this.TrangThai "Tr·ªëng")}}üü¢ Tr·ªëng{{/if}}
            {{#if (eq this.TrangThai "ƒêang s·ª≠ d·ª•ng")}}üî¥ B·∫≠n{{/if}}
            {{#if (eq this.TrangThai "ƒê√£ ƒë·∫∑t tr∆∞·ªõc")}}üü° ƒê√£ ƒë·∫∑t{{/if}}
          </div>
          <div class="room-type">{{this.LoaiPhong}}</div>
        </div>

        <div class="room-content">
          <h3 class="room-title">{{this.TenPhong}}</h3>
          <p class="room-description">{{#if this.GhiChu}}{{this.GhiChu}}{{else}}Kh√¥ng c√≥ ghi ch√∫{{/if}}</p>

          <div class="room-details">
            <div class="detail-item">
              <i class="fas fa-users"></i>
              <span>T·ªëi ƒëa {{this.SucChua}} ng∆∞·ªùi</span>
            </div>
          </div>

          <!-- Hi·ªÉn th·ªã b·∫£ng gi√° chi ti·∫øt -->
          {{#if this.BangGia.length}}
          <div class="bang-gia-details">
            <div class="bang-gia-header">
              <div class="bang-gia-title">B·∫£ng gi√° theo gi·ªù:</div>
              <button class="btn-edit-banggia" onclick="editBangGia('{{this.LoaiPhong}}', {{json this.BangGia}})">
                <i class="fas fa-edit"></i> S·ª≠a gi√°
              </button>
            </div>
            {{#each this.BangGia}}
            <div class="gia-item">
              <span class="khung-gio">{{this.KhungGio}}</span>
              <span class="gia-tien">{{formatNumber this.GiaTien}} VNƒê</span>
            </div>
            {{/each}}
          </div>
          {{else}}
          <div class="no-banggia">
            <button class="btn-add-banggia" onclick="addBangGia('{{this.LoaiPhong}}')">
              <i class="fas fa-plus"></i> Th√™m b·∫£ng gi√°
            </button>
          </div>
          {{/if}}

          <div class="room-footer">
            <span class="room-id">#{{this.MaPhong}}</span>
            <button class="btn-status" onclick="toggleStatus('{{this._id}}', '{{this.TrangThai}}')">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
      </div>
      {{/each}}
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationContainer">
      <div class="pagination-info">
        Hi·ªÉn th·ªã <span id="currentRange">1-6</span> c·ªßa <span id="totalRoomsCount">{{totalRooms}}</span> ph√≤ng
      </div>
      <div class="pagination-controls">
        <button class="pagination-btn pagination-prev" onclick="changePage(-1)">
          <i class="fas fa-chevron-left"></i>
        </button>

        <div class="pagination-pages" id="paginationPages">
          <!-- Pages will be generated by JavaScript -->
        </div>

        <button class="pagination-btn pagination-next" onclick="changePage(1)">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="emptyState"
      style="{{#if phonghats.length}}display: none;{{else}}display: block;{{/if}}">
      <div class="empty-icon">üé§</div>
      <h3>Kh√¥ng t√¨m th·∫•y ph√≤ng h√°t</h3>
      <p>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c th√™m ph√≤ng m·ªõi</p>
      <button class="btn-primary" onclick="openRoomModal()">
        <i class="fas fa-plus"></i>
        Th√™m ph√≤ng ƒë·∫ßu ti√™n
      </button>
    </div>
  </div>

  <!-- Room Modal -->
  <div class="modal-overlay" id="roomModal" style="display: none;">
    <div class="modal-container">
      <div class="modal-header">
        <h2 id="modalTitle">Th√™m ph√≤ng h√°t m·ªõi</h2>
        <button class="modal-close" onclick="closeRoomModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>

      <div class="modal-body">
        <form id="roomForm" onsubmit="saveRoom(event)">
          <input type="hidden" id="roomId">

          <div class="form-grid">
            <div class="form-group">
              <label for="roomName">T√™n ph√≤ng h√°t *</label>
              <input type="text" id="roomName" required placeholder="Nh·∫≠p t√™n ph√≤ng">
            </div>

            <div class="form-group">
              <label for="roomType">Lo·∫°i ph√≤ng *</label>
              <select id="roomType" required>
                <option value="">Ch·ªçn lo·∫°i ph√≤ng</option>
                {{#each roomTypes}}
                <option value="{{this}}">{{this}}</option>
                {{/each}}
              </select>
            </div>

            <div class="form-group">
              <label for="roomSize">S·ª©c ch·ª©a *</label>
              <input type="number" id="roomSize" required placeholder="S·ªë ng∆∞·ªùi t·ªëi ƒëa" min="1">
            </div>

            <div class="form-group">
              <label for="roomStatus">Tr·∫°ng th√°i *</label>
              <select id="roomStatus" required>
                <option value="Tr·ªëng">üü¢ C√≤n tr·ªëng</option>
                <option value="ƒêang s·ª≠ d·ª•ng">üî¥ ƒêang s·ª≠ d·ª•ng</option>
                <option value="ƒê√£ ƒë·∫∑t tr∆∞·ªõc">üü° ƒê√£ ƒë·∫∑t tr∆∞·ªõc</option>
              </select>
            </div>

            <div class="form-group">
              <label for="roomImage">Link ·∫£nh</label>
              <input type="text" id="roomImage" placeholder="URL h√¨nh ·∫£nh" oninput="updateImagePreview(this.value)">
            </div>
          </div>

          <div class="form-group full-width">
            <label for="roomDescription">Ghi ch√∫</label>
            <textarea id="roomDescription" name="roomDescription" rows="3"
              placeholder="Ghi ch√∫ v·ªÅ ph√≤ng h√°t"></textarea>
          </div>

          <div class="form-group full-width" id="imagePreviewContainer">
            <label>Preview ·∫£nh</label>
            <div class="image-preview" id="imagePreview">
              <i class="fas fa-image"></i>
              <p>Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
            </div>
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button class="btn-secondary" type="button" onclick="closeRoomModal()">H·ªßy</button>
        <button class="btn-primary" type="submit" form="roomForm">L∆∞u th√¥ng tin</button>
      </div>
    </div>
  </div>

  <!-- Modal Qu·∫£n L√Ω B·∫£ng Gi√° -->
  <div class="modal-overlay" id="bangGiaModal" style="display: none;">
    <div class="modal-container">
      <div class="modal-header">
        <h2 id="bangGiaModalTitle">Qu·∫£n l√Ω b·∫£ng gi√° theo lo·∫°i ph√≤ng</h2>
        <button class="modal-close" onclick="closeBangGiaModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>

      <div class="modal-body">
        <div class="form-group">
                <label>Lo·∫°i ph√≤ng</label>
                <div class="select-with-btn-container">
                    <select class="form-select" id="bangGiaLoaiPhong" onchange="loadBangGiaForRoomType(this.value)">
                        <option value="">Ch·ªçn lo·∫°i ph√≤ng</option>
                        {{#each roomTypes}}
                            <option value="{{this}}">{{this}}</option>
                        {{/each}}
                    </select>
                    <div class="room-type-actions">
                        <button class="btn-add-room-type" onclick="addNewRoomType()" type="button" title="Th√™m lo·∫°i ph√≤ng m·ªõi">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="btn-edit-room-type" onclick="editRoomType()" type="button" title="S·ª≠a lo·∫°i ph√≤ng">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-delete-room-type" onclick="deleteRoomType()" type="button" title="Xo√° lo·∫°i ph√≤ng">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="info-note">
                <div style="background: #e3f2fd; padding: 12px; border-radius: 8px; border-left: 4px solid #2196f3;">
                    <i class="fas fa-info-circle" style="color: #2196f3;"></i>
                    <strong>L∆∞u √Ω:</strong> M·ªói l·∫ßn ch·ªâ ƒë∆∞·ª£c thao t√°c tr√™n 1 lo·∫°i ph√≤ng!
                </div>
            </div>


        <!-- Usage Guide -->
        <div class="usage-guide">
          <div class="guide-header">
            <h4><i class="fas fa-info-circle me-2"></i> H∆∞·ªõng d·∫´n nh·∫≠p khung gi·ªù</h4>
            <button type="button" class="btn-toggle-guide" onclick="toggleGuide()">
              <i class="fas fa-chevron-down"></i>
            </button>
          </div>
          <div class="guide-content" id="guideContent">
            <div class="guide-items">
              <div class="guide-item">
                <div class="guide-example">08:00-17:00</div>
                <div class="guide-desc">Khung gi·ªù ban ng√†y</div>
              </div>
              <div class="guide-item">
                <div class="guide-example">17:00-23:00</div>
                <div class="guide-desc">Khung gi·ªù t·ªëi</div>
              </div>
              <div class="guide-item">
                <div class="guide-example">23:00-04:00</div>
                <div class="guide-desc">Khung gi·ªù qua ƒë√™m</div>
              </div>
            </div>
          </div>
        </div>

        <div id="priceErrorBanner" class="error-banner hidden">
            <i class="fas fa-exclamation-triangle"></i> 
            <span id="priceErrorMessage">Vui l√≤ng ki·ªÉm tra c√°c m·ª•c ƒë∆∞·ª£c ƒë√°nh d·∫•u m√†u ƒë·ªè!</span>
        </div>
        <!-- Price List -->
        <div class="bang-gia-list-container">
          <div class="bang-gia-list">
            <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c load ƒë·ªông b·∫±ng JavaScript -->
            <div class="text-center text-muted p-4">
              <i class="fas fa-door-open fa-2x mb-3"></i>
              <p>Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng gi√°</p>
            </div>
          </div>
        </div>
      </div>

      <div class="modal-footer">
        <div class="footer-left">
          <button class="btn-add-price-item" type="button" onclick="addPriceItem()">
            <i class="fas fa-plus-circle"></i> Th√™m khung gi·ªù m·ªõi
          </button>
          <p class="add-price-note">*C√≥ th·ªÉ th√™m nhi·ªÅu khung gi·ªù kh√°c nhau cho c√πng lo·∫°i ph√≤ng</p>
        </div>
        <div class="footer-right">
          <button class="btn-secondary" onclick="closeBangGiaModal()">H·ªßy b·ªè</button>
          <button class="btn-primary" onclick="saveBangGia()">
            <i class="fas fa-save"></i> L∆∞u b·∫£ng gi√°
          </button>
        </div>
      </div>

    </div>
  </div>



</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // ===== CONFIGURATION & STATE =====
  const CONFIG = {
    roomsPerPage: 4,
    stateKey: 'karaoke_app_state',
    searchDebounceTime: 300
  };

  let appState = {
    activeModal: null,
    modalData: {},
    filters: { search: '', type: '', status: '' },
    pagination: { currentPage: 1 }
  };

  let allRooms = [];
  let filteredRooms = [];
  let currentPage = 1;
  let searchTimeout;
  let currentEditingLoaiPhong = null;
  let hasUnsavedChanges = false;
  let currentLoaiPhong = null;
  let initialPriceItemsCount = 0;
  // ===== STATE FOR NEW ROOM TYPE =====
  let newRoomName = new Map();
  let priceData = [];
  let isNewRoomType = false;
  let pendingRoomType = null;
  let hasPriceItems = false;

  let currentEditingRoomType = null;
  let originalPriceData = [];

  let previousLoaiPhong = null;
  let pendingLoaiPhongChange = null;
  let pendingPriceData = null;

  // ===== UTILITY FUNCTIONS =====
  function formatNumber(price) {
    return new Intl.NumberFormat('vi-VN').format(price);
  }

  function formatTimeInput(timeStr) {
    if (!timeStr) return '';

    if (timeStr.includes(':') && /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeStr)) {
      return timeStr;
    }

    const numbers = timeStr.replace(/[^0-9]/g, '');
    if (numbers.length === 0) return '';

    let hours = numbers.slice(0, 2);
    let minutes = numbers.slice(2, 4);

    if (hours) {
      const hourNum = parseInt(hours);
      if (hourNum > 23) {
        hours = '23';
      } else if (hourNum < 10 && hours.length === 1) {
        hours = '0' + hours;
      } else {
        hours = hours.padStart(2, '0');
      }
    }

    if (minutes) {
      const minuteNum = parseInt(minutes);
      if (minuteNum > 59) {
        minutes = minutes;
      } else {
        minutes = minutes.padStart(2, '0');
      }
    }

    if (minutes) {
      return `${hours}:${minutes}`;
    } else if (hours) {
      return `${hours}:00`;
    }

    return timeStr;
  }

  function validateTimeFormat(time) {
    return /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(time);
  }

  function isTimeRangeOverlapping(start1, end1, start2, end2) {
    const toMinutes = (timeStr) => {
      const [hours, minutes] = timeStr.split(':').map(Number);
      return hours * 60 + minutes;
    };

    const s1 = toMinutes(start1);
    const e1 = toMinutes(end1);
    const s2 = toMinutes(start2);
    const e2 = toMinutes(end2);

    const adjustEndTime = (start, end) => {
      return end < start ? end + 24 * 60 : end;
    };

    const adjustedE1 = adjustEndTime(s1, e1);
    const adjustedE2 = adjustEndTime(s2, e2);

    const maxStart = Math.max(s1, s2);
    const minEnd = Math.min(adjustedE1, adjustedE2);

    return maxStart < minEnd;
  }

  async function showTimeRangeError(message, inputToFocus = null) {
    if (inputToFocus) {
      inputToFocus.focus();
    }

    console.error('L·ªói khung gi·ªù:', message);
  }

  function showError(message) {
    Swal.fire({
      icon: 'warning',
      title: 'Thi·∫øu th√¥ng tin',
      text: message,
      confirmButtonColor: '#667eea'
    });
  }

  // ===== STATE MANAGEMENT =====
  function saveAppState() {
    try {
      localStorage.setItem(CONFIG.stateKey, JSON.stringify(appState));
      console.log('üíæ ƒê√£ l∆∞u tr·∫°ng th√°i:', appState);
    } catch (error) {
      console.error('‚ùå L·ªói l∆∞u tr·∫°ng th√°i:', error);
    }
  }

  function loadAppState() {
    try {
      const saved = localStorage.getItem(CONFIG.stateKey);
      if (saved) {
        appState = JSON.parse(saved);
        console.log('üìÇ ƒê√£ kh√¥i ph·ª•c tr·∫°ng th√°i:', appState);
        return true;
      }
    } catch (error) {
      console.error('‚ùå L·ªói kh√¥i ph·ª•c tr·∫°ng th√°i:', error);
    }
    return false;
  }

  // ===== ROOM MANAGEMENT =====
  function openRoomModal(roomData = null) {
    document.getElementById('modalTitle').textContent = roomData ? 'Ch·ªânh s·ª≠a ph√≤ng h√°t' : 'Th√™m ph√≤ng h√°t m·ªõi';
    document.getElementById('roomModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';

    if (roomData) {
      document.getElementById('roomId').value = roomData._id || '';
      document.getElementById('roomName').value = roomData.TenPhong || '';
      document.getElementById('roomType').value = roomData.LoaiPhong || '';
      document.getElementById('roomSize').value = roomData.SucChua || '';
      document.getElementById('roomStatus').value = roomData.TrangThai || 'Tr·ªëng';
      document.getElementById('roomDescription').value = roomData.GhiChu || '';
      document.getElementById('roomImage').value = roomData.LinkAnh || '';
      updateImagePreview(roomData.LinkAnh || '');
    } else {
      resetRoomForm();
    }
  }

  function editRoom(id, name, type, size, status, description, image) {
    // üî• L∆ØU TH√îNG TIN ƒê·ªÇ T√åM L·∫†I SAU KHI RELOAD
    sessionStorage.setItem('lastActionRoomId', id);
    sessionStorage.setItem('lastActionType', 'room');
    
    // L∆∞u filters hi·ªán t·∫°i
    const currentFilters = {
        search: document.getElementById('searchInput').value,
        type: document.getElementById('typeFilter').value,
        status: document.getElementById('statusFilter').value
    };
    sessionStorage.setItem('currentFilters', JSON.stringify(currentFilters));
    
    // üî• L∆ØU STATE HI·ªÜN T·∫†I
    const currentState = {
        page: currentPage,
        filters: currentFilters,
        timestamp: Date.now()
    };
    sessionStorage.setItem('karaokeAppStateBeforeReload', JSON.stringify(currentState));

    console.log('üíæ ƒê√£ l∆∞u state tr∆∞·ªõc khi m·ªü modal:', currentState);

    const roomData = {
        _id: id,
        TenPhong: name,
        LoaiPhong: type,
        SucChua: size,
        TrangThai: status,
        GhiChu: description,
        LinkAnh: image
    };
    openRoomModal(roomData);
}

  function closeRoomModal() {
    // L∆ØU TR·∫†NG TH√ÅI HI·ªÜN T·∫†I (gi·ªØ nguy√™n trang v√† filters)
    const currentState = {
        page: currentPage, // üî• Gi·ªØ nguy√™n trang hi·ªán t·∫°i
        filters: {
            search: document.getElementById('searchInput').value,
            type: document.getElementById('typeFilter').value,
            status: document.getElementById('statusFilter').value
        },
        timestamp: Date.now()
    };
    sessionStorage.setItem('karaokeAppStateBeforeReload', JSON.stringify(currentState));

    document.getElementById('roomModal').style.display = 'none';
    document.body.style.overflow = 'auto';

    console.log('üíæ ƒê√£ l∆∞u state tr∆∞·ªõc khi ƒë√≥ng room modal - Gi·ªØ nguy√™n trang:', currentPage);
    location.reload(); // üî• Reload ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
  }

  function resetRoomForm() {
    document.getElementById('roomForm').reset();
    document.getElementById('roomId').value = '';
    document.getElementById('roomStatus').value = 'Tr·ªëng';
    updateImagePreview('');
  }

  function updateImagePreview(imageUrl) {
    const preview = document.getElementById('imagePreview');
    if (imageUrl && imageUrl.trim() !== '') {
      preview.innerHTML = `<img src="${imageUrl}" alt="Preview" onerror="this.style.display='none'">`;
    } else {
      preview.innerHTML = '<i class="fas fa-image"></i><p>Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>';
    }
  }

  async function saveRoom(event) {
    event.preventDefault();

    const formData = {
        TenPhong: document.getElementById('roomName').value.trim(),
        LoaiPhong: document.getElementById('roomType').value,
        SucChua: parseInt(document.getElementById('roomSize').value),
        TrangThai: document.getElementById('roomStatus').value,
        GhiChu: document.getElementById('roomDescription').value.trim(),
        LinkAnh: document.getElementById('roomImage').value.trim()
    };

    if (!formData.TenPhong?.trim()) {
        showError('Vui l√≤ng nh·∫≠p t√™n ph√≤ng');
        return;
    }
    if (!formData.LoaiPhong) {
        showError('Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng');
        return;
    }
    if (!formData.SucChua || formData.SucChua <= 0) {
        showError('Vui l√≤ng nh·∫≠p s·ª©c ch·ª©a h·ª£p l·ªá');
        return;
    }

    const roomId = document.getElementById('roomId').value;
    const url = roomId ? `/api/phonghat/${roomId}` : '/api/phonghat';
    const method = roomId ? 'PUT' : 'POST';

    try {
        Swal.fire({
            title: 'ƒêang l∆∞u th√¥ng tin...',
            text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        const result = await response.json();
        if (!response.ok) throw new Error(result.error || result.message || 'L·ªói server');

        const targetRoomId = roomId || result.data?._id;

        // üî• L∆ØU TH√îNG TIN ƒê·ªÇ T√åM TRANG SAU KHI RELOAD
        if (targetRoomId) {
            // L∆∞u th√¥ng tin ƒë·ªÉ auto navigation
            sessionStorage.setItem('lastActionRoomId', targetRoomId);
            sessionStorage.setItem('lastActionType', 'room');
            
            // üî• L∆ØU STATE HI·ªÜN T·∫†I (gi·ªØ nguy√™n trang v√† filters)
            const currentState = {
                page: currentPage, // üî• Gi·ªØ nguy√™n trang hi·ªán t·∫°i
                filters: {
                    search: document.getElementById('searchInput').value,
                    type: document.getElementById('typeFilter').value,
                    status: document.getElementById('statusFilter').value
                },
                timestamp: Date.now()
            };
            sessionStorage.setItem('karaokeAppStateBeforeReload', JSON.stringify(currentState));
            
            console.log('üíæ ƒê√£ l∆∞u state cho reload - Gi·ªØ nguy√™n trang:', currentPage);
        }

        Swal.fire({
            icon: 'success',
            title: 'Th√†nh c√¥ng!',
            text: result.message || `Ph√≤ng "${formData.TenPhong}" ƒë√£ ƒë∆∞·ª£c ${roomId ? 'c·∫≠p nh·∫≠t' : 'th√™m'} th√†nh c√¥ng!`,
            timer: 1500,
            showConfirmButton: false
        });

        // RELOAD TRANG (s·∫Ω gi·ªØ nguy√™n trang v√† filters)
        setTimeout(() => {
            location.reload();
        }, 1500);

    } catch (error) {
        console.error('‚ùå L·ªói khi l∆∞u ph√≤ng:', error);
        Swal.fire({
            icon: 'error',
            title: 'L·ªói!',
            text: error.message || 'Kh√¥ng th·ªÉ l∆∞u th√¥ng tin ph√≤ng',
            confirmButtonColor: '#667eea'
        });
    }
}
  



  async function deleteRoom(roomId, roomName) {
    const result = await Swal.fire({
      title: 'X√°c nh·∫≠n x√≥a?',
      html: `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√≤ng <strong>${roomName}</strong>?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#e53e3e',
      cancelButtonColor: '#667eea',
      confirmButtonText: 'X√≥a',
      cancelButtonText: 'H·ªßy'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/api/phonghat/${roomId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error('L·ªói khi x√≥a ph√≤ng');

        await Swal.fire({
          icon: 'success',
          title: 'ƒê√£ x√≥a!',
          text: 'Ph√≤ng h√°t ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng',
          timer: 1500,
          showConfirmButton: false
        });

        location.reload();
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: 'Kh√¥ng th·ªÉ x√≥a ph√≤ng h√°t'
        });
      }
    }
  }
  

  // ===== ROOM TYPE MANAGEMENT =====
  async function addNewRoomType() {
    const { value: roomType } = await Swal.fire({
        title: 'Th√™m lo·∫°i ph√≤ng m·ªõi',
        input: 'text',
        inputLabel: 'T√™n lo·∫°i ph√≤ng',
        inputPlaceholder: 'Nh·∫≠p t√™n lo·∫°i ph√≤ng m·ªõi...',
        showCancelButton: true,
        confirmButtonText: 'Th√™m m·ªõi',
        cancelButtonText: 'H·ªßy',
        inputValidator: (value) => {
            if (!value) return 'Vui l√≤ng nh·∫≠p t√™n lo·∫°i ph√≤ng!';
        }
    });

    if (roomType) {
        const trimmedRoomType = roomType.trim();
        
        try {
            Swal.fire({
                title: 'ƒêang th√™m lo·∫°i ph√≤ng...',
                text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            });
            
            if (await checkRoomTypeInUse(trimmedRoomType)) {
                Swal.fire({
                  icon: 'error',
                  title: 'Th·∫•t b·∫°i',
                  text: `Lo·∫°i ph√≤ng "${trimmedRoomType}" ƒë√£ ƒë∆∞·ª£c th√™m tr∆∞·ªõc ƒë√≥!`,
                  showConfirmButton: true
                });
                return;
            }
            const defaultPriceEntry = {
                KhungGio: '00:00-00:00',
                GiaTien: 000000
            };
            newRoomName.set(trimmedRoomType, [defaultPriceEntry]);

            
            {{!-- // G·ªçi API th√™m lo·∫°i ph√≤ng
            const response = await fetch('/api/loaiphong', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    TenLoaiPhong: trimmedRoomType,
                    Action: 'add'
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'L·ªói khi th√™m lo·∫°i ph√≤ng');
            }

            const result = await response.json(); --}}
            
            const result = { message: 'Th√™m th√†nh c√¥ng' };

            // C·∫≠p nh·∫≠t UI
            await updateRoomTypeInUI(trimmedRoomType, 'add');
            
            // M·ªü modal b·∫£ng gi√°
            document.getElementById('bangGiaLoaiPhong').value = trimmedRoomType;
            displayBangGiaFromTemp(trimmedRoomType);


            Swal.fire({
                icon: 'success',
                title: 'Th√†nh c√¥ng!',
                text: result.message || `ƒê√£ th√™m lo·∫°i ph√≤ng "${trimmedRoomType}" th√†nh c√¥ng!`,
                timer: 1500,
                showConfirmButton: false
            });
            for (let [type, priceEntries] of newRoomName) {
                console.log(`Lo·∫°i ph√≤ng: ${type}`);
                if (Array.isArray(priceEntries)) {
                  for (const { KhungGio, GiaTien } of priceEntries) {
                      // 3. In chi ti·∫øt t·ª´ng khung gi·ªù
                      console.log(`Khung gi·ªù: ${KhungGio}`);
                      console.log(`Gi√° ti·ªÅn: ${GiaTien}`);
                  }
                } else {
                    console.log("  ‚ö†Ô∏è D·ªØ li·ªáu gi√° kh√¥ng ph·∫£i l√† m·∫£ng.");
                }
            }
            // ƒê√°nh d·∫•u l√† lo·∫°i ph√≤ng m·ªõi v√† ch∆∞a c√≥ b·∫£ng gi√°
            isNewRoomType = true;
            pendingRoomType = trimmedRoomType;
            hasPriceItems = true;

        } catch (error) {
            Swal.close();
            console.error('‚ùå L·ªói khi th√™m lo·∫°i ph√≤ng:', error);
            
            Swal.fire({
                icon: 'error',
                title: 'L·ªói!',
                text: error.message || 'Kh√¥ng th·ªÉ th√™m lo·∫°i ph√≤ng m·ªõi',
                confirmButtonColor: '#667eea'
            });
        }
    }
}

function displayBangGiaFromTemp(loaiPhong) {
    const bangGiaList = document.querySelector('.bang-gia-list');
    const tempData = newRoomName.get(loaiPhong) || [];
    
    console.log(`üéØ Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ m·∫£ng t·∫°m cho ${loaiPhong}:`, tempData);

    // C·∫¨P NH·∫¨T LO·∫†I PH√íNG HI·ªÜN T·∫†I
    currentEditingLoaiPhong = loaiPhong;

    // X√ìA N·ªòI DUNG C≈®
    bangGiaList.innerHTML = '';

    if (tempData.length === 0) {
        // Hi·ªÉn th·ªã tr·∫°ng th√°i empty v·ªõi n√∫t th√™m khung gi·ªù
        displayEmptyStateWithAddButton(loaiPhong);
        return;
    }

    // HI·ªÇN TH·ªä D·ªÆ LI·ªÜU T·ª™ M·∫¢NG T·∫†M
    tempData.forEach((gia, index) => {
        const [startTime = '', endTime = ''] = gia.KhungGio ? gia.KhungGio.split('-') : ['08:00', '17:00'];
        const giaTien = gia.GiaTien || 0;
        const priceItem = createPriceItem(
            `${startTime}-${endTime}`,
            giaTien,
            gia.MaGia || ''
        );
        bangGiaList.appendChild(priceItem);
    });

    // LU√îN TH√äM N√öT "TH√äM KHUNG GI·ªú"
    addPriceItemSection();

    // üî• T·ª∞ ƒê·ªòNG FOCUS V√ÄO INPUT ƒê·∫¶U TI√äN ƒê·ªÇ NG∆Ø·ªúI D√ôNG NH·∫¨P LI·ªÜU NGAY
    setTimeout(() => {
        const firstInput = bangGiaList.querySelector('.start-time-input');
        if (firstInput) {
            firstInput.focus();
        }
    }, 300);
}

  function addEntryToRoomType(roomType, newEntry) {
    if (!newRoomName.has(roomType)) {
        console.warn(`Lo·∫°i ph√≤ng '${roomType}' ch∆∞a t·ªìn t·∫°i. Kh·ªüi t·∫°o m·ªõi...`);
        newRoomName.set(roomType, []); // Kh·ªüi t·∫°o m·∫£ng r·ªóng n·∫øu ch∆∞a c√≥
    }
    
    // L·∫•y tham chi·∫øu ƒë·∫øn m·∫£ng gi√° tr·ªã (Value Array)
    const currentEntries = newRoomName.get(roomType);
    
    // Th√™m m·ª•c m·ªõi v√†o m·∫£ng
    currentEntries.push(newEntry);
    
    // Do currentEntries l√† tham chi·∫øu, Map t·ª± ƒë·ªông c·∫≠p nh·∫≠t, 

    // nh∆∞ng ta d√πng set() l·∫°i ƒë·ªÉ r√µ r√†ng (t√πy ch·ªçn)
    newRoomName.set(roomType, currentEntries);

    console.log(`ƒê√£ th√™m m·ª•c m·ªõi cho ${roomType}. T·ªïng s·ªë: ${currentEntries.length}`);
  }

async function editRoomType() {
    const selectElement = document.getElementById('bangGiaLoaiPhong');
    let currentRoomType = selectElement.value;

    // üî• DEBUG: Ki·ªÉm tra selectElement
    if (selectElement) {
        console.log('‚úÖ Select element found:', selectElement);
        console.log('üìã Current value:', currentRoomType);
    } else {
        console.log('‚ùå Select element NOT found');
        await Swal.fire({
            icon: 'error',
            title: 'L·ªói h·ªá th·ªëng',
            text: 'Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ch·ªçn lo·∫°i ph√≤ng',
            confirmButtonColor: '#667eea'
        });
        return;
    }

    if (!currentRoomType) {
        await Swal.fire({
            icon: 'warning',
            title: 'Ch∆∞a ch·ªçn lo·∫°i ph√≤ng',
            text: 'Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng mu·ªën s·ª≠a',
            confirmButtonColor: '#667eea'
        });
        return;
    }

    const { value: newRoomType } = await Swal.fire({
      title: 'S·ª≠a lo·∫°i ph√≤ng',
      input: 'text',
      inputLabel: 'T√™n lo·∫°i ph√≤ng m·ªõi',
      inputValue: currentRoomType,
      inputPlaceholder: 'Nh·∫≠p t√™n lo·∫°i ph√≤ng m·ªõi...',
      showCancelButton: true,
      confirmButtonText: 'C·∫≠p nh·∫≠t',
      cancelButtonText: 'H·ªßy',
      inputValidator: (value) => {
        if (!value) {
            return 'Vui l√≤ng nh·∫≠p t√™n lo·∫°i ph√≤ng!';
        }
        if (value === currentRoomType) {
            return 'T√™n lo·∫°i ph√≤ng kh√¥ng thay ƒë·ªïi!';
        }
      }
    });

    if (!newRoomType) {
        // newRoomType l√† undefined khi ng∆∞·ªùi d√πng nh·∫•n H·ªßy ho·∫∑c ƒë√≥ng modal
        console.log('Ng∆∞·ªùi d√πng ƒë√£ h·ªßy thao t√°c s·ª≠a lo·∫°i ph√≤ng.');
        return; // D·ª´ng h√†m, kh√¥ng l√†m g√¨ c·∫£
    }

    if (await checkRoomTypeInDB(currentRoomType)) {
      console.log('C√≥ trong DB (OldRoom)');
      if (newRoomType) {
          await saveRoomType(newRoomType.trim(), 'edit', currentRoomType);
      }
    }
    else {
      console.log('K c√≥ trong DB (NewRoom)');
      if (newRoomName.has(currentRoomType)) {
        const roomData = newRoomName.get(currentRoomType);
        newRoomName.delete(currentRoomType);
        newRoomName.set(newRoomType, roomData);
      }
      await updateRoomTypeInUI(newRoomType, 'edit', currentRoomType);
      await Swal.fire({
          icon: 'success',
          title: 'Th√†nh c√¥ng!',
          // ‚úÖ S·ª¨A L·ªñI: Ghi ƒë√® th√¥ng b√°o m·∫∑c ƒë·ªãnh b·∫±ng chu·ªói c·ªë ƒë·ªãnh
          text: `ƒê√£ c·∫≠p nh·∫≠t lo·∫°i ph√≤ng "${currentRoomType}" th√†nh "${newRoomType}" (T·∫°m th·ªùi)!`,
          timer: 2000,
          showConfirmButton: false
      });
      selectElement.value = newRoomType;
      currentRoomType = newRoomType;

      console.log('--- Tr·∫°ng th√°i Map sau khi ƒë·ªïi key ---');
      for (let [type, { KhungGio, GiaTien }] of newRoomName) {
          console.log(`Lo·∫°i ph√≤ng: ${type}`);
          console.log(`Khung gi·ªù: ${KhungGio}`);
          console.log(`Gi√° ti·ªÅn: ${GiaTien}`);
      }
    }
}

async function deleteRoomType() {
    const selectElement = document.getElementById('bangGiaLoaiPhong');
    const currentRoomType = selectElement.value;

    if (!currentRoomType) {
        await Swal.fire({
            icon: 'warning',
            title: 'Ch∆∞a ch·ªçn lo·∫°i ph√≤ng',
            text: 'Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng mu·ªën xo√°',
            confirmButtonColor: '#667eea'
        });
        return;
    }

    
        await checkAndDeleteEmptyRoomType(currentRoomType);
}

async function deleteRoomTypeAfterExit(loaiPhongToDelete) {

    if (!loaiPhongToDelete) {
        await Swal.fire({
            icon: 'warning',
            title: 'Ch∆∞a ch·ªçn lo·∫°i ph√≤ng',
            text: 'Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng mu·ªën xo√°',
            confirmButtonColor: '#667eea'
        });
        return;
    }
    await checkAndDeleteEmptyRoomType(loaiPhongToDelete);
}

// ===== HELPER FUNCTIONS =====
async function saveRoomType(roomType, action, oldRoomType = null) {
    try {
        console.log('üü° B·∫Øt ƒë·∫ßu saveRoomType:', { roomType, action, oldRoomType });

        Swal.fire({
            title: action === 'add' ? 'ƒêang th√™m lo·∫°i ph√≤ng...' : 
                   action === 'edit' ? 'ƒêang c·∫≠p nh·∫≠t lo·∫°i ph√≤ng...' : 'ƒêang x√≥a lo·∫°i ph√≤ng...',
            text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        const payload = {
            TenLoaiPhong: roomType,
            Action: action
        };

        if (action === 'edit') {
            payload.OldRoomType = oldRoomType;
        }

        console.log('üì§ G·ª≠i request ƒë·∫øn /api/loaiphong');
        console.log('üì§ Payload:', payload);

        const response = await fetch('/api/loaiphong', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        console.log('üì• Response status:', response.status);
        console.log('üì• Response ok:', response.ok);

        // Ki·ªÉm tra n·∫øu response kh√¥ng ok
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}: `;
            
            try {
                const errorResult = await response.json();
                errorMessage += errorResult.error || errorResult.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server';
            } catch (e) {
                // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, l·∫•y text th√¥
                const errorText = await response.text();
                errorMessage += errorText || 'L·ªói server kh√¥ng x√°c ƒë·ªãnh';
            }
            
            throw new Error(errorMessage);
        }

        const result = await response.json();
        console.log('üì• Response data:', result);

        // C·∫≠p nh·∫≠t giao di·ªán
        await updateRoomTypeInUI(roomType, action, oldRoomType);

        Swal.fire({
            icon: 'success',
            title: 'Th√†nh c√¥ng!',
            text: result.message || `ƒê√£ ${action === 'add' ? 'th√™m' : action === 'edit' ? 'c·∫≠p nh·∫≠t' : 'xo√°'} lo·∫°i ph√≤ng "${roomType}" th√†nh c√¥ng!`,
            timer: 2000,
            showConfirmButton: false
        });
        hasUnsavedChanges = false;

        // T·ª± ƒë·ªông load b·∫£ng gi√° cho lo·∫°i ph√≤ng m·ªõi/c·∫≠p nh·∫≠t
        if (action === 'add') {
            document.getElementById('bangGiaLoaiPhong').value = roomType;
            loadBangGiaForRoomType(roomType);
        } else if (action === 'edit') {
            loadBangGiaForRoomType(roomType);
        }

    } catch (error) {
        console.error(`‚ùå L·ªói chi ti·∫øt khi ${action} lo·∫°i ph√≤ng:`, error);
        console.error('üìå Stack trace:', error.stack);
        
        Swal.fire({
            icon: 'error',
            title: 'L·ªói!',
            html: `L·ªói khi ${action} lo·∫°i ph√≤ng:<br><strong>${error.message}</strong>`,
            confirmButtonColor: '#667eea'
        });
    }
}



  async function checkRoomTypeInDB(roomType) {
      try {
          const response = await fetch(`/api/loaiphong/check-loai-phong/${roomType}`);
          if (response.ok) {
              const rooms = await response.json();
              return rooms.isUsed;
          }
          return false;
      } catch (error) {
          console.error('‚ùå L·ªói khi ki·ªÉm tra lo·∫°i ph√≤ng:', error);
          return true; // Tr·∫£ v·ªÅ true ƒë·ªÉ ngƒÉn xo√° n·∫øu c√≥ l·ªói
      }
  }


  async function checkRoomTypeInUse(roomType) {
      try {
          const response = await fetch(`/api/phonghat/check-loai-phong/${roomType}`);
          if (response.ok) {
              const rooms = await response.json();
              return rooms.isUsed;
          }
          return false;
      } catch (error) {
          console.error('‚ùå L·ªói khi ki·ªÉm tra lo·∫°i ph√≤ng:', error);
          return true; // Tr·∫£ v·ªÅ true ƒë·ªÉ ngƒÉn xo√° n·∫øu c√≥ l·ªói
      }
  }

  async function deleteRoomTypeFromServer(roomType) {
      try {
          Swal.fire({
              title: 'ƒêang xo√° lo·∫°i ph√≤ng...',
              text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
              allowOutsideClick: false,
              didOpen: () => Swal.showLoading()
          });

          const response = await fetch(`/api/banggia/${roomType}`, {
              method: 'DELETE'
          });

          const result = await response.json();

          if (!response.ok) {
              throw new Error(result.error || result.message || 'L·ªói khi xo√° lo·∫°i ph√≤ng');
          }

          // C·∫≠p nh·∫≠t giao di·ªán
          await updateRoomTypeInUI(roomType, 'delete');

          Swal.fire({
              icon: 'success',
              title: 'ƒê√£ xo√°!',
              text: result.message || `ƒê√£ xo√° lo·∫°i ph√≤ng "${roomType}" th√†nh c√¥ng!`,
              timer: 2000,
              showConfirmButton: false
          });

      
          // Reset v√† ƒë√≥ng modal
          document.getElementById('bangGiaModal').style.display = 'none';
          document.body.style.overflow = 'auto';
          resetBangGiaModal();

      } catch (error) {
          console.error('‚ùå L·ªói khi xo√° lo·∫°i ph√≤ng:', error);
          
          Swal.fire({
              icon: 'error',
              title: 'L·ªói!',
              text: error.message || 'Kh√¥ng th·ªÉ xo√° lo·∫°i ph√≤ng',
              confirmButtonColor: '#667eea'
          });
      }
  }

  async function updateRoomTypeInUI(newRoomType, action, oldRoomType = null) {
      const selectElements = [
          document.getElementById('bangGiaLoaiPhong'),
          document.getElementById('roomType'),
          document.getElementById('typeFilter')
      ];

      selectElements.forEach(select => {
          if (!select) return;

          switch (action) {
              case 'add':
                  // Th√™m option m·ªõi
                  const newOption = document.createElement('option');
                  newOption.value = newRoomType;
                  newOption.textContent = newRoomType;
                  select.appendChild(newOption);
                  break;

              case 'edit':
                  // C·∫≠p nh·∫≠t option c≈©
                  const optionToUpdate = select.querySelector(`option[value="${oldRoomType}"]`);
                  if (optionToUpdate) {
                      optionToUpdate.value = newRoomType;
                      optionToUpdate.textContent = newRoomType;
                      
                      // N·∫øu ƒëang ch·ªçn option n√†y, c·∫≠p nh·∫≠t gi√° tr·ªã
                      if (select.value === oldRoomType) {
                          select.value = newRoomType;
                      }
                  }
                  break;

              case 'delete':
                  // Xo√° option
                  const optionToDelete = select.querySelector(`option[value="${newRoomType}"]`);
                  if (optionToDelete) {
                      optionToDelete.remove();
                  }
                  break;
          }
      });
  }
    

  async function toggleStatus(roomId, currentStatus) {
    const statusMap = {
      'Tr·ªëng': { next: 'ƒê√£ ƒë·∫∑t tr∆∞·ªõc', text: 'üü¢ Tr·ªëng' },
      'ƒê√£ ƒë·∫∑t tr∆∞·ªõc': { next: 'ƒêang s·ª≠ d·ª•ng', text: 'üü° ƒê√£ ƒë·∫∑t' },
      'ƒêang s·ª≠ d·ª•ng': { next: 'Tr·ªëng', text: 'üî¥ B·∫≠n' }
    };

    const currentStatusInfo = statusMap[currentStatus];
    const nextStatusInfo = statusMap[currentStatusInfo.next];

    const result = await Swal.fire({
      title: 'ƒê·ªïi tr·∫°ng th√°i?',
      html: `Chuy·ªÉn t·ª´ <strong>${currentStatusInfo.text}</strong> sang <strong>${nextStatusInfo.text}</strong>?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#667eea',
      cancelButtonColor: '#a0aec0',
      confirmButtonText: 'ƒê·ªìng √Ω',
      cancelButtonText: 'H·ªßy'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/api/phonghat/${roomId}/status`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ TrangThai: currentStatusInfo.next })
        });

        if (!response.ok) throw new Error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');

        await Swal.fire({
          icon: 'success',
          title: 'ƒê√£ c·∫≠p nh·∫≠t!',
          text: 'Tr·∫°ng th√°i ph√≤ng ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi',
          timer: 1500,
          showConfirmButton: false
        });

        location.reload();
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i'
        });
      }
    }
  }

  // ===== FILTER & SEARCH =====
  function findRoomPage(roomId) {
      console.log('üîç ƒêang t√¨m trang cho ph√≤ng:', roomId);
      console.log('üìä T·ªïng s·ªë ph√≤ng:', allRooms.length);
      
      for (let i = 0; i < allRooms.length; i++) {
          const roomElement = allRooms[i];
          const roomDataId = roomElement.getAttribute('data-id');
          
          console.log(`   Ph√≤ng ${i}:`, roomDataId);
          
          if (roomDataId === roomId) {
              const page = Math.floor(i / CONFIG.roomsPerPage) + 1;
              console.log(`‚úÖ T√¨m th·∫•y! Ph√≤ng ·ªü v·ªã tr√≠ ${i} -> Trang ${page}`);
              return page;
          }
      }
      
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng, tr·∫£ v·ªÅ trang 1');
      return 1;
  }

  function findRoomPageByType(loaiPhong) {
      console.log('üîç ƒêang t√¨m trang cho lo·∫°i ph√≤ng:', loaiPhong);
      
      for (let i = 0; i < allRooms.length; i++) {
          const roomElement = allRooms[i];
          const roomType = roomElement.getAttribute('data-type');
          
          if (roomType === loaiPhong) {
              const page = Math.floor(i / CONFIG.roomsPerPage) + 1;
              console.log(`‚úÖ T√¨m th·∫•y lo·∫°i ph√≤ng "${loaiPhong}" ·ªü v·ªã tr√≠ ${i} -> Trang ${page}`);
              return page;
          }
      }
      
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i ph√≤ng "${loaiPhong}", tr·∫£ v·ªÅ trang 1`);
      return 1;
  }
  
  function filterRooms() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const typeFilter = document.getElementById('typeFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;

    console.log('üîç Filtering rooms:', { searchTerm, typeFilter, statusFilter });

    filteredRooms = allRooms.filter(card => {
        const name = card.getAttribute('data-name').toLowerCase();
        const type = card.getAttribute('data-type');
        const status = card.getAttribute('data-status');

        const matchesSearch = !searchTerm || name.includes(searchTerm);
        const matchesType = !typeFilter || type === typeFilter;
        const matchesStatus = !statusFilter || status === statusFilter;

        const shouldShow = matchesSearch && matchesType && matchesStatus;
        return shouldShow;
    });

    console.log('üìä K·∫øt qu·∫£ filter:', filteredRooms.length, 'ph√≤ng');

    // üî• QUAN TR·ªåNG: KH√îNG reset currentPage v·ªÅ 1 ·ªü ƒë√¢y
    // Ch·ªâ ƒëi·ªÅu ch·ªânh n·∫øu currentPage v∆∞·ª£t qu√° t·ªïng s·ªë trang
    const totalPages = Math.ceil(filteredRooms.length / CONFIG.roomsPerPage);
    if (currentPage > totalPages && totalPages > 0) {
        currentPage = totalPages;
    } else if (totalPages === 0) {
        currentPage = 1;
    }

    showCurrentPage();
    updatePaginationInfo();
    togglePaginationVisibility();
    toggleEmptyState(filteredRooms.length === 0);
}

  function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('typeFilter').value = '';
    document.getElementById('statusFilter').value = '';

    filteredRooms = [...allRooms];
    currentPage = 1;

    showCurrentPage();
    updatePaginationInfo();
    togglePaginationVisibility();
    toggleEmptyState(false);
  }

  function toggleEmptyState(show) {
    const emptyState = document.getElementById('emptyState');
    const roomsGrid = document.getElementById('roomsGrid');
    const paginationContainer = document.getElementById('paginationContainer');

    if (!emptyState || !roomsGrid) return;

    if (show) {
      roomsGrid.style.display = 'none';
      emptyState.style.display = 'block';
      if (paginationContainer) paginationContainer.classList.add('hidden');
    } else {
      roomsGrid.style.display = 'grid';
      emptyState.style.display = 'none';
      togglePaginationVisibility();
    }
  }

  function setupRealTimeSearch() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', function () {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          filterRooms();
        }, CONFIG.searchDebounceTime);
      });
    }
  }

  // ===== PAGINATION =====
  function showCurrentPage() {
    console.log('üìÑ Hi·ªÉn th·ªã trang:', currentPage, 't·ªïng ph√≤ng filtered:', filteredRooms.length);
    
    // ·∫®n t·∫•t c·∫£ ph√≤ng tr∆∞·ªõc
    allRooms.forEach(room => {
        room.style.display = 'none';
    });

    // Hi·ªÉn th·ªã ph√≤ng thu·ªôc trang hi·ªán t·∫°i
    const startIndex = (currentPage - 1) * CONFIG.roomsPerPage;
    const endIndex = startIndex + CONFIG.roomsPerPage;

    console.log('üìÑ Ch·ªâ s·ªë:', startIndex, 'ƒë·∫øn', endIndex - 1);

    let displayedCount = 0;
    for (let i = startIndex; i < endIndex && i < filteredRooms.length; i++) {
        if (filteredRooms[i]) {
            filteredRooms[i].style.display = 'block';
            displayedCount++;
            console.log('üëâ Hi·ªÉn th·ªã ph√≤ng:', filteredRooms[i].getAttribute('data-name'));
        }
    }

    console.log('‚úÖ ƒê√£ hi·ªÉn th·ªã:', displayedCount, 'ph√≤ng');
    updatePaginationInfo();
}

  function updatePaginationInfo() {
    const currentRange = document.getElementById('currentRange');
    const totalRoomsCount = document.getElementById('totalRoomsCount');

    if (!currentRange || !totalRoomsCount) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ pagination');
        return;
    }

    const totalFilteredRooms = filteredRooms.length;
    const totalPages = Math.ceil(totalFilteredRooms / CONFIG.roomsPerPage);

    const start = totalFilteredRooms === 0 ? 0 : (currentPage - 1) * CONFIG.roomsPerPage + 1;
    const end = Math.min(currentPage * CONFIG.roomsPerPage, totalFilteredRooms);

    currentRange.textContent = totalFilteredRooms === 0 ? '0-0' : `${start}-${end}`;
    totalRoomsCount.textContent = totalFilteredRooms;

    console.log('üìä Pagination info:', {
        currentPage,
        totalPages,
        totalFilteredRooms,
        range: `${start}-${end}`,
        roomsPerPage: CONFIG.roomsPerPage
    });

    updatePaginationControls(totalPages);
}

  function updatePaginationControls(totalPages) {
    const paginationPages = document.getElementById('paginationPages');
    const prevBtn = document.querySelector('.pagination-prev');
    const nextBtn = document.querySelector('.pagination-next');

    if (!paginationPages) return;

    if (prevBtn) prevBtn.disabled = currentPage === 1;
    if (nextBtn) nextBtn.disabled = currentPage === totalPages || totalPages === 0;

    paginationPages.innerHTML = '';
    if (totalPages <= 1) return;

    addPageButton(1, paginationPages, totalPages);

    if (currentPage > 3) {
      addEllipsis(paginationPages);
    }

    const startPage = Math.max(2, currentPage - 1);
    const endPage = Math.min(totalPages - 1, currentPage + 1);

    for (let i = startPage; i <= endPage; i++) {
      if (i !== 1 && i !== totalPages) {
        addPageButton(i, paginationPages, totalPages);
      }
    }

    if (currentPage < totalPages - 2) {
      addEllipsis(paginationPages);
    }

    if (totalPages > 1) {
      addPageButton(totalPages, paginationPages, totalPages);
    }
  }

  function addPageButton(pageNumber, container, totalPages) {
    const pageBtn = document.createElement('button');
    pageBtn.className = `pagination-page ${pageNumber === currentPage ? 'active' : ''}`;
    pageBtn.textContent = pageNumber;
    pageBtn.onclick = () => goToPage(pageNumber);
    container.appendChild(pageBtn);
  }

  function addEllipsis(container) {
    const ellipsis = document.createElement('span');
    ellipsis.className = 'pagination-ellipsis';
    ellipsis.textContent = '...';
    container.appendChild(ellipsis);
  }

  function goToPage(page) {
    const totalPages = Math.ceil(filteredRooms.length / CONFIG.roomsPerPage);
    if (page < 1 || page > totalPages || totalPages === 0) return;

    currentPage = page;
    showCurrentPage();
  }

  function changePage(direction) {
    const totalPages = Math.ceil(filteredRooms.length / CONFIG.roomsPerPage);
    const newPage = currentPage + direction;

    if (newPage < 1 || newPage > totalPages || totalPages === 0) return;

    currentPage = newPage;
    showCurrentPage();
  }

  function togglePaginationVisibility() {
    const paginationContainer = document.getElementById('paginationContainer');
    if (!paginationContainer) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y paginationContainer');
        return;
    }

    const shouldShow = filteredRooms.length > CONFIG.roomsPerPage;
    console.log('üëÄ Pagination visibility:', shouldShow ? 'HI·ªÜN' : '·∫®N', '- S·ªë ph√≤ng:', filteredRooms.length);

    if (shouldShow) {
        paginationContainer.classList.remove('hidden');
        paginationContainer.style.display = 'flex';
    } else {
        paginationContainer.classList.add('hidden');
        paginationContainer.style.display = 'none';
    }
}

  // ===== BANG GIA MANAGEMENT =====

  function isTimeDifferenceValid(startTime, endTime) {
    if (!startTime || !endTime) return false;
    
    const toMinutes = (timeStr) => {
        const [hours, minutes] = timeStr.split(':').map(Number);
        return hours * 60 + minutes;
    };

    let startMinutes = toMinutes(startTime);
    let endMinutes = toMinutes(endTime);

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y (v√≠ d·ª•: 23:00 ƒë·∫øn 01:00)
    if (endMinutes < startMinutes) {
        endMinutes += 24 * 60; // Th√™m 24 gi·ªù
    }

    const differenceInMinutes = endMinutes - startMinutes;
    return differenceInMinutes >= 60; // Ph·∫£i l·ªõn h∆°n 1 gi·ªù (60 ph√∫t)
  }

  function addBangGia(loaiPhong) {
    const modalState = {
      loaiPhong: loaiPhong,
      isModalOpen: true,
      timestamp: Date.now(),
      action: 'manualOpen'
    };
    sessionStorage.setItem('bangGiaModalState', JSON.stringify(modalState));

    openPriceModal(loaiPhong);
  }

  function editBangGia(loaiPhong, bangGia) {
    const modalState = {
      loaiPhong: loaiPhong,
      isModalOpen: true,
      timestamp: Date.now(),
      action: 'manualOpen'
    };
    sessionStorage.setItem('bangGiaModalState', JSON.stringify(modalState));

    openPriceModal(loaiPhong);
  }

  function openPriceModal(loaiPhong = null) {
    // Reset state khi m·ªü modal (tr·ª´ khi l√† lo·∫°i ph√≤ng m·ªõi)
    if (!isNewRoomType) {
        resetBangGiaModalState();
    }
    
    currentLoaiPhong = loaiPhong;
    // L∆ØU TR·∫†NG TH√ÅI HI·ªÜN T·∫†I TR∆Ø·ªöC KHI M·ªû MODAL
    const currentState = {
        page: currentPage,
        filters: {
            search: document.getElementById('searchInput').value,
            type: document.getElementById('typeFilter').value,
            status: document.getElementById('statusFilter').value
        },
        timestamp: Date.now()
    };
    sessionStorage.setItem('karaokeAppStateBeforeModal', JSON.stringify(currentState));


    document.getElementById('bangGiaModalTitle').textContent = 'Qu·∫£n l√Ω b·∫£ng gi√° theo lo·∫°i ph√≤ng';
    document.getElementById('bangGiaModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
    currentLoaiPhong = loaiPhong;

    previousLoaiPhong = loaiPhong;
    pendingLoaiPhongChange = null;
    

    if (loaiPhong) {
      document.getElementById('bangGiaLoaiPhong').value = loaiPhong;
      loadBangGiaForRoomType(loaiPhong);
    } else {
      resetBangGiaModal();
    }
    setupBangGiaSelectListener();
  }

  // H√†m thi·∫øt l·∫≠p event listener cho select box
  function setupBangGiaSelectListener() {
    const selectElement = document.getElementById('bangGiaLoaiPhong');
    if (selectElement) {
        // Remove existing listener ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        selectElement.removeEventListener('change', handleBangGiaSelectChange);
        // Th√™m listener m·ªõi
        selectElement.addEventListener('change', handleBangGiaSelectChange);
    }
  }

  // H√†m x·ª≠ l√Ω khi select box thay ƒë·ªïi
  async function handleBangGiaSelectChange(event) {
    const newLoaiPhong = event.target.value;
    console.log('üîÑ Select change:', {
        from: previousLoaiPhong,
        to: newLoaiPhong,
        hasUnsavedChanges: hasUnsavedChanges
    });
    
    // N·∫øu c√≥ thay ƒë·ªïi ch∆∞a l∆∞u, hi·ªÉn th·ªã c·∫£nh b√°o
    if (hasUnsavedChanges) {
        // L∆∞u lo·∫°i ph√≤ng m·ªõi m√† ng∆∞·ªùi d√πng mu·ªën chuy·ªÉn ƒë·∫øn
        pendingLoaiPhongChange = newLoaiPhong;
        
        const result = await Swal.fire({
            title: 'Thay ƒë·ªïi ch∆∞a l∆∞u',
            html: `B·∫°n c√≥ thay ƒë·ªïi ch∆∞a l∆∞u cho lo·∫°i ph√≤ng <strong>"${previousLoaiPhong}"</strong>.<br>C√°c thao t√°c thay ƒë·ªïi s·∫Ω b·ªã <strong>ho√†n t√°c</strong> n·∫øu b·∫°n kh√¥ng l∆∞u!</br><br>B·∫°n mu·ªën l√†m g√¨?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'H·ªßy thay ƒë·ªïi',
            cancelButtonText: '·ªû l·∫°i',
            confirmButtonColor: '#e53e3e',
            cancelButtonColor: '#667eea',
            reverseButtons: true,
            customClass: {
                popup: 'unsaved-changes-popup'
            }
        });

        if (result.isConfirmed) {
            // Ng∆∞·ªùi d√πng ch·ªçn H·ªßy thay ƒë·ªïi - chuy·ªÉn ngay kh√¥ng l∆∞u
            hasUnsavedChanges = false;
            previousLoaiPhong = newLoaiPhong;
            loadBangGiaForRoomType(newLoaiPhong);
            pendingLoaiPhongChange = null;
        } else {
            // Ng∆∞·ªùi d√πng ch·ªçn ·ªû l·∫°i - kh√¥i ph·ª•c gi√° tr·ªã c≈©
            event.target.value = previousLoaiPhong;
            {{!-- loadBangGiaForRoomType(previousLoaiPhong); --}}
            if (newRoomName.has(previousLoaiPhong)) {
                const tempPriceData = newRoomName.get(previousLoaiPhong);
                
                console.log(`‚úÖ LOAD MAP: ƒê√£ t·∫£i ${tempPriceData.length} m·ª•c gi√° t·∫°m th·ªùi t·ª´ Map cho ${previousLoaiPhong}`);
                
                // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ Map ngay l·∫≠p t·ª©c
                displayBangGia(tempPriceData, previousLoaiPhong);
                
                return; // D·ª™NG, KH√îNG C·∫¶N G·ªåI API
            }
            pendingLoaiPhongChange = null;
        }
    } else {
        // Kh√¥ng c√≥ thay ƒë·ªïi ch∆∞a l∆∞u, chuy·ªÉn b√¨nh th∆∞·ªùng
        previousLoaiPhong = newLoaiPhong;
        loadBangGiaForRoomType(newLoaiPhong);
    }
}


// H√†m t·∫£i d·ªØ li·ªáu t·ª´ database
async function loadBangGiaFromDatabase(loaiPhong) {
    const bangGiaList = document.querySelector('.bang-gia-list');
    
    bangGiaList.innerHTML = `
        <div class="text-center p-4">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>ƒêang t·∫£i b·∫£ng gi√° cho ${loaiPhong}...</p>
        </div>
    `;

    try {
        const response = await fetch(`/api/banggia/${loaiPhong}`);
        if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i b·∫£ng gi√° t·ª´ database');
        
        const data = await response.json();
        
        // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ database
        displayBangGiaFromDatabase(data, loaiPhong);
        
    } catch (error) {
        console.error('Error loading from database:', error);
        
        // Fallback: th·ª≠ l·∫•y t·ª´ window.bangGiaData
        const bangGiaForType = window.bangGiaData ?
            window.bangGiaData.filter(gia => gia.LoaiPhong === loaiPhong) : [];
        displayBangGiaFromDatabase(bangGiaForType, loaiPhong);
        
        throw error; // Re-throw ƒë·ªÉ x·ª≠ l√Ω ·ªü h√†m g·ªçi
    }
}

// H√†m hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ database (kh√¥ng d√πng d·ªØ li·ªáu t·∫°m)
function displayBangGiaFromDatabase(bangGiaData, loaiPhong) {
    const bangGiaList = document.querySelector('.bang-gia-list');
    
    // ƒê·∫£m b·∫£o ch√∫ng ta c√≥ element ƒë√∫ng
    if (!bangGiaList) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y .bangGiaList');
        return;
    }

    if (!bangGiaData || bangGiaData.length === 0) {
        displayEmptyBangGia(loaiPhong);
        return;
    }

    bangGiaList.innerHTML = '';

    bangGiaData.forEach((gia, index) => {
        const [startTime, endTime] = gia.KhungGio.split('-');
        const priceItem = createPriceItem(
            `${startTime}-${endTime}`,
            gia.GiaTien,
            gia.MaGia
        );
        bangGiaList.appendChild(priceItem);
    });

    addPriceItemSection();
    
    console.log(`‚úÖ ƒê√£ t·∫£i ${bangGiaData.length} khung gi·ªù t·ª´ database cho ${loaiPhong}`);
}





// C·∫≠p nh·∫≠t th√™m h√†m syncPriceDataToMap ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu t·∫°m ƒë∆∞·ª£c l∆∞u ƒë√∫ng
function syncPriceDataToMap() {
    // Ch·ªâ ƒë·ªìng b·ªô n·∫øu ƒëang ch·ªânh s·ª≠a m·ªôt lo·∫°i ph√≤ng (ƒë√£ ch·ªçn trong select)
    if (!currentEditingLoaiPhong) {
        return;
    }
    
    // üî• L·∫•y t·∫•t c·∫£ c√°c m·ª•c gi√° hi·ªán t·∫°i t·ª´ DOM
    const allPriceItemsInDOM = document.querySelectorAll('.price-item');
    const currentPriceData = [];
    
    // Duy·ªát qua c√°c DOM element v√† thu th·∫≠p d·ªØ li·ªáu
    allPriceItemsInDOM.forEach(item => {
        const start = item.querySelector('.start-time-input').value.trim();
        const end = item.querySelector('.end-time-input').value.trim();
        const price = item.querySelector('.gia-tien-input').value;
        const maGia = item.querySelector('.ma-gia-input').value;
        
        // Ch·ªâ th√™m n·∫øu c√≥ ƒë·ªß th√¥ng tin
        if (start && end && price) {
            currentPriceData.push({
                KhungGio: `${start}-${end}`,
                GiaTien: price,
                MaGia: maGia
            });
        }
    });

    // üî• C·∫≠p nh·∫≠t Map v·ªõi ƒë√∫ng lo·∫°i ph√≤ng HI·ªÜN T·∫†I
    newRoomName.set(currentEditingLoaiPhong, currentPriceData);
    hasUnsavedChanges = currentPriceData.length > 0;
    console.log(`‚úÖ SYNC: ${currentPriceData.length} m·ª•c gi√° cho ${currentEditingLoaiPhong}. Map updated.`);
}




  async function closeBangGiaModal() {
    const result = await Swal.fire({
        title: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ?',
        html: `T·∫•t c·∫£ c√°c thao t√°c <strong>ch∆∞a ·∫•n "L∆∞u"</strong> s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u!`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#e53e3e',
        cancelButtonColor: '#667eea',
        confirmButtonText: 'Tho√°t',
        cancelButtonText: 'Ti·∫øp t·ª•c',
        reverseButtons: true
    });

    if (result.isConfirmed) {
        // X√≥a lo·∫°i ph√≤ng m·ªõi
        await deletePendingRoomType();
    } else {
        // ·ªû l·∫°i modal, kh√¥ng ƒë√≥ng
        return;
    }

    const currentState = {
        page: currentPage, // Gi·ªØ nguy√™n trang hi·ªán t·∫°i
        filters: {
            search: document.getElementById('searchInput').value,
            type: document.getElementById('typeFilter').value,
            status: document.getElementById('statusFilter').value
        },
        timestamp: Date.now()
    };
    sessionStorage.setItem('karaokeAppStateBeforeReload', JSON.stringify(currentState));

    console.log('üíæ ƒê√£ l∆∞u state tr∆∞·ªõc khi ƒë√≥ng bang gia modal - Gi·ªØ nguy√™n trang:', currentPage);

    // ƒê√≥ng modal b√¨nh th∆∞·ªùng
    document.getElementById('bangGiaModal').style.display = 'none';
    document.body.style.overflow = 'auto';
    resetBangGiaModalState();
    setTimeout(() => {
      location.reload();
    }, 100);
}

async function deletePendingRoomType() {
    if (!pendingRoomType) return;

    try {
        Swal.fire({
            title: 'ƒêang x√≥a lo·∫°i ph√≤ng...',
            text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        const response = await fetch(`/api/banggiaphong/${pendingRoomType}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                TenLoaiPhong: pendingRoomType,
            })
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'L·ªói khi x√≥a lo·∫°i ph√≤ng');
        }

        const result = await response.json();

        // X√≥a kh·ªèi UI
        await updateRoomTypeInUI(pendingRoomType, 'delete');

        Swal.fire({
            icon: 'success',
            title: 'ƒê√£ x√≥a!',
            text: result.message || `ƒê√£ x√≥a lo·∫°i ph√≤ng "${pendingRoomType}"`,
            timer: 1500,
            showConfirmButton: false
        });

    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a lo·∫°i ph√≤ng:', error);
        
        Swal.fire({
            icon: 'error',
            title: 'L·ªói!',
            text: error.message || 'Kh√¥ng th·ªÉ x√≥a lo·∫°i ph√≤ng',
            confirmButtonColor: '#667eea'
        });
    } finally {
        // Reset state v√† ƒë√≥ng modal
        resetBangGiaModalState();
        document.getElementById('bangGiaModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

function resetBangGiaModalState() {
    isNewRoomType = false;
    pendingRoomType = null;
    hasPriceItems = false;
    hasUnsavedChanges = false;
    currentLoaiPhong = null;
    previousLoaiPhong = null;
    pendingLoaiPhongChange = null;
    pendingPriceData = null;
}



// ===== RESTORE STATE AFTER RELOAD =====
function restoreStateAfterReload() {
    try {
        const savedState = sessionStorage.getItem('karaokeAppStateBeforeReload');
        
        if (savedState) {
            const state = JSON.parse(savedState);
            
            console.log('üîÑ Kh√¥i ph·ª•c state sau reload:', state);

            // Ki·ªÉm tra n·∫øu state ch∆∞a qu√° c≈© (d∆∞·ªõi 10 gi√¢y)
            if (Date.now() - state.timestamp < 10000) {
                
                // üî• KH√îI PH·ª§C C·∫¢ FILTERS V√Ä TRANG
                if (state.filters) {
                    const searchInput = document.getElementById('searchInput');
                    const typeFilter = document.getElementById('typeFilter');
                    const statusFilter = document.getElementById('statusFilter');
                    
                    if (searchInput) searchInput.value = state.filters.search || '';
                    if (typeFilter) typeFilter.value = state.filters.type || '';
                    if (statusFilter) statusFilter.value = state.filters.status || '';
                    
                    console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c filters:', state.filters);
                }
                
                // üî• KH√îI PH·ª§C TRANG
                if (state.page) {
                    currentPage = state.page;
                    console.log('‚úÖ Kh√¥i ph·ª•c v·ªÅ trang t·ª´ state:', currentPage);
                }
            }
            
            // KH√îNG X√ìA STATE ·ªû ƒê√ÇY - ƒë·ªÉ handleAutoNavigationAfterReload s·ª≠ d·ª•ng
        } else {
            // M·∫∑c ƒë·ªãnh trang 1 n·∫øu kh√¥ng c√≥ state
            currentPage = 1;
            console.log('üîÑ Kh√¥ng c√≥ state, m·∫∑c ƒë·ªãnh trang 1');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi kh√¥i ph·ª•c state:', error);
        currentPage = 1;
    }
}

function restoreStateAfterModalClose() {
    try {
        const savedState = sessionStorage.getItem('karaokeAppStateBeforeModal');
        if (savedState) {
            const state = JSON.parse(savedState);
            
            // Ki·ªÉm tra n·∫øu state ch∆∞a qu√° c≈© (d∆∞·ªõi 10 gi√¢y)
            if (Date.now() - state.timestamp < 10000) {
                console.log('üîÑ Kh√¥i ph·ª•c tr·∫°ng th√°i tr∆∞·ªõc khi m·ªü modal:', state);
                
                // Kh√¥i ph·ª•c filters
                if (state.filters) {
                    const searchInput = document.getElementById('searchInput');
                    const typeFilter = document.getElementById('typeFilter');
                    const statusFilter = document.getElementById('statusFilter');
                    
                    if (searchInput && searchInput.value !== state.filters.search) {
                        searchInput.value = state.filters.search || '';
                    }
                    if (typeFilter && typeFilter.value !== state.filters.type) {
                        typeFilter.value = state.filters.type || '';
                    }
                    if (statusFilter && statusFilter.value !== state.filters.status) {
                        statusFilter.value = state.filters.status || '';
                    }
                }
                
                // Kh√¥i ph·ª•c trang
                if (state.page && state.page !== currentPage) {
                    currentPage = state.page;
                    showCurrentPage();
                    updatePaginationInfo();
                }
                
                // √Åp d·ª•ng filters n·∫øu c√≥ thay ƒë·ªïi
                filterRooms();
            }
            
            // X√≥a state ƒë√£ kh√¥i ph·ª•c
            sessionStorage.removeItem('karaokeAppStateBeforeModal');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi kh√¥i ph·ª•c tr·∫°ng th√°i:', error);
        sessionStorage.removeItem('karaokeAppStateBeforeModal');
    }
}

  async function checkAndDeleteEmptyRoomType() {
    const loaiPhong = document.getElementById('bangGiaLoaiPhong').value;
    if (!loaiPhong) {
        await Swal.fire({
            icon: 'warning',
            title: 'Ch∆∞a ch·ªçn lo·∫°i ph√≤ng',
            text: 'Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng mu·ªën x√≥a',
            confirmButtonColor: '#667eea'
        });
        return;
    }

    try {
       const isUsed = await checkRoomTypeInUse(loaiPhong);
       if (isUsed) {
            await Swal.fire({
                icon: 'error',
                title: 'Kh√¥ng th·ªÉ x√≥a',
                html: `Lo·∫°i ph√≤ng <strong>"${loaiPhong}"</strong> ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi c√°c ph√≤ng h√°t.<br><br>Vui l√≤ng x√≥a ho·∫∑c ƒë·ªïi lo·∫°i ph√≤ng c·ªßa c√°c ph√≤ng li√™n quan tr∆∞·ªõc.`,
                confirmButtonColor: '#667eea'
            });
            return;
        }
        const result = await Swal.fire({
            title: 'X√°c nh·∫≠n x√≥a lo·∫°i ph√≤ng?',
            html: `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a lo·∫°i ph√≤ng <strong>"${loaiPhong}"</strong>?<br><br>
                   <span style="color: #e53e3e; font-weight: 600;">
                   ‚ö†Ô∏è C·∫£nh b√°o: T·∫•t c·∫£ khung gi·ªù c·ªßa lo·∫°i ph√≤ng n√†y s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!
                   </span>`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e53e3e',
            cancelButtonColor: '#667eea',
            confirmButtonText: 'X√≥a lo·∫°i ph√≤ng',
            cancelButtonText: 'H·ªßy',
            reverseButtons: true
        });
        if (result.isConfirmed) {
            await deleteRoomTypeFromServer(loaiPhong);
        }
        // Ki·ªÉm tra xem lo·∫°i ph√≤ng c√≥ b·∫£ng gi√° kh√¥ng --}}
    } 
    catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra lo·∫°i ph√≤ng tr·ªëng:', error);
        
        // V·∫´n hi·ªÉn th·ªã l·ªói nh∆∞ng kh√¥ng ch·∫∑n ƒë√≥ng modal
        Swal.fire({
            icon: 'error',
            title: 'L·ªói!',
            text: `Kh√¥ng th·ªÉ x√≥a lo·∫°i ph√≤ng: ${error.message}`,
            timer: 2000,
            showConfirmButton: false
        });
    }
}

  function resetBangGiaModal() {
    document.getElementById('bangGiaLoaiPhong').value = '';
    currentEditingLoaiPhong = null;

    const bangGiaList = document.querySelector('.bang-gia-list');
    bangGiaList.innerHTML = `
        <div class="text-center text-muted p-4">
            <i class="fas fa-door-open fa-2x mb-3"></i>
            <p>Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng gi√°</p>
        </div>
    `;

    const guideContent = document.getElementById('guideContent');
    if (guideContent) guideContent.classList.add('collapsed');
  }

  function loadBangGiaForRoomType(loaiPhong) {
    const bangGiaList = document.querySelector('.bang-gia-list');

    if (!loaiPhong) {
      bangGiaList.innerHTML = `
            <div class="text-center text-muted p-4">
                <i class="fas fa-door-open fa-2x mb-3"></i>
                <p>Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng gi√°</p>
            </div>
        `;
      currentEditingLoaiPhong = null;
      return;
    }

    currentEditingLoaiPhong = loaiPhong;

    {{!-- if (newRoomName.has(loaiPhong)) {
        const tempPriceData = newRoomName.get(loaiPhong);
        
        console.log(`‚úÖ LOAD MAP: ƒê√£ t·∫£i ${tempPriceData.length} m·ª•c gi√° t·∫°m th·ªùi t·ª´ Map cho ${loaiPhong}`);
        
        // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ Map ngay l·∫≠p t·ª©c
        displayBangGia(tempPriceData, loaiPhong);
        
        return; // D·ª™NG, KH√îNG C·∫¶N G·ªåI API
    } --}}


    bangGiaList.innerHTML = `
        <div class="text-center p-4">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>ƒêang t·∫£i b·∫£ng gi√° cho ${loaiPhong}...</p>
        </div>
    `;

    fetch(`/api/banggia/${loaiPhong}`)
      .then(response => {
        if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i b·∫£ng gi√°');
        return response.json();
      })
      .then(data => {
        displayBangGia(data, loaiPhong);
        {{!-- if (loaiPhong === newRoomName) {
          hasPriceItems = data && data.length > 0;
        } --}}
      })
      .catch(error => {
        console.error('Error:', error);
        const bangGiaForType = window.bangGiaData ?
          window.bangGiaData.filter(gia => gia.LoaiPhong === loaiPhong) : [];
        displayBangGia(bangGiaForType, loaiPhong);
      });
  }

  function displayBangGia(bangGiaData, loaiPhong) {
    const bangGiaList = document.querySelector('.bang-gia-list');

    if (!bangGiaData || bangGiaData.length === 0) {
      displayEmptyBangGia(loaiPhong);
      return;
    }

    bangGiaList.innerHTML = '';

    bangGiaData.forEach((gia, index) => {
      const [startTime, endTime] = gia.KhungGio.split('-');
      const priceItem = createPriceItem(
        `${startTime}-${endTime}`,
        gia.GiaTien,
        gia.MaGia
      );
      bangGiaList.appendChild(priceItem);
    });

    addPriceItemSection();
  }

  function displayEmptyBangGia(loaiPhong) {
    const bangGiaList = document.querySelector('.bang-gia-list');
    bangGiaList.innerHTML = `
        <div class="empty-banggia-state">
            <div class="empty-icon">üí∞</div>
            <h4>Ch∆∞a c√≥ b·∫£ng gi√° cho ${loaiPhong}</h4>
            <p>Th√™m khung gi·ªù v√† gi√° ti·ªÅn cho lo·∫°i ph√≤ng n√†y</p>
            {{!-- <button class="btn-add-first-price" onclick="addFirstPriceItem()">
                <i class="fas fa-plus"></i> Th√™m khung gi·ªù ƒë·∫ßu ti√™n
            </button> --}}
        </div>
    `;
  }

  // ===== PRICE ITEM MANAGEMENT =====
  function createPriceItem(khungGio = '', giaTien = '', maGia = '') {
    const [startTime = '', endTime = ''] = khungGio.split('-');

    const div = document.createElement('div');
    div.className = 'price-item';
    div.innerHTML = `
        <div class="time-input-group">
            <label class="form-label">Khung gi·ªù (24h)</label>
            <div class="time-input-wrapper">
                <input type="time" class="start-time-input form-control" 
                       value="${startTime}" step="300" required>
                <span class="time-separator">‚Üí</span>
                <input type="time" class="end-time-input form-control" 
                       value="${endTime}" step="300" required>
            </div>
            <div class="time-format-helper">
                <span class="format-example">HH:MM</span>
                <span>24 gi·ªù</span>
            </div>
        </div>
        
        <div class="price-input-group">
            <label class="form-label">Gi√° ti·ªÅn (VNƒê)</label>
            <div class="price-input-wrapper">
                <input type="number" class="gia-tien-input form-control" 
                       placeholder="100000" value="${giaTien}" min="1000" required>
                <span class="currency-symbol">VNƒê</span>
            </div>
        </div>
        
        <div class="remove-btn-wrapper">
            <button type="button" class="btn-remove-price" onclick="removePriceItem(this)">
                <i class="fas fa-trash"></i>
            </button>
            {{!-- <button type="button" class="btn-save-price" onclick="addEntryToRoomType(pendingRoomType)">
                <i class="fas fa-save"></i>
            </button> --}}
        </div>
        
        <input type="hidden" class="ma-gia-input" value="${maGia}">
    `;

    const startTimeInput = div.querySelector('.start-time-input');
    const endTimeInput = div.querySelector('.end-time-input');
    const giaTienInput = div.querySelector('.gia-tien-input');

    setupTimeInputValidation(startTimeInput, true);
    setupTimeInputValidation(endTimeInput, false);
    setupGiaTienValidation(giaTienInput);

    startTimeInput.addEventListener('change', handleInputPriceChange);
    endTimeInput.addEventListener('change', handleInputPriceChange);
    giaTienInput.addEventListener('input', handleInputPriceChange);

    return div;
  }
  // T·∫†O H√ÄM RESET M·ªöI ƒê·ªÇ G·ªåI TR∆Ø·ªöC KHI B·∫ÆT ƒê·∫¶U KI·ªÇM TRA
function resetAllPriceItemErrors() {
    document.querySelectorAll('.price-item').forEach(item => {
        resetTimeInputError(item.querySelector('.start-time-input'));
        resetTimeInputError(item.querySelector('.end-time-input'));
        // D·ªçn d·∫πp c·∫£ .time-error-message n·∫øu c√≥
        const formGroups = item.querySelectorAll('.time-input-group');
        formGroups.forEach(group => {
            const existingError = group.querySelector('.time-error-message');
            if (existingError) existingError.remove();
        });
    });
}

  function addPriceItemSection() {
    const bangGiaList = document.querySelector('.bang-gia-list');
    const existingSection = bangGiaList.querySelector('.add-price-section');

    if (!existingSection) {
      const addSection = document.createElement('div');
      addSection.className = 'add-price-section';

      bangGiaList.appendChild(addSection);
    }
    
  }

  async function handleInputPriceChange() {
      const errorBanner = document.getElementById('priceErrorBanner');
      const priceErrorMessage = document.getElementById('priceErrorMessage');
    
      resetAllPriceItemErrors();

      // üî• B∆Ø·ªöC 1: KI·ªÇM TRA L·ªñI TR√ôNG L·∫∂P TR√äN TO√ÄN B·ªò DANH S√ÅCH DOM
      const duplicates = checkAllTimeRangesForDuplicates();

      const priceItems = document.querySelectorAll('.price-item');
      let hasFormatError = false;

      // L·∫∑p qua t·∫•t c·∫£ input time ƒë·ªÉ ch·∫°y ki·ªÉm tra ƒë·ªãnh d·∫°ng tr·ª±c quan
      priceItems.forEach(item => {
        const startTimeInput = item.querySelector('.start-time-input');
        const endTimeInput = item.querySelector('.end-time-input');

        // G·ªçi h√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng v√† b√¥i xanh/ƒë·ªè (ƒë√£ c√≥ s·∫µn trong code c·ªßa b·∫°n)
        validateTimeRangeVisual(startTimeInput); 
        validateTimeRangeVisual(endTimeInput);
        
        // Ki·ªÉm tra xem c√≥ input n√†o b·ªã l·ªói ƒë·ªãnh d·∫°ng nghi√™m tr·ªçng kh√¥ng
        if (startTimeInput.closest('.time-input-group').querySelector('.time-error-message') ||
            endTimeInput.closest('.time-input-group').querySelector('.time-error-message')) { 
            hasFormatError = true;
        }
      });

      {{!-- if (duplicates.length > 0 || hasFormatError) {
          // N·∫øu c√≥ l·ªói tr√πng l·∫∑p, KH√îNG ƒë·ªìng b·ªô h√≥a Map
          console.warn('üõë NgƒÉn ƒë·ªìng b·ªô h√≥a Map do ph√°t hi·ªán khung gi·ªù b·ªã tr√πng l·∫∑p tr√™n DOM.');
          
          if (duplicates.length > 0) {
            const duplicateMessages = duplicates.map(dup => dup.message).join('<br>');
            
            await Swal.fire({ // üî• TH√äM ALERT V√ÄO ƒê√ÇY
                icon: 'error',
                title: 'L·ªói tr√πng khung gi·ªù',
                html: `
                        <div style="text-align: left;">
                            <p style="margin-bottom: 15px; color: #e53e3e; font-weight: 600;">Ph√°t hi·ªán c√°c khung gi·ªù b·ªã tr√πng:</p>
                            <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border-left: 4px solid #e53e3e;">
                                ${duplicateMessages}
                            </div>
                            <p style="margin-top: 15px; color: #718096; font-size: 0.9rem;">
                                Vui l√≤ng s·ª≠a c√°c khung gi·ªù b·ªã tr√πng tr∆∞·ªõc khi l∆∞u.
                            </p>
                        </div>
                    `,
                confirmButtonColor: '#667eea',
                confirmButtonText: 'ƒê√£ hi·ªÉu'
            });
        }
          
          // ƒê√°nh d·∫•u c·∫ßn l∆∞u, nh∆∞ng Map ch∆∞a ƒë∆∞·ª£c ƒë·ªìng b·ªô (ƒë·ªÉ ngƒÉn l∆∞u d·ªØ li·ªáu l·ªói)
          return; 
      } --}}

      if (duplicates.length > 0 || hasFormatError) {
        // C√≥ l·ªói -> Hi·ªÉn th·ªã banner
        errorBanner.classList.remove('hidden');
        
        if (duplicates.length > 0) {
            priceErrorMessage.textContent = 'Ph√°t hi·ªán khung gi·ªù b·ªã tr√πng l·∫∑p. Vui l√≤ng ki·ªÉm tra c√°c m·ª•c m√†u ƒë·ªè!';
        } else if (hasFormatError) {
            priceErrorMessage.textContent = 'C√≥ l·ªói ƒë·ªãnh d·∫°ng gi·ªù (HH:MM) ho·∫∑c logic (gi·ªù v∆∞·ª£t qu√° 24:00).';
        }
     
        return; 
      }
      // üî• B∆Ø·ªöC 2: CH·ªà ƒê·ªíNG B·ªò N·∫æU KH√îNG C√ì L·ªñI TR√ôNG L·∫∂P
      errorBanner.classList.add('hidden');
      syncPriceDataToMap();
  }
  

  function addPriceItem(khungGio = '', giaTien = '', maGia = '') {
    const bangGiaList = document.querySelector('.bang-gia-list');

    if (bangGiaList.querySelector('.empty-banggia-state') ||
        bangGiaList.querySelector('.text-center.text-muted') ||
        bangGiaList.querySelector('.text-center.p-4')) {
        bangGiaList.innerHTML = '';
    }

    const existingSection = bangGiaList.querySelector('.add-price-section');
    if (existingSection) existingSection.remove();

    const priceItem = createPriceItem(khungGio, giaTien, maGia);
    bangGiaList.appendChild(priceItem);
    addPriceItemSection();

    if (currentEditingLoaiPhong && currentEditingLoaiPhong === pendingRoomType) {
      const allPriceItemsInDOM = document.querySelectorAll('.price-item');
      const currentPriceData = [];
      allPriceItemsInDOM.forEach(item => {
          const start = item.querySelector('.start-time-input').value.trim();
          const end = item.querySelector('.end-time-input').value.trim();
          const price = item.querySelector('.gia-tien-input').value;

          console.log(`Start: ${start}, End: ${end}, Gi√°: ${price}`);
          
          // Ch·ªâ th√™m c√°c m·ª•c ƒë√£ c√≥ gi√° tr·ªã (d√π gi√° tr·ªã m·ªõi n√†y l√† r·ªóng khi v·ª´a t·∫°o)
          currentPriceData.push({
              KhungGio: `${start}-${end}`,
              GiaTien: price,
              MaGia: maGia
          });
      });
        
      console.log(`‚úÖ C·∫≠p nh·∫≠t Map: Lo·∫°i ph√≤ng m·ªõi '${pendingRoomType}' ƒë√£ c√≥ gi√° tr·ªã.`);
    }

    console.log('--- Tr·∫°ng th√°i NewRoomName Map ---');

    for (let [type, priceEntries] of newRoomName) {
        // priceEntries l√† Array c·ªßa c√°c m·ª•c gi√°
        
        if (Array.isArray(priceEntries)) {
            console.log(`Lo·∫°i ph√≤ng: ${type} (T·ªïng s·ªë m·ª•c: ${priceEntries.length})`);

            // üî• V√íNG L·∫∂P L·ªíNG: Duy·ªát qua t·ª´ng m·ª•c gi√° trong m·∫£ng
            priceEntries.forEach((entry, index) => {
                // entry l√† object {KhungGio: string, GiaTien: string, MaGia: string}
                console.log(`  [${index + 1}] Khung gi·ªù: ${entry.KhungGio}, Gi√° ti·ªÅn: ${entry.GiaTien}`);
            });

        } else {
            // Tr∆∞·ªùng h·ª£p l·ªói: data kh√¥ng ph·∫£i l√† m·∫£ng
            console.log(`Lo·∫°i ph√≤ng: ${type}, ‚ö†Ô∏è D·ªØ li·ªáu gi√° b·ªã l·ªói:`, priceEntries);
        }
    }
  }

  function removePriceItem(button) {
    const priceItem = button.closest('.price-item');
    const allPriceItems = document.querySelectorAll('.price-item');

    if (allPriceItems.length <= 1) {
        Swal.fire({
            icon: 'warning',
            title: 'Kh√¥ng th·ªÉ x√≥a',
            text: 'Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt khung gi·ªù!',
            confirmButtonColor: '#667eea'
        });
        return;
    }
    priceItem.remove();
    addPriceItemSection();
    syncPriceDataToMap();
  }

  // ===== TIME VALIDATION FUNCTIONS =====

  function showGiaTienError(input, message) {
    const formGroup = input.closest('.price-input-group');

    input.style.borderColor = '#e53e3e';
    input.style.boxShadow = '0 0 0 3px rgba(229, 62, 62, 0.1)';
    input.classList.add('error-state');

    const existingError = formGroup.querySelector('.gia-tien-error-message');
    if (existingError) existingError.remove();

    const errorDiv = document.createElement('div');
    errorDiv.className = 'gia-tien-error-message';
    errorDiv.style.color = '#e53e3e';
    errorDiv.style.fontSize = '0.75rem';
    errorDiv.style.marginTop = '4px';
    errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
    formGroup.appendChild(errorDiv);
  }

  function showGiaTienSuccess(input) {
    const formGroup = input.closest('.price-input-group');
    input.style.borderColor = '#48bb78';
    input.style.boxShadow = '0 0 0 3px rgba(72, 187, 120, 0.1)';
    input.classList.remove('error-state');

    const existingError = formGroup.querySelector('.gia-tien-error-message');
    if (existingError) existingError.remove();
  }

  function resetGiaTienError(input) {
    const formGroup = input.closest('.price-input-group');
    input.style.borderColor = '';
    input.style.boxShadow = '';
    input.classList.remove('error-state');

    const existingError = formGroup.querySelector('.gia-tien-error-message');
    if (existingError) existingError.remove();
  }

  async function validateTimeRangeWithAlert(changedInput) {
    const priceItem = changedInput.closest('.price-item');
    if (!priceItem) return true;

    const startTimeInput = priceItem.querySelector('.start-time-input');
    const endTimeInput = priceItem.querySelector('.end-time-input');
    const giaTienInput = priceItem.querySelector('.gia-tien-input');

    const startTime = startTimeInput.value.trim();
    const endTime = endTimeInput.value.trim();
    const giaTien = giaTienInput ? giaTienInput.value.trim() : '';

    resetTimeInputError(startTimeInput);
    resetTimeInputError(endTimeInput);
    if (giaTienInput) resetGiaTienError(giaTienInput);

     let isValid = true;

    if (!startTime || !endTime) return true;

    if (!validateTimeFormat(startTime)) {
      showTimeInputError(startTimeInput, 'ƒê·ªãnh d·∫°ng HH:MM kh√¥ng h·ª£p l·ªá');
      isValid = false;
    }

    if (!validateTimeFormat(endTime)) {
      showTimeInputError(endTimeInput, 'ƒê·ªãnh d·∫°ng HH:MM kh√¥ng h·ª£p l·ªá');
      isValid = false;
    }

    // üî• KI·ªÇM TRA START TIME KH√îNG ƒê∆Ø·ª¢C TR√ôNG END TIME
    if (startTime === endTime) {
        showTimeInputError(startTimeInput, 'Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c tr√πng gi·ªù k·∫øt th√∫c');
        showTimeInputError(endTimeInput, 'Gi·ªù k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr√πng gi·ªù b·∫Øt ƒë·∫ßu');
        isValid = false;
    }

    // üî• KI·ªÇM TRA CH√äNH L·ªÜCH TH·ªúI GIAN PH·∫¢I > 1H
    if (!isTimeDifferenceValid(startTime, endTime)) {
        showTimeInputError(startTimeInput, 'Khung gi·ªù ph·∫£i c√≥ th·ªùi l∆∞·ª£ng √≠t nh·∫•t 1 gi·ªù');
        showTimeInputError(endTimeInput, 'Khung gi·ªù ph·∫£i c√≥ th·ªùi l∆∞·ª£ng √≠t nh·∫•t 1 gi·ªù');
        isValid = false;
    }

    // üî• KI·ªÇM TRA GI√Å TI·ªÄN KH√îNG ƒê∆Ø·ª¢C B·∫∞NG 0
    if (giaTienInput && giaTien) {
        const giaTienNum = parseInt(giaTien);
        if (giaTienNum === 0) {
            showGiaTienError(giaTienInput, 'Gi√° ti·ªÅn kh√¥ng th·ªÉ b·∫±ng 0');
            isValid = false;
        }
        
        if (giaTienNum < 1000) {
            showGiaTienError(giaTienInput, 'Gi√° ti·ªÅn t·ªëi thi·ªÉu l√† 1,000 VNƒê');
            isValid = false;
        }
    }

    const startMinutes = parseInt(startTime.split(':')[1]);
    const endMinutes = parseInt(endTime.split(':')[1]);

    if (startMinutes > 59) {
      showTimeInputError(startTimeInput, 'Ph√∫t kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 59');
      isValid = false;
    }

    if (endMinutes > 59) {
      showTimeInputError(endTimeInput, 'Ph√∫t kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 59');
      isValid = false;
    }

    if (startTime >= '24:00' || endTime > '24:00') {
      showTimeInputError(startTimeInput, 'Gi·ªù kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 24:00');
      showTimeInputError(endTimeInput, 'Gi·ªù kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 24:00');
      isValid = false;
    }

    if (isValid) {
        showTimeInputSuccess(startTimeInput);
        showTimeInputSuccess(endTimeInput);
        if (giaTienInput && giaTien && parseInt(giaTien) >= 1000) {
            showGiaTienSuccess(giaTienInput);
        }
    }

    return true;
  }

  function setupTimeInputValidation(timeInput, isStartTime = true) {
    timeInput.addEventListener('blur', async (e) => {
      const formattedTime = formatTimeInput(e.target.value);
      e.target.value = formattedTime;
      await validateTimeRangeWithAlert(timeInput);
    });

    timeInput.addEventListener('input', (e) => {
      setTimeout(() => validateTimeRangeVisual(timeInput), 100);
    });
  }

  function setupGiaTienValidation(giaTienInput) {
    giaTienInput.addEventListener('blur', async (e) => {
        await validateTimeRangeWithAlert(giaTienInput);
    });

    giaTienInput.addEventListener('input', (e) => {
        setTimeout(() => validateTimeRangeVisual(giaTienInput), 100);
    });
}

  function validateTimeRangeVisual(changedInput) {
    const priceItem = changedInput.closest('.price-item');
    if (!priceItem) return;

    const startTimeInput = priceItem.querySelector('.start-time-input');
    const endTimeInput = priceItem.querySelector('.end-time-input');
    const giaTienInput = priceItem.querySelector('.gia-tien-input');
    const startTime = startTimeInput.value.trim();
    const endTime = endTimeInput.value.trim();
    const giaTien = giaTienInput ? giaTienInput.value.trim() : '';
    if (giaTienInput) resetGiaTienError(giaTienInput);

    resetTimeInputError(startTimeInput);
    resetTimeInputError(endTimeInput);
    if (giaTienInput) resetGiaTienError(giaTienInput);

    if (!startTime || !endTime) return;

    if (!validateTimeFormat(startTime)) {
      showTimeInputError(startTimeInput, 'ƒê·ªãnh d·∫°ng HH:MM kh√¥ng h·ª£p l·ªá');
      return;
    }

    if (!validateTimeFormat(endTime)) {
      showTimeInputError(endTimeInput, 'ƒê·ªãnh d·∫°ng HH:MM kh√¥ng h·ª£p l·ªá');
      return;
    }

    if (startTime >= '24:00' || endTime > '24:00') {
      showTimeInputError(startTimeInput, 'Gi·ªù kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 24:00');
      showTimeInputError(endTimeInput, 'Gi·ªù kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 24:00');
      return;
    }

    // üî• KI·ªÇM TRA START TIME != END TIME
    if (startTime === endTime) {
        showTimeInputError(startTimeInput, 'Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c tr√πng gi·ªù k·∫øt th√∫c');
        showTimeInputError(endTimeInput, 'Gi·ªù k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr√πng gi·ªù b·∫Øt ƒë·∫ßu');
        return;
    }

    // üî• KI·ªÇM TRA CH√äNH L·ªÜCH > 1H
    if (!isTimeDifferenceValid(startTime, endTime)) {
        showTimeInputError(startTimeInput, 'Khung gi·ªù ph·∫£i c√≥ th·ªùi l∆∞·ª£ng √≠t nh·∫•t 1 gi·ªù');
        showTimeInputError(endTimeInput, 'Khung gi·ªù ph·∫£i c√≥ th·ªùi l∆∞·ª£ng √≠t nh·∫•t 1 gi·ªù');
        return;
    }

    // üî• KI·ªÇM TRA GI√Å TI·ªÄN
    if (giaTienInput && giaTien) {
        const giaTienNum = parseInt(giaTien);
        if (giaTienNum === 0) {
            showGiaTienError(giaTienInput, 'Gi√° ti·ªÅn kh√¥ng th·ªÉ b·∫±ng 0');
            return;
        }
        
        if (giaTienNum < 1000) {
            showGiaTienError(giaTienInput, 'Gi√° ti·ªÅn t·ªëi thi·ªÉu l√† 1,000 VNƒê');
            return;
        }
        
        if (giaTienNum >= 1000) {
            showGiaTienSuccess(giaTienInput);
        }
    }

    showTimeInputSuccess(startTimeInput);
    showTimeInputSuccess(endTimeInput);
  }

  function markPriceItemsAsError(duplicates) {
    // Reset t·∫•t c·∫£ l·ªói tr∆∞·ªõc
    document.querySelectorAll('.price-item').forEach(item => {
        const startInput = item.querySelector('.start-time-input');
        const endInput = item.querySelector('.end-time-input');
        resetTimeInputError(startInput);
        resetTimeInputError(endInput);
        item.classList.remove('error-highlight');
    });

    // ƒê√°nh d·∫•u c√°c item b·ªã l·ªói
    duplicates.forEach(dup => {
        [dup.item1, dup.item2].forEach(item => {
            if (item) {
                item.classList.add('error-highlight');
                const startInput = item.querySelector('.start-time-input');
                const endInput = item.querySelector('.end-time-input');
                
                if (startInput) {
                    startInput.classList.add('error-state');
                    startInput.style.borderColor = '#e53e3e';
                    startInput.style.boxShadow = '0 0 0 3px rgba(229, 62, 62, 0.2)';
                }
                
                if (endInput) {
                    endInput.classList.add('error-state');
                    endInput.style.borderColor = '#e53e3e';
                    endInput.style.boxShadow = '0 0 0 3px rgba(229, 62, 62, 0.2)';
                }
            }
        });
    });
}

  function checkAllTimeRangesForDuplicates() {
    const priceItems = document.querySelectorAll('.price-item');
    const duplicates = [];

    // Reset t·∫•t c·∫£ l·ªói tr∆∞·ªõc
    priceItems.forEach(item => {
        const startTimeInput = item.querySelector('.start-time-input');
        const endTimeInput = item.querySelector('.end-time-input');
        resetTimeInputError(startTimeInput);
        resetTimeInputError(endTimeInput);
        item.classList.remove('error-highlight');
    });

    // Ki·ªÉm tra tr√πng l·∫∑p
    for (let i = 0; i < priceItems.length; i++) {
        const item1 = priceItems[i];
        const startTime1 = item1.querySelector('.start-time-input').value.trim();
        const endTime1 = item1.querySelector('.end-time-input').value.trim();

        if (!startTime1 || !endTime1) continue;

        for (let j = i + 1; j < priceItems.length; j++) {
            const item2 = priceItems[j];
            const startTime2 = item2.querySelector('.start-time-input').value.trim();
            const endTime2 = item2.querySelector('.end-time-input').value.trim();

            if (!startTime2 || !endTime2) continue;

            if (startTime1 === startTime2 && endTime1 === endTime2) {
                duplicates.push({
                    type: 'complete',
                    item1: item1,
                    item2: item2,
                    timeRange: `${startTime1}-${endTime1}`,
                    message: `Khung gi·ªù ${startTime1}-${endTime1} b·ªã tr√πng ho√†n to√†n`
                });
            } else if (isTimeRangeOverlapping(startTime1, endTime1, startTime2, endTime2)) {
                duplicates.push({
                    type: 'overlap',
                    item1: item1,
                    item2: item2,
                    timeRange1: `${startTime1}-${endTime1}`,
                    timeRange2: `${startTime2}-${endTime2}`,
                    message: `Khung gi·ªù ${startTime1}-${endTime1} tr√πng l·∫Øp v·ªõi ${startTime2}-${endTime2}`
                });
            }
        }
    }

    // ƒê√°nh d·∫•u c√°c item b·ªã l·ªói
    markPriceItemsAsError(duplicates);

    return duplicates;
}

  async function validateAllTimeRangesBeforeSave() {
    const priceItems = document.querySelectorAll('.price-item');
    let allValid = true;
    let errorMessage = '';

    for (const item of priceItems) {
      const startTimeInput = item.querySelector('.start-time-input');
      const endTimeInput = item.querySelector('.end-time-input');
      const giaTienInput = item.querySelector('.gia-tien-input');
      const startTime = startTimeInput.value.trim();
      const endTime = endTimeInput.value.trim();
      const giaTien = giaTienInput ? giaTienInput.value.trim() : '';

      if (!startTime || !endTime || !giaTien) {
        allValid = false;
        errorMessage = 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ khung gi·ªù';
        break;
      }

      if (!validateTimeFormat(startTime) || !validateTimeFormat(endTime)) {
        allValid = false;
        errorMessage = 'C√≥ khung gi·ªù kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM';
        break;
      }
      if (startTime === endTime) {
            allValid = false;
            errorMessage = `Khung gi·ªù ${startTime}-${endTime} c√≥ gi·ªù b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c tr√πng nhau`;
            break;
        }

        // üî• KI·ªÇM TRA CH√äNH L·ªÜCH > 1H
        if (!isTimeDifferenceValid(startTime, endTime)) {
            allValid = false;
            errorMessage = `Khung gi·ªù ${startTime}-${endTime} c√≥ th·ªùi l∆∞·ª£ng √≠t h∆°n 1 gi·ªù`;
            break;
        }

        // üî• KI·ªÇM TRA GI√Å TI·ªÄN
        const giaTienNum = parseInt(giaTien);
        if (giaTienNum === 0) {
            allValid = false;
            errorMessage = `Gi√° ti·ªÅn kh√¥ng th·ªÉ b·∫±ng 0 (khung gi·ªù ${startTime}-${endTime})`;
            break;
        }

        if (giaTienNum < 1000) {
            allValid = false;
            errorMessage = `Gi√° ti·ªÅn ph·∫£i t·ª´ 1,000 VNƒê tr·ªü l√™n (khung gi·ªù ${startTime}-${endTime})`;
            break;
        }
    }

    if (!allValid) {
      await Swal.fire({
        icon: 'error',
        title: 'L·ªói d·ªØ li·ªáu',
        html: `
                <div style="text-align: left;">
                    <p style="margin-bottom: 10px;">${errorMessage}</p>
                    <ul style="text-align: left; margin-left: 20px; color: #718096;">
                        <li>ƒê·ªãnh d·∫°ng: HH:MM (24h)</li>
                        <li>Gi·ªù kh√¥ng v∆∞·ª£t qu√° 24:00</li>
                        <li>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ khung gi·ªù</li>
                    </ul>
                </div>
            `,
        confirmButtonColor: '#667eea',
        confirmButtonText: 'ƒê√£ hi·ªÉu'
      });
      return false;
    }

    const duplicates = checkAllTimeRangesForDuplicates();
    if (duplicates.length > 0) {
      allValid = false;
      const duplicateMessages = duplicates.map(dup => dup.message).join('<br>');

      await Swal.fire({
        icon: 'error',
        title: 'L·ªói tr√πng khung gi·ªù',
        html: `
                <div style="text-align: left;">
                    <p style="margin-bottom: 15px; color: #e53e3e; font-weight: 600;">Ph√°t hi·ªán c√°c khung gi·ªù b·ªã tr√πng:</p>
                    <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border-left: 4px solid #e53e3e;">
                        ${duplicateMessages}
                    </div>
                    <p style="margin-top: 15px; color: #718096; font-size: 0.9rem;">
                        Vui l√≤ng s·ª≠a c√°c khung gi·ªù b·ªã tr√πng tr∆∞·ªõc khi l∆∞u.
                    </p>
                </div>
            `,
        confirmButtonColor: '#667eea',
        confirmButtonText: 'ƒê√£ hi·ªÉu'
      });
    }

    return allValid;
  }

  function showTimeInputError(input, message) {
    const formGroup = input.closest('.time-input-group');

    input.style.borderColor = '#e53e3e';
    input.style.boxShadow = '0 0 0 3px rgba(229, 62, 62, 0.1)';
    input.classList.add('error-state');

    const existingError = formGroup.querySelector('.time-error-message');
    if (existingError) existingError.remove();

    const errorDiv = document.createElement('div');
    errorDiv.className = 'time-error-message';
    errorDiv.style.color = '#e53e3e';
    errorDiv.style.fontSize = '0.75rem';
    errorDiv.style.marginTop = '4px';
    errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
    formGroup.appendChild(errorDiv);
  }

  function showTimeInputSuccess(input) {
    const formGroup = input.closest('.time-input-group');
    input.style.borderColor = '#48bb78';
    input.style.boxShadow = '0 0 0 3px rgba(72, 187, 120, 0.1)';
    input.classList.remove('error-state');

    const existingError = formGroup.querySelector('.time-error-message');
    if (existingError) existingError.remove();
  }

  function resetTimeInputError(input) {
    const formGroup = input.closest('.time-input-group');
    input.style.borderColor = '';
    input.style.boxShadow = '';
    input.classList.remove('error-state');

    const existingError = formGroup.querySelector('.time-error-message');
    if (existingError) existingError.remove();
  }

  async function saveBangGia() {
    const isValid = await validateAllTimeRangesBeforeSave();
    if (!isValid) return;

    try {
        const loaiPhong = document.getElementById('bangGiaLoaiPhong').value;
        if (!loaiPhong) {
            await Swal.fire({
                icon: 'warning',
                title: 'Thi·∫øu th√¥ng tin',
                text: 'Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng',
                confirmButtonColor: '#667eea'
            });
            return;
        }

        const priceItems = document.querySelectorAll('.price-item');
        if (priceItems.length === 0) {
            await Swal.fire({
                icon: 'warning',
                title: 'Thi·∫øu th√¥ng tin',
                text: 'Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt khung gi·ªù v√† gi√° ti·ªÅn!',
                confirmButtonColor: '#667eea'
            });
            return;
        }

        const bangGiaData = [];
        for (const item of priceItems) {
            const startTime = item.querySelector('.start-time-input').value.trim();
            const endTime = item.querySelector('.end-time-input').value.trim();
            const giaTien = item.querySelector('.gia-tien-input').value;
            const maGia = item.querySelector('.ma-gia-input').value;

            if (!startTime || !endTime || !giaTien) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Thi·∫øu th√¥ng tin',
                    text: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin khung gi·ªù v√† gi√° ti·ªÅn!',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            if (giaTien < 1000) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Gi√° ti·ªÅn kh√¥ng h·ª£p l·ªá',
                    text: 'Gi√° ti·ªÅn ph·∫£i t·ª´ 1,000 VNƒê tr·ªü l√™n!',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            const khungGio = `${startTime}-${endTime}`;
            bangGiaData.push({
                MaGia: maGia,
                LoaiPhong: loaiPhong,
                KhungGio: khungGio,
                GiaTien: parseInt(giaTien)
            });
        }
        console.log(loaiPhong); 
        console.log(bangGiaData);

        Swal.fire({
            title: 'ƒêang l∆∞u b·∫£ng gi√°...',
            html: `
                <div style="text-align: center;">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                </div>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => Swal.showLoading()
        });

        const response = await fetch(`/api/banggia/${loaiPhong}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ loaiPhong: loaiPhong, bangGia: bangGiaData })
        });

        if (!response.ok) {
            const errorResult = await response.json();
            throw new Error(errorResult.error || 'L·ªói l∆∞u b·∫£ng gi√°');
        }

        Swal.close();

        // üî• L∆ØU STATE HI·ªÜN T·∫†I (gi·ªØ nguy√™n trang v√† filters)
        const currentState = {
            page: currentPage, // üî• Gi·ªØ nguy√™n trang hi·ªán t·∫°i
            filters: {
                search: document.getElementById('searchInput').value,
                type: document.getElementById('typeFilter').value,
                status: document.getElementById('statusFilter').value
            },
            timestamp: Date.now()
        };
        sessionStorage.setItem('karaokeAppStateBeforeReload', JSON.stringify(currentState));

        // L∆∞u th√¥ng tin ƒë·ªÉ t·ª± ƒë·ªông chuy·ªÉn trang sau khi reload
        sessionStorage.setItem('lastActionLoaiPhong', loaiPhong);
        sessionStorage.setItem('lastActionType', 'banggia');

        await Swal.fire({
            icon: 'success',
            title: 'Th√†nh c√¥ng!',
            text: `ƒê√£ l∆∞u ${bangGiaData.length} khung gi·ªù cho lo·∫°i ph√≤ng ${loaiPhong}`,
            timer: 2000,
            showConfirmButton: false,
            timerProgressBar: true
        });

        
        loadBangGiaForRoomType(loaiPhong);
        hasUnsavedChanges = false;

        console.log('üíæ ƒê√£ l∆∞u state tr∆∞·ªõc khi ƒë√≥ng b·∫£ng gi√° modal - Gi·ªØ nguy√™n trang:', currentPage);
        console.log('‚úÖ ƒê√£ l∆∞u b·∫£ng gi√° v√† reload modal th√†nh c√¥ng');

    } catch (error) {
        Swal.close();
        console.error('‚ùå L·ªói khi l∆∞u b·∫£ng gi√°:', error);
        
        await Swal.fire({
            icon: 'error',
            title: 'L·ªói!',
            html: `Kh√¥ng th·ªÉ l∆∞u b·∫£ng gi√°:<br><strong>${error.message}</strong>`,
            confirmButtonColor: '#667eea'
        });
    }
}
  
  
  
  // ===== MODAL STATE MANAGEMENT =====
  function restoreBangGiaModalState() {
    try {
      const savedState = sessionStorage.getItem('bangGiaModalState');
      if (savedState) {
        const modalState = JSON.parse(savedState);
        const now = Date.now();

        if (modalState.isModalOpen && (now - modalState.timestamp) < 30000) {
          setTimeout(() => {
            const modal = document.getElementById('bangGiaModal');
            if (modal) {
              modal.style.display = 'flex';
              document.body.style.overflow = 'hidden';
            }

            const selectLoaiPhong = document.getElementById('bangGiaLoaiPhong');
            if (selectLoaiPhong) selectLoaiPhong.value = modalState.loaiPhong;

            if (modalState.loaiPhong) loadBangGiaForRoomType(modalState.loaiPhong);

            if (modalState.action !== 'afterSave') {
              sessionStorage.removeItem('bangGiaModalState');
            }
          }, 500);
        } else {
          sessionStorage.removeItem('bangGiaModalState');
        }
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi kh√¥i ph·ª•c tr·∫°ng th√°i modal:', error);
      sessionStorage.removeItem('bangGiaModalState');
    }
  }

  // ===== UTILITY FUNCTIONS =====
  function toggleGuide() {
    const guideContent = document.getElementById('guideContent');
    const toggleBtn = document.querySelector('.btn-toggle-guide');

    if (!guideContent || !toggleBtn) return;

    guideContent.classList.toggle('collapsed');
    toggleBtn.classList.toggle('active');

    if (guideContent.classList.contains('collapsed')) {
      toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
    } else {
      toggleBtn.innerHTML = '<i class="fas fa-chevron-up"></i>';
    }
  }

  {{!-- function syncPriceDataToMap() {
      // Ch·ªâ ƒë·ªìng b·ªô n·∫øu ƒëang ch·ªânh s·ª≠a m·ªôt lo·∫°i ph√≤ng (ƒë√£ ch·ªçn trong select)
      if (!currentEditingLoaiPhong) {
          return;
      }
      
      // üî• L·∫•y t·∫•t c·∫£ c√°c m·ª•c gi√° hi·ªán t·∫°i t·ª´ DOM
      const allPriceItemsInDOM = document.querySelectorAll('.price-item');
      const currentPriceData = [];
      
      // Duy·ªát qua c√°c DOM element v√† thu th·∫≠p d·ªØ li·ªáu
      allPriceItemsInDOM.forEach(item => {
          const start = item.querySelector('.start-time-input').value.trim();
          const end = item.querySelector('.end-time-input').value.trim();
          const price = item.querySelector('.gia-tien-input').value;
          
          currentPriceData.push({
              KhungGio: `${start}-${end}`,
              GiaTien: price,
          });
      });

      // C·∫≠p nh·∫≠t Map: L∆∞u to√†n b·ªô danh s√°ch d·ªØ li·ªáu DOM v√†o Value c·ªßa Map
      // N·∫øu ƒë√¢y l√† lo·∫°i ph√≤ng m·ªõi, n√≥ s·∫Ω t·ª± ƒë·ªông t·∫°o Key.
      newRoomName.set(currentEditingLoaiPhong, currentPriceData);
      console.log(`‚úÖ SYNC: ${currentPriceData.length} m·ª•c gi√° cho ${currentEditingLoaiPhong}. Map updated.`);
  }
   --}}
  // ===== AUTO NAVIGATION AFTER RELOAD =====
function handleAutoNavigationAfterReload() {
    const lastActionType = sessionStorage.getItem('lastActionType');
    const savedState = sessionStorage.getItem('karaokeAppStateBeforeReload');
    
    console.log('üéØ Auto Navigation - lastActionType:', lastActionType, 'savedState:', !!savedState);

    if (!lastActionType && !savedState) {
        console.log('üîÑ Kh√¥ng c√≥ action n√†o c·∫ßn x·ª≠ l√Ω');
        return;
    }

    // ƒê·ª£i DOM load xong
    setTimeout(() => {
        let shouldUpdateDisplay = false;

        if (lastActionType === 'room') {
            const roomId = sessionStorage.getItem('lastActionRoomId');
            if (roomId) {
                // T√åM TRANG CH·ª®A PH√íNG
                const targetPage = findRoomPage(roomId);
                console.log('üéØ Ph√≤ng ƒë∆∞·ª£c s·ª≠a ·ªü trang:', targetPage, 'currentPage:', currentPage);
                
                if (targetPage !== currentPage) {
                    currentPage = targetPage;
                    console.log('‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn trang:', currentPage);
                    shouldUpdateDisplay = true;
                }
                
                highlightRoom(roomId);
            }
        } 
        else if (lastActionType === 'banggia') {
            const loaiPhong = sessionStorage.getItem('lastActionLoaiPhong');
            if (loaiPhong) {
                const targetPage = findRoomPageByType(loaiPhong);
                console.log('üéØ Lo·∫°i ph√≤ng ·ªü trang:', targetPage, 'currentPage:', currentPage);
                
                if (targetPage !== currentPage) {
                    currentPage = targetPage;
                    console.log('‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn trang:', currentPage);
                    shouldUpdateDisplay = true;
                }
                
                highlightRoomsByType(loaiPhong);
            }
        }

        // üî• C·∫¨P NH·∫¨T HI·ªÇN TH·ªä N·∫æU C√ì THAY ƒê·ªîI
        if (shouldUpdateDisplay) {
            showCurrentPage();
            updatePaginationInfo();
        }

        // üî• X√ìA STATE SAU KHI ƒê√É X·ª¨ L√ù XONG
        cleanupAfterNavigation();

    }, 300);
}

function cleanupAfterNavigation() {
    console.log('üßπ ƒêang d·ªçn d·∫πp state sau navigation...');
    sessionStorage.removeItem('lastActionType');
    sessionStorage.removeItem('lastActionRoomId');
    sessionStorage.removeItem('lastActionLoaiPhong');
    sessionStorage.removeItem('currentFilters');
    sessionStorage.removeItem('karaokeAppStateBeforeReload');
    console.log('‚úÖ ƒê√£ d·ªçn d·∫πp xong state');
}


function highlightRoom(roomId) {
    const roomElement = document.querySelector(`.room-card[data-id="${roomId}"]`);
    if (roomElement) {
        roomElement.style.boxShadow = '0 0 0 3px #48bb78, 0 8px 30px rgba(72, 187, 120, 0.3)';
        roomElement.style.transform = 'translateY(-5px)';
        
        // T·∫°o hi·ªáu ·ª©ng pulse
        roomElement.animate([
            { transform: 'translateY(-5px) scale(1)' },
            { transform: 'translateY(-5px) scale(1.02)' },
            { transform: 'translateY(-5px) scale(1)' }
        ], {
            duration: 1000,
            iterations: 2
        });

        // T·ª± ƒë·ªông cu·ªôn ƒë·∫øn ph√≤ng
        roomElement.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center',
            inline: 'center'
        });

        // T·ª± ƒë·ªông x√≥a highlight sau 5 gi√¢y
        setTimeout(() => {
            if (roomElement) {
                roomElement.style.boxShadow = '';
                roomElement.style.transform = '';
            }
        }, 5000);
    }
}

function highlightRoomsByType(loaiPhong) {
    const roomElements = document.querySelectorAll(`.room-card[data-type="${loaiPhong}"]`);
    roomElements.forEach(roomElement => {
        roomElement.style.boxShadow = '0 0 0 3px #667eea, 0 8px 30px rgba(102, 126, 234, 0.3)';
        roomElement.style.transform = 'translateY(-3px)';
        
        // T·ª± ƒë·ªông x√≥a highlight sau 5 gi√¢y
        setTimeout(() => {
            roomElement.style.boxShadow = '';
            roomElement.style.transform = '';
        }, 5000);
    });

    // T·ª± ƒë·ªông cu·ªôn ƒë·∫øn ph√≤ng ƒë·∫ßu ti√™n c√πng lo·∫°i
    if (roomElements.length > 0) {
        roomElements[0].scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center'
        });
    }
}
// Th√™m h√†m n√†y ƒë·ªÉ reset state khi trang load
function resetPaginationState() {
    currentPage = 1;
    sessionStorage.removeItem('karaokeAppStateBeforeModal');
    sessionStorage.removeItem('shouldRestoreAfterReload');
    sessionStorage.removeItem('lastActionType');
    sessionStorage.removeItem('lastActionRoomId');
    sessionStorage.removeItem('lastActionLoaiPhong');
    
    console.log('üîÑ ƒê√£ reset pagination state, currentPage =', currentPage);
}

  // ===== INITIALIZATION =====
function initializePaginationAndFilter() {
    allRooms = Array.from(document.querySelectorAll('.room-card'));
    console.log('üè† T·ªïng s·ªë ph√≤ng t√¨m th·∫•y:', allRooms.length);
    
    // üî• QUAN TR·ªåNG: KH√îI PH·ª§C STATE TR∆Ø·ªöC (ch·ªâ kh√¥i ph·ª•c trang, kh√¥ng kh√¥i ph·ª•c filters)
    restoreStateAfterReload();
    
    // üî• KH√îNG KH√îI PH·ª§C FILTERS T·ª™ currentFilters N·ªÆA
    // Lu√¥n reset filters v·ªÅ "T·∫•t c·∫£" khi reload
    const searchInput = document.getElementById('searchInput');
    const typeFilter = document.getElementById('typeFilter');
    const statusFilter = document.getElementById('statusFilter');
    
    if (searchInput) searchInput.value = '';
    if (typeFilter) typeFilter.value = '';
    if (statusFilter) statusFilter.value = '';
    
    console.log('‚úÖ ƒê√£ reset filters v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh');
    
    // √ÅP D·ª§NG FILTERS (s·∫Ω l√† "T·∫•t c·∫£")
    applyFiltersWithoutPageReset();
    
    // üî• SAU C√ôNG M·ªöI X·ª¨ L√ù AUTO NAVIGATION
    setTimeout(() => {
        handleAutoNavigationAfterReload();
    }, 100);
    
    console.log('üéØ Kh·ªüi t·∫°o xong, trang hi·ªán t·∫°i:', currentPage);
}










function applyFiltersWithoutPageReset() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const typeFilter = document.getElementById('typeFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;

    console.log('üîç √Åp d·ª•ng filters:', { searchTerm, typeFilter, statusFilter });

    filteredRooms = allRooms.filter(card => {
        const name = card.getAttribute('data-name').toLowerCase();
        const type = card.getAttribute('data-type');
        const status = card.getAttribute('data-status');

        const matchesSearch = !searchTerm || name.includes(searchTerm);
        const matchesType = !typeFilter || type === typeFilter;
        const matchesStatus = !statusFilter || status === statusFilter;

        return matchesSearch && matchesType && matchesStatus;
    });

    console.log('üìä K·∫øt qu·∫£ filter:', filteredRooms.length, 'ph√≤ng');

    // üî• KH√îNG reset currentPage, ch·ªâ ƒëi·ªÅu ch·ªânh n·∫øu v∆∞·ª£t qu√°
    const totalPages = Math.ceil(filteredRooms.length / CONFIG.roomsPerPage);
    console.log('üìÑ T·ªïng s·ªë trang:', totalPages, 'currentPage:', currentPage);
    
    if (currentPage > totalPages && totalPages > 0) {
        currentPage = totalPages;
        console.log('üîÑ ƒêi·ªÅu ch·ªânh currentPage v·ªÅ:', currentPage);
    } else if (totalPages === 0) {
        currentPage = 1;
        console.log('üîÑ Kh√¥ng c√≥ ph√≤ng, reset v·ªÅ trang 1');
    }

    showCurrentPage();
    updatePaginationInfo();
    togglePaginationVisibility();
    toggleEmptyState(filteredRooms.length === 0);
}

  document.addEventListener('DOMContentLoaded', function () {
    console.log('üè† DOM ƒë√£ load xong');

    loadAppState();

    if (appState.filters) {
        document.getElementById('searchInput').value = appState.filters.search || '';
        document.getElementById('typeFilter').value = appState.filters.type || '';
        document.getElementById('statusFilter').value = appState.filters.status || '';
    }

    if (appState.pagination?.currentPage) {
        currentPage = appState.pagination.currentPage;
    }

    try {
        const bangGiaDataJson = '{{{json currentBangGia}}}';
        if (bangGiaDataJson && bangGiaDataJson !== 'undefined') {
            window.bangGiaData = JSON.parse(bangGiaDataJson);
        } else {
            window.bangGiaData = [];
        }
    } catch (error) {
        console.error('Error parsing bangGiaData:', error);
        window.bangGiaData = [];
    }

    const guideContent = document.getElementById('guideContent');
    const toggleBtn = document.querySelector('.btn-toggle-guide');
    if (guideContent && toggleBtn) {
        guideContent.classList.add('collapsed');
        toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
        toggleBtn.classList.remove('active');
    }

    setTimeout(() => {
        initializePaginationAndFilter();
        setupRealTimeSearch();

        const typeFilter = document.getElementById('typeFilter');
        const statusFilter = document.getElementById('statusFilter');
        if (typeFilter) typeFilter.addEventListener('change', filterRooms);
        if (statusFilter) statusFilter.addEventListener('change', filterRooms);

        restoreBangGiaModalState();
    }, 100);
});

  function initializeRoomTypeActions() {
    const roomTypeActions = document.querySelector('.room-type-actions');
    if (roomTypeActions) {
        roomTypeActions.innerHTML = `
            <button class="btn-add-room-type" onclick="addNewRoomType()" type="button" title="Th√™m lo·∫°i ph√≤ng m·ªõi">
                <i class="fas fa-plus"></i>
            </button>
            <button class="btn-edit-room-type" onclick="editRoomType()" type="button" title="S·ª≠a lo·∫°i ph√≤ng">
                <i class="fas fa-edit"></i>
            </button>
            <button class="btn-delete-room-type" onclick="deleteRoomType()" type="button" title="Xo√° lo·∫°i ph√≤ng">
                <i class="fas fa-trash"></i>
            </button>
        `;
    }
}

function setupEventListeners() {
    const typeFilter = document.getElementById('typeFilter');
    const statusFilter = document.getElementById('statusFilter');
    
    if (typeFilter) typeFilter.addEventListener('change', filterRooms);
    if (statusFilter) statusFilter.addEventListener('change', filterRooms);

    const roomModal = document.getElementById('roomModal');
    const bangGiaModal = document.getElementById('bangGiaModal');

    if (roomModal) {
        roomModal.addEventListener('click', function (e) {
            if (e.target === roomModal) {
                closeRoomModal();
            }
        });
    }

    if (bangGiaModal) {
        bangGiaModal.addEventListener('click', function (e) {
            if (e.target === bangGiaModal) {
                closeBangGiaModal();
            }
        });
    }
}

function initializeApp() {
    
    console.log('üè† DOM ƒë√£ load xong');
    {{!-- if (window.preloadExecuted) {
        console.log('‚úÖ Preload script ƒë√£ ch·∫°y tr∆∞·ªõc ƒë√≥');
        console.log('‚è±Ô∏è Preload time:', window.preloadTime);
        console.log('üßπ Cleanup status:', window.cleanupCompleted ? 'SUCCESS' : window.cleanupFailed ? 'FAILED' : 'PENDING');
    } else {
        console.warn('‚ö†Ô∏è Preload script CH∆ØA ch·∫°y! C√≥ v·∫•n ƒë·ªÅ v·ªõi th·ª© t·ª± load');
        
        // Fallback: ch·∫°y cleanup ngay b√¢y gi·ªù
        console.log('üîÑ Running cleanup now...');
        fetch('/api/phonghat', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(result => {
            console.log('‚úÖ Fallback cleanup done:', result);
        })
        .catch(error => {
            console.error('‚ùå Fallback cleanup failed:', error);
        });
    }queueMicrotask --}}

    // RESET STATE TR∆Ø·ªöC KHI KH·ªûI T·∫†O
    resetPaginationState();

    // Kh·ªüi t·∫°o d·ªØ li·ªáu b·∫£ng gi√°
    try {
        const bangGiaDataJson = '{{{json currentBangGia}}}';
        if (bangGiaDataJson && bangGiaDataJson !== 'undefined') {
            window.bangGiaData = JSON.parse(bangGiaDataJson);
        } else {
            window.bangGiaData = [];
        }
    } catch (error) {
        console.error('Error parsing bangGiaData:', error);
        window.bangGiaData = [];
    }

    // Thi·∫øt l·∫≠p guide m·∫∑c ƒë·ªãnh
    const guideContent = document.getElementById('guideContent');
    const toggleBtn = document.querySelector('.btn-toggle-guide');
    if (guideContent && toggleBtn) {
        guideContent.classList.add('collapsed');
        toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
        toggleBtn.classList.remove('active');
    }

    // Kh·ªüi t·∫°o c√°c component
    setTimeout(() => {
        initializePaginationAndFilter();
        setupRealTimeSearch();
        setupEventListeners();
        initializeRoomTypeActions();
        restoreBangGiaModalState();
    }, 100);
}

// Kh·ªüi ch·∫°y ·ª©ng d·ª•ng khi DOM ready
document.addEventListener('DOMContentLoaded', initializeApp);
</script>



<style>
  /* ===== MAIN CONTENT STYLES ===== */
  .main-content {
    margin-left: 280px;
    transition: margin-left 0.3s ease;
    min-height: 100vh;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  }

  .sidebar-collapsed .main-content {
    margin-left: 80px;
  }

  /* ===== DASHBOARD STYLES ===== */
  .admin-dashboard {
    padding: 24px;
    min-height: 100vh;
  }

  .dashboard-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 16px;
    padding: 28px;
    margin-bottom: 28px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    color: white;
    position: relative;
    overflow: hidden;
  }

  .dashboard-header::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 200px;
    height: 200px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(30%, -30%);
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
    position: relative;
    z-index: 1;
  }

  .header-title {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .title-icon {
    font-size: 3rem;
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }

  .header-title h1 {
    margin: 0;
    font-size: 2rem;
    font-weight: 700;
  }

  .header-title p {
    margin: 8px 0 0 0;
    opacity: 0.9;
    font-size: 1.1rem;
  }

  .header-actions {
    display: flex;
    gap: 16px;
    align-items: center;
  }

  /* ===== BUTTON STYLES ===== */
  .btn-primary {
    background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
    color: white;
    border: none;
    padding: 14px 24px;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 10px;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
    padding: 14px;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  /* ===== SEARCH AND FILTER ===== */
  .search-filter-bar {
    background: white;
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 28px;
    display: flex;
    gap: 24px;
    align-items: center;
    flex-wrap: wrap;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .search-box {
    display: flex;
    align-items: center;
    background: #f8fafc;
    border-radius: 12px;
    padding: 12px 20px;
    flex: 1;
    min-width: 320px;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
  }

  .search-box:focus-within {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .search-box i {
    color: #64748b;
    margin-right: 12px;
    font-size: 1.1rem;
  }

  .search-box input {
    border: none;
    background: none;
    outline: none;
    flex: 1;
    padding: 8px 0;
    font-size: 1rem;
    color: #1e293b;
  }

  .search-box input::placeholder {
    color: #94a3b8;
  }

  .search-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 10px;
    cursor: pointer;
    margin-left: 16px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  }

  .search-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }

  .filter-controls {
    display: flex;
    gap: 16px;
    align-items: center;
    flex-wrap: wrap;
  }

  .filter-select {
    padding: 12px 20px;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    background: white;
    color: #475569;
    min-width: 180px;
    font-size: 1rem;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .filter-select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .clear-filters {
    background: #f1f5f9;
    border: 2px solid #e2e8f0;
    color: #64748b;
    padding: 12px 20px;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    font-weight: 500;
  }

  .clear-filters:hover {
    background: #e2e8f0;
    color: #475569;
    transform: translateY(-1px);
  }

  /* ===== STATS OVERVIEW ===== */
  .stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 24px;
    margin-bottom: 32px;
  }

  .stat-card {
    background: white;
    border-radius: 20px;
    padding: 32px;
    display: flex;
    align-items: center;
    gap: 20px;
    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 0, 0, 0.03);
    position: relative;
    overflow: hidden;
  }

  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
  }

  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 35px rgba(0, 0, 0, 0.12);
  }

  .stat-icon {
    width: 80px;
    height: 80px;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .stat-icon.total {
    background: linear-gradient(135deg, #fed7d7, #feb2b2);
    color: #c53030;
  }

  .stat-icon.available {
    background: linear-gradient(135deg, #c6f6d5, #9ae6b4);
    color: #276749;
  }

  .stat-icon.busy {
    background: linear-gradient(135deg, #fed7d7, #feb2b2);
    color: #c53030;
  }

  .stat-icon.reserved {
    background: linear-gradient(135deg, #fefcbf, #faf089);
    color: #d69e2e;
  }

  .stat-info h3 {
    margin: 0;
    font-size: 2.5rem;
    color: #1e293b;
    font-weight: 700;
  }

  .stat-info p {
    margin: 8px 0 0 0;
    color: #64748b;
    font-size: 1.1rem;
    font-weight: 500;
  }

  /* ===== ROOMS GRID ===== */
  .rooms-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));
    gap: 28px;
  }

  .room-card {
    background: white;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);
    transition: all 0.4s ease;
    border: 1px solid rgba(0, 0, 0, 0.03);
    position: relative;
  }

  .room-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
  }

  .room-image {
    position: relative;
    height: 240px;
    overflow: hidden;
  }

  .room-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .room-card:hover .room-image img {
    transform: scale(1.1);
  }

  .room-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.9), rgba(118, 75, 162, 0.9));
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: all 0.4s ease;
  }

  .room-card:hover .room-overlay {
    opacity: 1;
  }

  .room-actions {
    display: flex;
    gap: 16px;
  }

  .btn-edit,
  .btn-delete {
    width: 56px;
    height: 56px;
    border: none;
    border-radius: 14px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .btn-edit {
    background: linear-gradient(135deg, #48bb78, #38a169);
    color: white;
  }

  .btn-delete {
    background: linear-gradient(135deg, #f56565, #e53e3e);
    color: white;
  }

  .btn-edit:hover,
  .btn-delete:hover {
    transform: scale(1.1) translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }

  .room-badge {
    position: absolute;
    top: 16px;
    left: 16px;
    padding: 8px 16px;
    border-radius: 25px;
    font-size: 0.85rem;
    font-weight: 700;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    z-index: 2;
  }

  .room-badge.Tr·ªëng {
    background: linear-gradient(135deg, rgba(72, 187, 120, 0.95), rgba(56, 161, 105, 0.95));
    color: white;
  }

  .room-badge.ƒêang\ s·ª≠\ d·ª•ng {
    background: linear-gradient(135deg, rgba(245, 101, 101, 0.95), rgba(229, 62, 62, 0.95));
    color: white;
  }

  .room-badge.ƒê√£\ ƒë·∫∑t\ tr∆∞·ªõc {
    background: linear-gradient(135deg, rgba(237, 137, 54, 0.95), rgba(217, 119, 6, 0.95));
    color: white;
  }

  .room-type {
    position: absolute;
    top: 16px;
    right: 16px;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.95), rgba(118, 75, 162, 0.95));
    color: white;
    padding: 8px 16px;
    border-radius: 25px;
    font-size: 0.85rem;
    font-weight: 700;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    z-index: 2;
  }

  .room-content {
    padding: 24px;
  }

  .room-title {
    margin: 0 0 12px 0;
    color: #1e293b;
    font-size: 1.4rem;
    font-weight: 700;
  }

  .room-description {
    margin: 0 0 20px 0;
    color: #64748b;
    line-height: 1.6;
    font-size: 1rem;
  }

  .room-details {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 20px;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 12px;
    color: #475569;
    font-size: 1rem;
  }

  .detail-item i {
    color: #667eea;
    width: 20px;
    font-size: 1.1rem;
  }

  /* ===== B·∫¢NG GI√Å STYLES ===== */
  .bang-gia-details {
    margin: 20px 0;
    padding: 20px;
    background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    border-radius: 16px;
    border-left: 6px solid #667eea;
    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
  }

  .bang-gia-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
  }

  .bang-gia-title {
    font-weight: 700;
    color: #1e293b;
    font-size: 1.1rem;
  }

  .btn-edit-banggia,
  .btn-add-banggia {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    padding: 10px 18px;
    border-radius: 10px;
    cursor: pointer;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    gap: 6px;
    transition: all 0.3s ease;
    font-weight: 600;
    box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
  }

  .btn-edit-banggia:hover,
  .btn-add-banggia:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
  }

  .no-banggia {
    text-align: center;
    padding: 24px;
    border: 3px dashed #e2e8f0;
    border-radius: 16px;
    margin: 20px 0;
    background: #f8fafc;
    transition: all 0.3s ease;
  }

  .no-banggia:hover {
    border-color: #667eea;
    background: #f1f5f9;
  }

  .gia-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    font-size: 0.95rem;
    border-bottom: 1px solid #e2e8f0;
    transition: all 0.3s ease;
  }

  .gia-item:hover {
    background: rgba(255, 255, 255, 0.5);
    border-radius: 8px;
    padding: 12px;
    margin: 0 -8px;
  }

  .gia-item:last-child {
    border-bottom: none;
  }

  .khung-gio {
    color: #475569;
    font-weight: 600;
  }

  .gia-tien {
    color: #1e293b;
    font-weight: 700;
  }

  .room-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 20px;
    border-top: 2px solid #f1f5f9;
  }

  .room-id {
    color: #94a3b8;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .btn-status {
    background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
    border: none;
    width: 44px;
    height: 44px;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #475569;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .btn-status:hover {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e0);
    transform: rotate(15deg);
    color: #667eea;
  }

  /* ===== EMPTY STATE ===== */
  .empty-state {
    text-align: center;
    padding: 80px 40px;
    background: white;
    border-radius: 24px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border: 2px dashed #e2e8f0;
  }

  .empty-icon {
    font-size: 5rem;
    margin-bottom: 24px;
    opacity: 0.7;
  }

  .empty-state h3 {
    margin: 0 0 12px 0;
    color: #1e293b;
    font-size: 1.8rem;
    font-weight: 700;
  }

  .empty-state p {
    margin: 0 0 32px 0;
    color: #64748b;
    font-size: 1.2rem;
  }

  /* ===== MODAL STYLES ===== */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    padding: 20px;
    backdrop-filter: blur(8px);
  }

  .modal-container {
    background: white;
    border-radius: 24px;
    width: 100%;
    max-width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: modalSlideIn 0.4s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-30px) scale(0.9);
    }

    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 28px;
    border-bottom: 2px solid #f1f5f9;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-radius: 24px 24px 0 0;
  }

  .modal-header h2 {
    margin: 0;
    color: #1e293b;
    font-size: 1.8rem;
    font-weight: 700;
  }

  .modal-close {
    background: #f1f5f9;
    border: none;
    font-size: 1.4rem;
    color: #64748b;
    cursor: pointer;
    padding: 8px;
    border-radius: 12px;
    transition: all 0.3s ease;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-close:hover {
    background: #e2e8f0;
    color: #475569;
    transform: rotate(90deg);
  }

  .modal-body {
    padding: 28px;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group.full-width {
    grid-column: 1 / -1;
  }

  .form-group label {
    margin-bottom: 10px;
    color: #374151;
    font-weight: 600;
    font-size: 1rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 14px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: white;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    transform: translateY(-1px);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .image-preview {
    border: 3px dashed #e2e8f0;
    border-radius: 16px;
    padding: 50px 30px;
    text-align: center;
    color: #94a3b8;
    margin-top: 10px;
    transition: all 0.3s ease;
    background: #f8fafc;
  }

  .image-preview:hover {
    border-color: #667eea;
    color: #667eea;
  }

  .image-preview img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  /* ===== B·∫¢NG GI√Å MODAL STYLES ===== */
  .bang-gia-list {
    max-height: 300px;
    overflow-y: auto;
    margin: 10px;
    padding-right: 8px;
  }

  .bang-gia-list::-webkit-scrollbar {
    width: 6px;
  }

  .bang-gia-list::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 10px;
  }

  .bang-gia-list::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 10px;
  }

  .bang-gia-list::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  .price-item {
    display: inline;
    grid-template-columns: 1fr 1fr auto;
    gap: 16px;
    align-items: start;
    padding: 20px;
    border: 2px solid #e2e8f0;
    border-radius: 16px;
    margin: 16px 0px;
    background: white;
    transition: all 0.3s ease;
    position: relative;
  }

  .price-item:hover {
    border-color: #667eea;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .price-item::before {
    content: '‚è∞';
    position: absolute;
    top: -10px;
    left: 20px;
    background: white;
    padding: 0 8px;
    color: #667eea;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .btn-remove-price {
    background: linear-gradient(135deg, #f56565, #e53e3e);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(245, 101, 101, 0.3);
  }

  .btn-remove-price:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(245, 101, 101, 0.4);
  }

  .btn-add-price-item {
    background: linear-gradient(135deg, #48bb78, #38a169);
    color: white;
    border: none;
    padding: 14px 20px;
    border-radius: 12px;
    cursor: pointer;
    display: inline !important;
    align-items: center;
    gap: 10px;
    width: 100%;
    justify-content: center;
    margin-top: 16px;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
  }

  .btn-add-price-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 16px;
    padding: 28px;
    border-top: 2px solid #f1f5f9;
    background: #f8fafc;
    border-radius: 0 0 24px 24px;
  }

  /* ===== GUIDE STYLES ===== */
  .usage-guide {
    background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
    border: 2px solid #bae6fd;
    border-radius: 16px;
    padding: 20px;
    margin: 20px 0;
    transition: all 0.3s ease;
  }

  .usage-guide:hover {
    border-color: #7dd3fc;
    box-shadow: 0 4px 15px rgba(3, 105, 161, 0.1);
  }

  .guide-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    padding: 10px 0;
  }

  .guide-header h4 {
    margin: 0;
    color: #0369a1;
    font-size: 1.1rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .btn-toggle-guide {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border: none;
    color: white;
    width: 36px;
    height: 36px;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    flex-shrink: 0;
  }

  .btn-toggle-guide:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
  }

  .btn-toggle-guide.active {
    background: linear-gradient(135deg, #48bb78, #38a169);
  }

  .btn-toggle-guide i {
    font-size: 0.9rem;
    transition: transform 0.3s ease;
  }

  .btn-toggle-guide.active i {
    transform: rotate(180deg);
  }

  .guide-content {
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .guide-content:not(.collapsed) {
    max-height: 500px;
    opacity: 1;
  }

  .guide-content.collapsed {
    max-height: 0;
    opacity: 0;
    padding: 0;
    margin: 0;
  }

  .guide-items {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 12px;
    padding: 8px 0;
  }

  .guide-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 16px;
    background: white;
    border-radius: 12px;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
  }

  .guide-item:hover {
    border-color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.1);
  }

  .guide-example {
    font-family: 'Courier New', monospace;
    font-weight: 700;
    color: #667eea;
    font-size: 0.95rem;
    margin-bottom: 6px;
    background: #f8fafc;
    padding: 6px 12px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }

  .guide-desc {
    color: #475569;
    font-size: 0.85rem;
    line-height: 1.4;
  }

  /* ===== TIME INPUT STYLES ===== */
  .time-input-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .time-input-group label {
    font-size: 0.85rem;
    color: #475569;
    font-weight: 600;
    margin-bottom: 4px;
  }

  .time-input-wrapper {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .time-input {
    flex: 1;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1rem;
    text-align: center;
    transition: all 0.3s ease;
    font-weight: 600;
    font-family: 'Courier New', monospace;
    background: white;
  }

  .time-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    background: #f8fafc;
  }

  .time-separator {
    color: #64748b;
    font-weight: 700;
    font-size: 1.2rem;
  }

  .time-format-helper {
    display: flex;
    justify-content: space-between;
    margin-top: 4px;
    font-size: 0.75rem;
    color: #94a3b8;
  }

  .format-example {
    font-family: 'Courier New', monospace;
  }

  /* ===== PRICE INPUT STYLES ===== */
  .price-input-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .price-input-group label {
    font-weight: 600;
    color: #374151;
    font-size: 0.9rem;
    margin-bottom: 4px;
    display: flex;
    align-items: center;
    gap: 6px;
  }

  .price-input-group label::before {
    content: 'üí∞';
    font-size: 1rem;
  }

  .gia-tien-input {
    width: 172px;
    height: 28px;
    border: 2px solid #e2e8f0;
    font-size: inherit;
    font-weight: 600;
    transition: all 0.3s ease;
    background: white;
    font-family: 'Courier New', monospace;
  }

  .gia-tien-input:focus {
    outline: none;
    border-color: #48bb78;
    box-shadow: 0 0 0 3px rgba(72, 187, 120, 0.1);
    background: #f8fafc;
    transform: translateY(-1px);
  }

  .price-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .price-input-wrapper .gia-tien-input {
    padding-right: 80px;
  }

  .currency-symbol {
    position: absolute;
    right: 16px;
    color: #64748b;
    font-weight: 600;
    font-size: 0.9rem;
    background: #f1f5f9;
    padding: 4px 8px;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
  }

  /* ===== UTILITY STYLES ===== */
  .empty-banggia-state {
    text-align: center;
    padding: 40px 20px;
    color: #64748b;
  }

  .empty-banggia-state .empty-icon {
    font-size: 3rem;
    margin-bottom: 16px;
    opacity: 0.5;
  }

  .empty-banggia-state h4 {
    margin: 0 0 8px 0;
    color: #475569;
    font-size: 1.2rem;
  }

  .empty-banggia-state p {
    margin: 0 0 20px 0;
    font-size: 0.95rem;
  }

  .btn-add-first-price {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 10px;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  }

  .btn-add-first-price:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }

  .spinner-border {
    width: 3rem;
    height: 3rem;
    border-width: 0.3em;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* ===== RESPONSIVE STYLES ===== */
  @media (max-width: 1200px) {
    .main-content {
      margin-left: 280px;
    }
  }

  @media (max-width: 1024px) {
    .main-content {
      margin-left: 80px;
    }

    .rooms-grid {
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    }
  }

  @media (max-width: 768px) {
    .main-content {
      margin-left: 0 !important;
      padding: 16px;
    }

    .admin-dashboard {
      padding: 16px;
    }

    .header-content {
      flex-direction: column;
      align-items: stretch;
      text-align: center;
    }

    .header-title {
      justify-content: center;
      text-align: center;
    }

    .search-filter-bar {
      flex-direction: column;
      align-items: stretch;
      padding: 20px;
    }

    .search-box {
      min-width: auto;
      margin-bottom: 16px;
    }

    .filter-controls {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-select {
      min-width: auto;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .rooms-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .stats-overview {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .modal-container {
      margin: 10px;
      max-width: none;
    }

    .price-item {
      grid-template-columns: 1fr;
      gap: 12px;
    }

    .time-input-wrapper {
      flex-direction: column;
      gap: 8px;
    }

    .time-separator {
      transform: rotate(90deg);
      margin: 4px 0;
    }

    .guide-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .guide-example {
      align-self: flex-start;
    }
  }

  @media (max-width: 480px) {
    .admin-dashboard {
      padding: 12px;
    }

    .dashboard-header {
      padding: 20px;
    }

    .header-actions {
      flex-direction: column;
      width: 100%;
    }

    .btn-primary {
      width: 100%;
      justify-content: center;
    }

    .stat-card {
      padding: 24px;
    }

    .room-content {
      padding: 20px;
    }

    .bang-gia-header {
      flex-direction: column;
      gap: 12px;
      align-items: flex-start;
    }

    .price-item {
      flex-direction: column;
      gap: 12px;
    }

    .price-item input {
      width: 100%;
    }
  }

  /* ===== FIXES ===== */
  .swal2-container {
    z-index: 100000 !important;
  }

  .modal-overlay[style*="display: flex"] {
    display: flex !important;
  }

  .modal-overlay[style*="display: none"] {
    display: none !important;
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  .time-error-message {
    color: #e53e3e;
    font-size: 0.75rem;
    margin-top: 4px;
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .time-error-message i {
    font-size: 0.7rem;
  }

  /* Style cho input khi c√≥ l·ªói */
  .start-time-input:invalid,
  .end-time-input:invalid,
  .gia-tien-input:invalid {
    border-color: #e53e3e;
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.1);
  }

  /* Style cho input khi h·ª£p l·ªá */
  .start-time-input:valid,
  .end-time-input:valid,
  .gia-tien-input:valid {
    border-color: #48bb78;
    box-shadow: 0 0 0 3px rgba(72, 187, 120, 0.1);
  }

  /* ===== PAGINATION STYLES ===== */
  .pagination-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 32px;
    padding: 20px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .pagination-info {
    color: #64748b;
    font-weight: 500;
    font-size: 0.95rem;
  }

  .pagination-info span {
    color: #1e293b;
    font-weight: 600;
  }

  .pagination-controls {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .pagination-btn {
    background: white;
    border: 2px solid #e2e8f0;
    color: #64748b;
    width: 40px;
    height: 40px;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    font-weight: 600;
  }

  .pagination-btn:hover:not(:disabled) {
    background: #667eea;
    border-color: #667eea;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .pagination-btn:disabled {
    background: #f1f5f9;
    border-color: #e2e8f0;
    color: #cbd5e0;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .pagination-pages {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .pagination-page {
    background: white;
    border: 2px solid #e2e8f0;
    color: #64748b;
    min-width: 40px;
    height: 40px;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .pagination-page:hover:not(.active) {
    background: #f8fafc;
    border-color: #667eea;
    color: #667eea;
    transform: translateY(-1px);
  }

  .pagination-page.active {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-color: #667eea;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .pagination-ellipsis {
    color: #94a3b8;
    padding: 0 8px;
    font-weight: 600;
  }

  /* ·∫®n pagination khi kh√¥ng c√≥ d·ªØ li·ªáu */
  .pagination-container.hidden {
    display: none;
  }

  /* Responsive Pagination */
  @media (max-width: 768px) {
    .pagination-container {
      flex-direction: column;
      gap: 16px;
      text-align: center;
    }

    .pagination-pages {
      order: -1;
    }

    .pagination-info {
      order: 1;
    }
  }

  @media (max-width: 480px) {
    .pagination-pages {
      gap: 2px;
    }

    .pagination-page {
      min-width: 36px;
      height: 36px;
      font-size: 0.85rem;
    }

    .pagination-btn {
      width: 36px;
      height: 36px;
    }
  }

  /* ===== MODAL FIXES ===== */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: none;
    /* M·∫∑c ƒë·ªãnh ·∫©n */
    align-items: center;
    justify-content: center;
    z-index: 10000;
    padding: 20px;
    backdrop-filter: blur(8px);
  }

  .modal-overlay[style*="display: flex"] {
    display: flex !important;
  }

  .modal-container {
    background: white;
    border-radius: 24px;
    width: 100%;
    max-width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: modalSlideIn 0.4s ease-out;
    position: relative;
    z-index: 10001;
  }

  /* ƒê·∫£m b·∫£o modal kh√¥ng b·ªã ·∫©n b·ªüi c√°c element kh√°c */
  .admin-dashboard {
    position: relative;
    z-index: 1;
  }

  /* Fix cho n√∫t ƒë√≥ng modal */
  .modal-close {
    background: #f1f5f9;
    border: none;
    font-size: 1.4rem;
    color: #64748b;
    cursor: pointer;
    padding: 8px;
    border-radius: 12px;
    transition: all 0.3s ease;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10002;
  }

  .modal-close:hover {
    background: #e2e8f0;
    color: #475569;
    transform: rotate(90deg);
  }

  /* ƒê·∫£m b·∫£o class hidden ho·∫°t ƒë·ªông */
  .hidden {
    display: none !important;
  }

  /* Pagination responsive fixes */
  @media (max-width: 768px) {
    .pagination-container {
      flex-direction: column;
      gap: 15px;
      padding: 15px;
    }

    .pagination-info {
      order: 2;
      text-align: center;
    }

    .pagination-controls {
      order: 1;
    }
  }

  /* Empty state improvements */
  .empty-state {
    background: white;
    border-radius: 20px;
    padding: 60px 40px;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    margin: 20px 0;
  }

  .empty-state .empty-icon {
    font-size: 4rem;
    margin-bottom: 20px;
    opacity: 0.7;
  }

  .empty-state h3 {
    color: #1e293b;
    margin-bottom: 10px;
    font-size: 1.5rem;
  }

  .empty-state p {
    color: #64748b;
    margin-bottom: 25px;
    font-size: 1.1rem;
  }
/* ===== BANG GIA MODAL STYLES ===== */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  padding: 20px;
  backdrop-filter: blur(8px);
}

.modal-container {
  background: white;
  border-radius: 24px;
  width: 100%;
  max-width: 1200px; /* TƒÉng t·ª´ 900px l√™n 1200px */
  max-height: 95vh; /* TƒÉng t·ª´ 90vh l√™n 95vh */
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
  border: 1px solid rgba(255, 255, 255, 0.2);
  animation: modalSlideIn 0.4s ease-out;
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: translateY(-30px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 32px; /* TƒÉng padding */
  border-bottom: 2px solid #f1f5f9;
  background: linear-gradient(135deg, #f8fafc, #f1f5f9);
  border-radius: 24px 24px 0 0;
}

.modal-header h2 {
  margin: 0;
  color: #1e293b;
  font-size: 2rem; /* TƒÉng font size */
  font-weight: 700;
}

.modal-body {
  padding: 32px; /* TƒÉng padding */
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 16px;
  padding: 32px; /* TƒÉng padding */
  border-top: 2px solid #f1f5f9;
  background: #f8fafc;
  border-radius: 0 0 24px 24px;
}

/* ===== SELECT WITH BUTTON CONTAINER ===== */
.select-with-btn-container {
  display: flex;
  gap: 12px;
  align-items: flex-end;
}


.select-with-btn-container .form-select:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* ===== BUTTON ADD ROOM TYPE ===== */
.btn-add-room-type {
  background: linear-gradient(135deg, #28a745, #20c997);
  color: white;
  border: none;
  padding: 14px 20px; /* TƒÉng padding */
  border-radius: 12px; /* Bo g√≥c l·ªõn h∆°n */
  cursor: pointer;
  font-size: 1rem; /* TƒÉng font size */
  display: flex;
  align-items: center;
  gap: 8px;
  transition: all 0.3s ease;
  white-space: nowrap;
  height: 48px; /* Chi·ªÅu cao b·∫±ng v·ªõi select */
  font-weight: 600;
  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
  border: 2px solid transparent;
}

.btn-add-room-type:hover {
  background: linear-gradient(135deg, #218838, #1ea085);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
}

.btn-add-room-type:active {
  transform: translateY(0);
  box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
}

.btn-add-room-type i {
  font-size: 1.1rem;
}

/* ===== BANG GIA LIST CONTAINER ===== */
.bang-gia-list-container {
  margin-top: 24px;
  background: #f8fafc;
  border-radius: 16px;
  padding: 24px;
  border: 2px solid #e2e8f0;
}

.bang-gia-list {
  max-height: 400px; /* TƒÉng chi·ªÅu cao */
  overflow-y: auto;
  padding-right: 8px;
}

/* ===== PRICE ITEM STYLES ===== */
.price-item {
  display: grid;
  grid-template-columns: 1fr 1fr auto;
  gap: 20px; /* TƒÉng gap */
  align-items: start;
  padding: 24px; /* TƒÉng padding */
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  margin: 16px 0;
  background: white;
  transition: all 0.3s ease;
  position: relative;
}

.price-item:hover {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

/* ===== TIME INPUT STYLES ===== */
.time-input-group {
  display: flex;
  flex-direction: column;
  gap: 10px; /* TƒÉng gap */
}

.time-input-group label {
  font-size: 0.9rem; /* TƒÉng font size */
  color: #475569;
  font-weight: 600;
  margin-bottom: 6px;
}

.time-input-wrapper {
  display: flex;
  align-items: center;
  gap: 16px; /* TƒÉng gap */
}

.time-input {
  flex: 1;
  padding: 14px 16px; /* TƒÉng padding */
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-size: 1.1rem; /* TƒÉng font size */
  text-align: center;
  transition: all 0.3s ease;
  font-weight: 600;
  font-family: 'Courier New', monospace;
  background: white;
}

/* ===== PRICE INPUT STYLES ===== */
.price-input-group label {
  font-weight: 600;
  color: #374151;
  font-size: 0.95rem; /* TƒÉng font size */
  margin-bottom: 6px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.gia-tien-input {
  width: 200px; /* TƒÉng width */
  height: 52px; /* TƒÉng height */
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  padding: 14px 16px;
  font-size: 1.1rem; /* TƒÉng font size */
  font-weight: 600;
  transition: all 0.3s ease;
  background: white;
  font-family: 'Courier New', monospace;
}

/* ===== BUTTON REMOVE PRICE ===== */
.btn-remove-price {
  background: linear-gradient(135deg, #f56565, #e53e3e);
  color: white;
  border: none;
  width: 48px; /* TƒÉng k√≠ch th∆∞·ªõc */
  height: 48px;
  border-radius: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(245, 101, 101, 0.3);
  font-size: 1.2rem;
}

.btn-remove-price:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 20px rgba(245, 101, 101, 0.4);
}

/* ===== BUTTON ADD PRICE ITEM ===== */
.btn-add-price-item {
  background: linear-gradient(135deg, #48bb78, #38a169);
  color: white;
  border: none;
  padding: 16px 24px; /* TƒÉng padding */
  border-radius: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 12px; /* TƒÉng gap */
  width: 100%;
  justify-content: center;
  margin-top: 20px;
  font-weight: 600;
  font-size: 1.1rem; /* TƒÉng font size */
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
}

.btn-add-price-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
}

/* ===== USAGE GUIDE STYLES ===== */
.usage-guide {
  background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
  border: 2px solid #bae6fd;
  border-radius: 16px;
  padding: 24px; /* TƒÉng padding */
  margin: 24px 0;
  transition: all 0.3s ease;
}

.guide-header h4 {
  margin: 0;
  color: #0369a1;
  font-size: 1.2rem; /* TƒÉng font size */
  font-weight: 600;
}

.guide-items {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); /* TƒÉng min-width */
  gap: 16px; /* TƒÉng gap */
  padding: 12px 0;
}

.guide-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  padding: 20px; /* TƒÉng padding */
  background: white;
  border-radius: 12px;
  border: 2px solid #e2e8f0;
  transition: all 0.3s ease;
}

.guide-example {
  font-family: 'Courier New', monospace;
  font-weight: 700;
  color: #667eea;
  font-size: 1.1rem; /* TƒÉng font size */
  margin-bottom: 8px;
}

.guide-desc {
  color: #475569;
  font-size: 0.95rem; /* TƒÉng font size */
  line-height: 1.4;
}

/* ===== RESPONSIVE STYLES ===== */
@media (max-width: 1200px) {
  .modal-container {
    max-width: 95%;
    margin: 20px;
  }
}

@media (max-width: 768px) {
  .modal-container {
    max-width: 100%;
    margin: 10px;
    max-height: 85vh;
  }
  
  .select-with-btn-container {
    flex-direction: column;
    gap: 12px;
  }
  
  .btn-add-room-type {
    width: 100%;
    justify-content: center;
  }
  
  .price-item {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .gia-tien-input {
    width: 100%;
  }
}

/* Custom scrollbar cho modal */
.modal-container::-webkit-scrollbar {
  width: 8px;
}

.modal-container::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 10px;
}

.modal-container::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 10px;
}

.modal-container::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}
/* ===== USAGE GUIDE COMPACT - OVERRIDE ===== */
.usage-guide {
  background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
  border: 2px solid #bae6fd;
  border-radius: 12px !important;
  padding: 4px !important; /* Gi·∫£m padding */
  margin: 16px 0 !important; /* Gi·∫£m margin */
  transition: all 0.3s ease;
}

.guide-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  padding: 4px 0 !important; /* Gi·∫£m padding */
}

.guide-header h4 {
  margin: 0 !important;
  color: #0369a1;
  font-size: 1rem !important; /* Gi·∫£m font size */
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 6px;
}

.guide-items {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)) !important; /* Gi·∫£m min-width */
  gap: 10px !important; /* Gi·∫£m gap */
  padding: 8px 0 !important; /* Gi·∫£m padding */
}

.guide-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  padding: 12px !important; /* Gi·∫£m padding */
  background: white;
  border-radius: 8px !important; /* Gi·∫£m border radius */
  border: 1px solid #e2e8f0 !important; /* Gi·∫£m border width */
  transition: all 0.3s ease;
}

.guide-example {
  font-family: 'Courier New', monospace;
  font-weight: 700;
  color: #667eea;
  font-size: 0.9rem !important; /* Gi·∫£m font size */
  margin-bottom: 4px !important; /* Gi·∫£m margin */
  background: #f8fafc;
  padding: 4px 8px !important; /* Gi·∫£m padding */
  border-radius: 6px !important; /* Gi·∫£m border radius */
  border: 1px solid #e2e8f0;
}

.guide-desc {
  color: #475569;
  font-size: 0.8rem !important; /* Gi·∫£m font size */
  line-height: 1.3 !important; /* Gi·∫£m line height */
}

/* ===== FORM GROUP COMPACT - OVERRIDE ===== */
.form-group {
  display: flex !important;
  flex-direction: row !important;
  align-items: flex-end !important;
  gap: 12px !important;
  margin-bottom: 0 !important;
}

.form-group label {
  margin-bottom: 8px !important;
  color: #374151;
  font-weight: 600;
  font-size: 1rem;
  white-space: nowrap;
  min-width: 100px; /* Fixed width for label */
}

.select-with-btn-container {
  display: flex !important;
  gap: 10px !important;
  align-items: center !important;
  flex: 1 !important;
}

.select-with-btn-container .form-select {
  flex: 1;
  height: 42px !important; /* Gi·∫£m chi·ªÅu cao */
  font-size: 0.95rem !important; /* Gi·∫£m font size */
  border: 2px solid #e2e8f0;
  border-radius: 10px !important; /* Gi·∫£m border radius */
  padding: 0 10px !important; /* Gi·∫£m padding */
}

.btn-add-room-type {
  background: linear-gradient(135deg, #28a745, #20c997) !important;
  color: white !important;
  border: none !important;
  padding: 10px 16px !important; /* Gi·∫£m padding */
  border-radius: 10px !important; /* Gi·∫£m border radius */
  cursor: pointer;
  font-size: 0.9rem !important; /* Gi·∫£m font size */
  display: flex;
  align-items: center;
  gap: 6px;
  transition: all 0.3s ease !important;
  white-space: nowrap;
  height: 42px !important; /* Gi·∫£m chi·ªÅu cao */
  font-weight: 600 !important;
  box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3) !important;
  border: 2px solid transparent !important;
  margin-top: 0 !important;
}

.btn-add-room-type:hover {
  background: linear-gradient(135deg, #218838, #1ea085) !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4) !important;
}

/* ===== PRICE ITEM ULTRA COMPACT - OVERRIDE ===== */
.bang-gia-list-container {
  margin-top: 20px !important; /* Gi·∫£m margin */
  background: #f8fafc;
  border-radius: 12px !important; /* Gi·∫£m border radius */
  padding: 0 !important; /* Gi·∫£m padding */
  border: 2px solid #e2e8f0;
  max-height: 450px !important; /* Gi·∫£m chi·ªÅu cao */
  overflow-y: auto;
}

.bang-gia-list {
  display: grid !important;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)) !important; /* Gi·∫£m min-width */
  gap: 12px !important; /* Gi·∫£m gap */
  max-height: none !important;
  overflow-y: visible !important;
  padding-right: 0 !important;
}

.price-item {
  display: inline !important;
  flex-direction: column !important;
  gap: 12px !important; /* Gi·∫£m gap */
  padding: 16px !important; /* Gi·∫£m padding */
  border: 2px solid #e2e8f0 !important;
  border-radius: 12px !important; /* Gi·∫£m border radius */
  margin: 0 !important;
  background: white !important;
  transition: all 0.3s ease !important;
  position: relative !important;
  min-height: 150px !important; /* Gi·∫£m chi·ªÅu cao */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06) !important;
}

.price-item:hover {
  border-color: #667eea !important;
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.12) !important;
  transform: translateY(-2px) !important;
}

.price-item::before {
  content: '‚è∞' !important;
  position: absolute !important;
  top: -10px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  left: 16px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  background: white !important;
  padding: 2px 8px !important; /* Gi·∫£m padding */
  color: #667eea !important;
  font-size: 0.8rem !important; /* Gi·∫£m font size */
  font-weight: 700 !important;
  border: 2px solid #667eea !important;
  border-radius: 12px !important; /* Gi·∫£m border radius */
  z-index: 2 !important;
}

/* ===== TIME INPUT COMPACT - OVERRIDE ===== */
.time-input-group {
  display: flex !important;
  flex-direction: column !important;
  gap: 6px !important; /* Gi·∫£m gap */
  flex: 1 !important;
}

.time-input-group label {
  font-size: 0.8rem !important; /* Gi·∫£m font size */
  color: #475569 !important;
  font-weight: 600 !important;
  margin-bottom: 2px !important; /* Gi·∫£m margin */
}

.time-input-wrapper {
  display: flex !important;
  align-items: center !important;
  gap: 6px !important; /* Gi·∫£m gap */
}

.time-input {
  flex: 1 !important;
  padding: 10px !important; /* Gi·∫£m padding */
  border: 1px solid #e2e8f0 !important; /* Gi·∫£m border width */
  border-radius: 8px !important; /* Gi·∫£m border radius */
  font-size: 0.9rem !important; /* Gi·∫£m font size */
  text-align: center !important;
  transition: all 0.3s ease !important;
  font-weight: 600 !important;
  font-family: 'Courier New', monospace !important;
  background: white !important;
  min-width: 0 !important;
}

.time-separator {
  color: #64748b !important;
  font-weight: 700 !important;
  font-size: 1rem !important; /* Gi·∫£m font size */
  padding: 0 2px !important; /* Gi·∫£m padding */
}

/* ===== PRICE INPUT COMPACT - OVERRIDE ===== */
.price-input-group {
  display: inline !important;
  gap: 6px !important; /* Gi·∫£m gap */
  flex: 1 !important;
}

.price-input-group label {
  font-weight: 600 !important;
  color: #374151 !important;
  font-size: 0.8rem !important; /* Gi·∫£m font size */
  margin-bottom: 2px !important; /* Gi·∫£m margin */
}

.gia-tien-input {
  width: 100% !important;
  height: 40px !important; /* Gi·∫£m chi·ªÅu cao */
  border: 1px solid #e2e8f0 !important; /* Gi·∫£m border width */
  border-radius: 8px !important; /* Gi·∫£m border radius */
  padding: 10px 50px 10px 12px !important; /* Gi·∫£m padding */
  font-size: 1rem !important; /* Gi·∫£m font size */
  font-weight: 700 !important;
  transition: all 0.3s ease !important;
  background: white !important;
  font-family: 'Courier New', monospace !important;
  color: #1e293b !important;
}

.currency-symbol {
  position: absolute !important;
  right: 12px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  color: #64748b !important;
  font-weight: 700 !important;
  font-size: 0.9rem !important; /* Gi·∫£m font size */
  background: #f1f5f9 !important;
  padding: 0 !important; /* Gi·∫£m padding */
  border-radius: 6px !important; /* Gi·∫£m border radius */
  border: 1px solid #e2e8f0 !important;
}

/* ===== REMOVE BUTTON COMPACT - OVERRIDE ===== */
.btn-remove-price {
  background: linear-gradient(135deg, #f56565, #e53e3e) !important;
  color: white !important;
  border: none !important;
  width: 30px !important; /* Gi·∫£m k√≠ch th∆∞·ªõc */
  height: 30px !important; /* Gi·∫£m k√≠ch th∆∞·ªõc */
  border-radius: 8px !important; /* Gi·∫£m border radius */
  cursor: pointer !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  transition: all 0.3s ease !important;
  box-shadow: 0 2px 6px rgba(245, 101, 101, 0.3) !important;
  font-size: 1rem !important; /* Gi·∫£m font size */
  position: absolute !important;
  top: 5px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  right: 5px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  z-index: 3 !important;
}

.btn-remove-price:hover {
  transform: scale(1.05) !important; /* Gi·∫£m hi·ªáu ·ª©ng */
  box-shadow: 0 4px 10px rgba(245, 101, 101, 0.4) !important;
}

.btn-save-price {
  background: linear-gradient(135deg, #4FD1C5, #38B2AC) !important;
  color: white !important;
  border: none !important;
  width: 30px !important; /* Gi·∫£m k√≠ch th∆∞·ªõc */
  height: 30px !important; /* Gi·∫£m k√≠ch th∆∞·ªõc */
  border-radius: 8px !important; /* Gi·∫£m border radius */
  cursor: pointer !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  transition: all 0.3s ease !important;
  box-shadow: 0 2px 6px rgba(245, 101, 101, 0.3) !important;
  font-size: 1rem !important; /* Gi·∫£m font size */
  position: absolute !important;
  top: 5px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  right: 40px !important; /* Gi·∫£m kho·∫£ng c√°ch */
  z-index: 3 !important;
}

.btn-save-price:hover {
  transform: scale(1.05) !important; /* Gi·∫£m hi·ªáu ·ª©ng */
  box-shadow: 0 4px 10px rgba(245, 101, 101, 0.4) !important;
}

/* ===== ADD PRICE BUTTON COMPACT - OVERRIDE ===== */
/* ===== ADD PRICE BUTTON PRIMARY STYLE - OVERRIDE ===== */
.btn-add-price-item {
  background: linear-gradient(135deg, #48bb78 0%, #38a169 100%) !important;
  color: white !important;
  border: none !important;
  padding: 14px 24px !important;
  border-radius: 12px !important;
  cursor: pointer !important;
  display: flex !important;
  align-items: center !important;
  gap: 10px !important;
  font-weight: 600 !important;
  font-size: 1rem !important;
  transition: all 0.3s ease !important;
  box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3) !important;
  width: auto !important; /* Thay ƒë·ªïi t·ª´ 100% th√†nh auto */
  justify-content: center !important;
  margin-top: 0 !important; /* B·ªè margin-top */
  grid-column: unset !important; /* B·ªè grid-column */
  margin-right: auto !important; /* ƒê·∫©y sang tr√°i */
}

.btn-add-price-item:hover {
  transform: translateY(-2px) !important;
  box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4) !important;
}

.btn-add-price-item:active {
  transform: translateY(0) !important;
  box-shadow: 0 2px 10px rgba(72, 187, 120, 0.3) !important;
}

/* ===== MODAL FOOTER LAYOUT - OVERRIDE ===== */
.modal-footer {
  display: flex !important;
  justify-content: flex-end !important;
  gap: 16px !important;
  padding: 32px !important;
  border-top: 2px solid #f1f5f9 !important;
  background: #f8fafc !important;
  border-radius: 0 0 24px 24px !important;
  align-items: center !important;
}

/* ƒê·∫£m b·∫£o c√°c n√∫t kh√°c v·∫´n n·∫±m b√™n ph·∫£i */
.modal-footer .btn-secondary,
.modal-footer .btn-primary {
  margin-left: 0 !important;
}

/* ===== RESPONSIVE COMPACT - OVERRIDE ===== */
@media (max-width: 1400px) {
  .bang-gia-list {
    grid-template-columns: repeat(auto-fill, minmax(230px, 1fr)) !important;
  }
}

@media (max-width: 1200px) {
  .bang-gia-list {
    grid-template-columns: repeat(auto-fill, minmax(210px, 1fr)) !important;
  }
}

@media (max-width: 768px) {
  .form-group {
    flex-direction: column !important;
    align-items: stretch !important;
    gap: 8px !important;
  }
  
  .form-group label {
    min-width: auto !important;
    margin-bottom: 4px !important;
  }
  
  .bang-gia-list {
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)) !important;
    gap: 8px !important;
  }
  
  .price-item {
    padding: 12px !important;
    min-height: 140px !important;
    gap: 8px !important;
  }
}

@media (max-width: 480px) {
  .bang-gia-list {
    grid-template-columns: 1fr !important;
  }
  
  .guide-items {
    grid-template-columns: 1fr !important;
  }
}

/* ===== ADD PRICE NOTE STYLES ===== */
.add-price-note {
  color: #64748b !important;
  font-size: 0.85rem !important;
  margin: 33px 0 0 10px !important; /* S√°t b√™n ph·∫£i n√∫t */
  font-style: italic !important;
  line-height: 1.4 !important;
  opacity: 0.8 !important;
  transition: opacity 0.3s ease !important;
  white-space: nowrap !important; /* Kh√¥ng xu·ªëng d√≤ng */
  align-self: center !important; /* CƒÉn gi·ªØa theo chi·ªÅu d·ªçc */
}

.add-price-note:hover {
  opacity: 1 !important;
}

/* ===== MODAL FOOTER LAYOUT WITH NOTE ===== */
.modal-footer {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important; /* CƒÉn gi·ªØa theo chi·ªÅu d·ªçc */
  gap: 16px !important;
  padding: 24px 32px !important;
  border-top: 2px solid #f1f5f9 !important;
  background: #f8fafc !important;
  border-radius: 0 0 24px 24px !important;
  flex-wrap: wrap !important;
}

.footer-left {
  display: flex !important;
  flex-direction: row !important; /* N·∫±m ngang */
  align-items: center !important; /* CƒÉn gi·ªØa theo chi·ªÅu d·ªçc */
  gap: 0 !important; /* Kh√¥ng c√≥ gap */
}

.footer-right {
  display: flex !important;
  gap: 12px !important;
  align-items: center !important;
}

/* ===== ROOM TYPE ACTIONS STYLES ===== */
.room-type-actions {
    display: flex;
    gap: 8px;
    align-items: center;
}

.btn-add-room-type,
.btn-edit-room-type,
.btn-delete-room-type {
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
    border: none;
    padding: 12px;
    border-radius: 10px;
    cursor: pointer;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    width: 44px;
    height: 44px;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
    border: 2px solid transparent;
}

.btn-add-room-type:hover {
    background: linear-gradient(135deg, #218838, #1ea085);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);
}

.btn-edit-room-type {
    background: linear-gradient(135deg, #667eea, #764ba2);
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
}

.btn-edit-room-type:hover {
    background: linear-gradient(135deg, #5a67d8, #6b46c1);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

.btn-delete-room-type {
    background: linear-gradient(135deg, #e53e3e, #c53030);
    box-shadow: 0 2px 8px rgba(229, 62, 62, 0.3);
}

.btn-delete-room-type:hover {
    background: linear-gradient(135deg, #c53030, #9b2c2c);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(229, 62, 62, 0.4);
}

.btn-add-room-type:active,
.btn-edit-room-type:active,
.btn-delete-room-type:active {
    transform: translateY(0);
}

/* Responsive cho c√°c n√∫t */
@media (max-width: 768px) {
    .room-type-actions {
        gap: 6px;
    }
    
    .btn-add-room-type,
    .btn-edit-room-type,
    .btn-delete-room-type {
        width: 40px;
        height: 40px;
        padding: 10px;
        font-size: 0.9rem;
    }
}
.hidden {
    display: none !important;
}

.pagination-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 32px;
    padding: 20px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(0, 0, 0, 0.05);
}

/* ƒê·∫£m b·∫£o khi kh√¥ng hidden th√¨ hi·ªÉn th·ªã flex */
.pagination-container:not(.hidden) {
    display: flex !important;
}
/* Th√™m CSS n√†y v√†o kh·ªëi <style> c·ªßa b·∫°n */

.error-banner {
    padding: 12px 20px;
    margin-bottom: 16px;
    background: #fff5f5; /* Light Red Background */
    color: #e53e3e; /* Deep Red Text */
    border: 1px solid #fed7d7;
    border-radius: 8px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 10px;
    transition: all 0.3s ease;
}

.error-banner.hidden {
    display: none !important;
}

.error-banner i {
    font-size: 1.2rem;
}
/* üî• CSS B·∫ÆT BU·ªòC M√ÄU ƒê·ªé (∆Øu ti√™n cao nh·∫•t) */
.price-item input.error-state,
.price-item input.error-state:focus,
.price-item input.error-state:valid,
.price-item input.error-state:invalid {
    /* S·ª≠ d·ª•ng !important ƒë·ªÉ ghi ƒë√® c√°c pseudo-classes */
    border-color: #e53e3e !important; 
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.2) !important;
}
/* üî• FIX: CSS CHO TR·∫†NG TH√ÅI L·ªñI - ∆ØU TI√äN CAO */
.price-item .start-time-input.error-state,
.price-item .end-time-input.error-state {
    border-color: #e53e3e !important;
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.2) !important;
    background-color: #fff5f5 !important;
}

/* ƒê·∫£m b·∫£o style l·ªói kh√¥ng b·ªã ghi ƒë√® b·ªüi c√°c state kh√°c */
.price-item .start-time-input.error-state:focus,
.price-item .end-time-input.error-state:focus,
.price-item .start-time-input.error-state:valid,
.price-item .end-time-input.error-state:valid,
.price-item .start-time-input.error-state:invalid,
.price-item .end-time-input.error-state:invalid {
    border-color: #e53e3e !important;
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.2) !important;
}

/* Style cho input gi√° ti·ªÅn khi l·ªói */
.price-item .gia-tien-input.error-state {
    border-color: #e53e3e !important;
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.2) !important;
    background-color: #fff5f5 !important;
}
/* Highlight to√†n b·ªô price-item khi b·ªã l·ªói */
.price-item.error-highlight {
    border-color: #e53e3e !important;
    background: linear-gradient(135deg, #fff5f5, #fed7d7) !important;
    box-shadow: 0 0 0 2px rgba(229, 62, 62, 0.3) !important;
}

.price-item.error-highlight::before {
    content: '‚ö†Ô∏è L·ªñI' !important;
    background: #e53e3e !important;
    color: white !important;
    border-color: #e53e3e !important;
}
.info-note {
    margin: 16px 0;
}

.info-note div {
    display: flex;
    align-items: flex-start;
    gap: 10px;
}

.info-note i {
    font-size: 1.2rem;
    margin-top: 2px;
}
/* Style cho l·ªói gi√° ti·ªÅn */
.gia-tien-input.error-state {
    border-color: #e53e3e !important;
    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.2) !important;
    background-color: #fff5f5 !important;
}

.gia-tien-error-message {
    color: #e53e3e;
    font-size: 0.75rem;
    margin-top: 4px;
    display: flex;
    align-items: center;
    gap: 4px;
}

.gia-tien-error-message i {
    font-size: 0.7rem;
}

/* Style cho success gi√° ti·ªÅn */
.gia-tien-input:valid {
    border-color: #48bb78 !important;
    box-shadow: 0 0 0 3px rgba(72, 187, 120, 0.1) !important;
}
.price-format-helper {
    display: flex;
    justify-content: space-between;
    margin-top: 4px;
    font-size: 0.75rem;
    color: #94a3b8;
}

.time-format-helper span:last-child {
    color: #667eea;
    font-weight: 500;
}

.price-format-helper span:last-child {
    color: #e53e3e;
    font-weight: 500;
}
</style>