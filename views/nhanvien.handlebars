<div class="main-content">
  <div class="admin-dashboard">
    <!-- Header Premium -->
    <div class="dashboard-header">
      <div class="header-content">
        <div class="header-title">
          <div class="title-icon">üë®‚Äçüíº</div>
          <div>
            <h1>QU·∫¢N L√ù NH√ÇN VI√äN</h1>
            <p>Theo d√µi v√† qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n</p>
          </div>
        </div>
        <div class="header-actions">
          <button class="btn-primary" onclick="openEmployeeModal()">
            <i class="fas fa-plus"></i>
            <span>Th√™m nh√¢n vi√™n</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Search and Filter Bar -->
    <div class="search-filter-bar">
      <div class="search-box">
        <i class="fas fa-search"></i>
        <input type="text" id="searchInput" placeholder="T√¨m ki·∫øm nh√¢n vi√™n..." onkeyup="filterEmployees()">
        <button class="search-btn" onclick="filterEmployees()">T√¨m ki·∫øm</button>
      </div>
      <div class="filter-controls">
        <select class="filter-select" id="roleFilter" onchange="filterEmployees()">
          <option value="">T·∫•t c·∫£ vai tr√≤</option>
          <option value="L·ªÖ t√¢n">L·ªÖ t√¢n</option>
          <option value="Ph·ª•c v·ª•">Ph·ª•c v·ª•</option>
          <option value="K·ªπ thu·∫≠t">K·ªπ thu·∫≠t</option>
          <option value="Qu·∫£n l√Ω">Qu·∫£n l√Ω</option>
          <option value="B·∫£o v·ªá">B·∫£o v·ªá</option>
        </select>
        <select class="filter-select" id="shiftFilter" onchange="filterEmployees()">
          <option value="">T·∫•t c·∫£ ca tr·ª±c</option>
          <option value="S√°ng (6h-14h)">S√°ng (6h-14h)</option>
          <option value="Chi·ªÅu (14h-22h)">Chi·ªÅu (14h-22h)</option>
          <option value="T·ªëi (22h-6h)">T·ªëi (22h-6h)</option>
          <option value="Full-time">Full-time</option>
        </select>
        <select class="filter-select" id="statusFilter" onchange="filterEmployees()">
          <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option value="ƒêang l√†m vi·ªác">ƒêang l√†m vi·ªác</option>
          <option value="Ngh·ªâ ph√©p">Ngh·ªâ ph√©p</option>
          <option value="ƒê√£ ngh·ªâ vi·ªác">ƒê√£ ngh·ªâ vi·ªác</option>
        </select>
        <button class="clear-filters" onclick="clearFilters()">
          <i class="fas fa-times"></i>
          X√≥a l·ªçc
        </button>
      </div>
    </div>

    <!-- Stats Overview -->
    <div class="stats-overview">
      <div class="stat-card">
        <div class="stat-icon total">
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-info">
          <h3 id="statTotal">0</h3>
          <p>T·ªïng nh√¢n vi√™n</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon active">
          <i class="fas fa-user-check"></i>
        </div>
        <div class="stat-info">
          <h3 id="statActive">0</h3>
          <p>ƒêang l√†m vi·ªác</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon reception">
          <i class="fas fa-concierge-bell"></i>
        </div>
        <div class="stat-info">
          <h3 id="statReception">0</h3>
          <p>L·ªÖ t√¢n</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon service">
          <i class="fas fa-utensils"></i>
        </div>
        <div class="stat-info">
          <h3 id="statService">0</h3>
          <p>Ph·ª•c v·ª•</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon technical">
          <i class="fas fa-tools"></i>
        </div>
        <div class="stat-info">
          <h3 id="statTechnical">0</h3>
          <p>K·ªπ thu·∫≠t</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon manager">
          <i class="fas fa-user-tie"></i>
        </div>
        <div class="stat-info">
          <h3 id="statManager">0</h3>
          <p>Qu·∫£n l√Ω</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon security">
          <i class="fas fa-shield-alt"></i>
        </div>
        <div class="stat-info">
          <h3 id="statSecurity">0</h3>
          <p>B·∫£o v·ªá</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon fulltime">
          <i class="fas fa-business-time"></i>
        </div>
        <div class="stat-info">
          <h3 id="statFullTime">0</h3>
          <p>Full-time</p>
        </div>
      </div>
    </div>

    <!-- Employees Grid -->
    <div class="employees-grid" id="employeesGrid">
      {{#each nhanviens}}
      <div class="employee-card" 
           data-id="{{this._id}}" 
           data-manv="{{this.MaNV}}"
           data-name="{{this.TenNV}}" 
           data-phone="{{this.SƒêT}}" 
           data-email="{{this.Email}}" 
           data-role="{{this.VaiTro}}" 
           data-status="{{this.TrangThai}}" 
           data-shift="{{this.CaTruc}}">
        <div class="employee-image">
          {{#if this.LinkAvatar}}
          <img src="{{this.LinkAvatar}}" alt="{{this.TenNV}}">
          {{else}}
          <div class="employee-avatar-placeholder">
            <i class="fas fa-user"></i>
          </div>
          {{/if}}
          <div class="employee-overlay">
            <div class="employee-actions">
              <button class="btn-edit" onclick="editEmployee('{{this.MaNV}}')">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn-delete" onclick="deleteEmployee('{{this.MaNV}}', '{{this.TenNV}}')">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
          <div class="employee-badge {{this.VaiTro}}">
            {{this.VaiTro}}
          </div>
          <div class="employee-status {{#if (eq this.TrangThai 'ƒêang l√†m vi·ªác')}}active{{else if (eq this.TrangThai 'Ngh·ªâ ph√©p')}}onleave{{else}}inactive{{/if}}">
            {{this.TrangThai}}
          </div>
        </div>

        <div class="employee-content">
          <h3 class="employee-name">{{this.TenNV}}</h3>
          <p class="employee-code">M√£: {{this.MaNV}}</p>

          <div class="employee-details">
            <div class="detail-item">
              <i class="fas fa-phone"></i>
              <span>{{this.SƒêT}}</span>
            </div>
            <div class="detail-item">
              <i class="fas fa-envelope"></i>
              <span>{{this.Email}}</span>
            </div>
            <div class="detail-item">
              <i class="fas fa-calendar-alt"></i>
              <span>{{formatDate this.NgayVaoLam}}</span>
            </div>
            <div class="detail-item">
              <i class="fas fa-clock"></i>
              <span>{{this.CaTruc}}</span>
            </div>
            <div class="detail-item">
              <i class="fas fa-money-bill-wave"></i>
              <span>{{formatCurrency this.LuongCoBan}}</span>
            </div>
            {{#if this.DoanhSo}}
            <div class="detail-item">
              <i class="fas fa-chart-line"></i>
              <span>Doanh s·ªë: {{formatCurrency this.DoanhSo}}</span>
            </div>
            {{/if}}
            {{#if this.DanhGia}}
            <div class="detail-item">
              <i class="fas fa-star"></i>
              <span>ƒê√°nh gi√°: {{this.DanhGia}}/5</span>
            </div>
            {{/if}}
          </div>
        </div>
      </div>
      {{/each}}
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="emptyState" style="{{#if nhanviens.length}}display: none;{{else}}display: block;{{/if}}">
      <div class="empty-icon">üë®‚Äçüíº</div>
      <h3>Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n</h3>
      <p>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c th√™m nh√¢n vi√™n m·ªõi</p>
      <button class="btn-primary" onclick="openEmployeeModal()">
        <i class="fas fa-plus"></i>
        Th√™m nh√¢n vi√™n ƒë·∫ßu ti√™n
      </button>
    </div>
  </div>

  <!-- Employee Modal -->
  <div class="modal-overlay" id="employeeModal" style="display: none;">
    <div class="modal-container">
      <div class="modal-header">
        <h2 id="modalTitle">Th√™m nh√¢n vi√™n m·ªõi</h2>
        <button class="modal-close" onclick="closeEmployeeModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>

      <div class="modal-body">
        <form id="employeeForm" onsubmit="saveEmployee(event)">
          <input type="hidden" id="employeeId">
          <input type="hidden" id="employeeMaNV">

          <div class="form-grid">
            <div class="form-group">
              <label for="employeeName">T√™n nh√¢n vi√™n *</label>
              <input type="text" id="employeeName" required placeholder="Nh·∫≠p t√™n nh√¢n vi√™n">
            </div>

            <div class="form-group">
              <label for="employeePhone">S·ªë ƒëi·ªán tho·∫°i *</label>
              <input type="text" id="employeePhone" required placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i">
            </div>

            <div class="form-group">
              <label for="employeeEmail">Email *</label>
              <input type="email" id="employeeEmail" required placeholder="Nh·∫≠p email">
            </div>

            <div class="form-group">
              <label for="employeeRole">Vai tr√≤ *</label>
              <select id="employeeRole" required>
                <option value="">Ch·ªçn vai tr√≤</option>
                <option value="L·ªÖ t√¢n">L·ªÖ t√¢n</option>
                <option value="Ph·ª•c v·ª•">Ph·ª•c v·ª•</option>
                <option value="K·ªπ thu·∫≠t">K·ªπ thu·∫≠t</option>
                <option value="Qu·∫£n l√Ω">Qu·∫£n l√Ω</option>
                <option value="B·∫£o v·ªá">B·∫£o v·ªá</option>
              </select>
            </div>

            <div class="form-group">
              <label for="employeeShift">Ca tr·ª±c *</label>
              <select id="employeeShift" required>
                <option value="">Ch·ªçn ca tr·ª±c</option>
                <option value="S√°ng (6h-14h)">S√°ng (6h-14h)</option>
                <option value="Chi·ªÅu (14h-22h)">Chi·ªÅu (14h-22h)</option>
                <option value="T·ªëi (22h-6h)">T·ªëi (22h-6h)</option>
                <option value="Full-time">Full-time</option>
              </select>
            </div>

            <div class="form-group">
              <label for="employeeSalary">L∆∞∆°ng c∆° b·∫£n *</label>
              <input type="number" id="employeeSalary" required placeholder="Nh·∫≠p l∆∞∆°ng c∆° b·∫£n">
            </div>

            <div class="form-group">
              <label for="employeeAllowance">Ph·ª• c·∫•p</label>
              <input type="number" id="employeeAllowance" placeholder="Nh·∫≠p ph·ª• c·∫•p" value="0">
            </div>

            <div class="form-group">
              <label for="employeeHireDate">Ng√†y v√†o l√†m *</label>
              <input type="date" id="employeeHireDate" required>
            </div>

            <div class="form-group">
              <label for="employeeBirthDate">Ng√†y sinh</label>
              <input type="date" id="employeeBirthDate">
            </div>

            <div class="form-group">
              <label for="employeeGender">Gi·ªõi t√≠nh</label>
              <select id="employeeGender">
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
              </select>
            </div>

            <div class="form-group">
              <label for="employeeCCCD">CCCD/CMND</label>
              <input type="text" id="employeeCCCD" placeholder="Nh·∫≠p s·ªë CCCD">
            </div>

            <div class="form-group">
              <label for="employeeStatus">Tr·∫°ng th√°i *</label>
              <select id="employeeStatus" required>
                <option value="ƒêang l√†m vi·ªác">ƒêang l√†m vi·ªác</option>
                <option value="Ngh·ªâ ph√©p">Ngh·ªâ ph√©p</option>
                <option value="ƒê√£ ngh·ªâ vi·ªác">ƒê√£ ngh·ªâ vi·ªác</option>
              </select>
            </div>

            <div class="form-group">
              <label for="employeeWorkingHours">S·ªë gi·ªù l√†m (th√°ng)</label>
              <input type="number" id="employeeWorkingHours" placeholder="S·ªë gi·ªù l√†m" value="0">
            </div>

            <div class="form-group">
              <label for="employeeRevenue">Doanh s·ªë</label>
              <input type="number" id="employeeRevenue" placeholder="Doanh s·ªë" value="0">
            </div>

            <div class="form-group">
              <label for="employeeRating">ƒê√°nh gi√° (1-5)</label>
              <select id="employeeRating">
                <option value="">Ch·ªçn ƒë√°nh gi√°</option>
                <option value="1">1 sao</option>
                <option value="2">2 sao</option>
                <option value="3">3 sao</option>
                <option value="4">4 sao</option>
                <option value="5">5 sao</option>
              </select>
            </div>
          </div>

          <div class="form-group full-width">
            <label for="employeeAddress">ƒê·ªãa ch·ªâ</label>
            <textarea id="employeeAddress" placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" rows="2"></textarea>
          </div>

          <div class="form-group full-width">
            <label for="employeeNote">Ghi ch√∫</label>
            <textarea id="employeeNote" placeholder="Nh·∫≠p ghi ch√∫" rows="2"></textarea>
          </div>

          <div class="form-group full-width">
            <label for="employeeAvatar">Link ·∫£nh ƒë·∫°i di·ªán</label>
            <input type="text" id="employeeAvatar" placeholder="URL h√¨nh ·∫£nh" oninput="updateAvatarPreview(this.value)">
          </div>

          <div class="form-group full-width" id="avatarPreviewContainer">
            <label>Preview ·∫£nh ƒë·∫°i di·ªán</label>
            <div class="avatar-preview" id="avatarPreview">
              <i class="fas fa-user"></i>
              <p>Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
            </div>
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button class="btn-secondary" type="button" onclick="closeEmployeeModal()">H·ªßy</button>
        <button class="btn-primary" type="submit" form="employeeForm">L∆∞u th√¥ng tin</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // ===== CONFIGURATION & STATE =====
  let allEmployees = [];
  let filteredEmployees = [];

  // ===== STATISTICS CALCULATION =====
  function calculateStatistics() {
    const employees = allEmployees;
    
    // T·ªïng s·ªë nh√¢n vi√™n
    const totalEmployees = employees.length;
    
    // ƒê·∫øm nh√¢n vi√™n ƒëang l√†m vi·ªác
    const countActive = employees.filter(card => 
      card.getAttribute('data-status') === 'ƒêang l√†m vi·ªác'
    ).length;
    
    // ƒê·∫øm theo vai tr√≤
    const countReception = employees.filter(card => 
      card.getAttribute('data-role') === 'L·ªÖ t√¢n'
    ).length;
    
    const countService = employees.filter(card => 
      card.getAttribute('data-role') === 'Ph·ª•c v·ª•'
    ).length;
    
    const countTechnical = employees.filter(card => 
      card.getAttribute('data-role') === 'K·ªπ thu·∫≠t'
    ).length;
    
    const countManager = employees.filter(card => 
      card.getAttribute('data-role') === 'Qu·∫£n l√Ω'
    ).length;
    
    const countSecurity = employees.filter(card => 
      card.getAttribute('data-role') === 'B·∫£o v·ªá'
    ).length;
    
    // ƒê·∫øm nh√¢n vi√™n full-time
    const countFullTime = employees.filter(card => 
      card.getAttribute('data-shift') === 'Full-time'
    ).length;
    
    // C·∫≠p nh·∫≠t c√°c stat card
    updateStatCard('#statTotal', totalEmployees);
    updateStatCard('#statActive', countActive);
    updateStatCard('#statReception', countReception);
    updateStatCard('#statService', countService);
    updateStatCard('#statTechnical', countTechnical);
    updateStatCard('#statManager', countManager);
    updateStatCard('#statSecurity', countSecurity);
    updateStatCard('#statFullTime', countFullTime);
  }
  
  function calculateFilteredStatistics() {
    const employees = filteredEmployees;
    
    // T·ªïng s·ªë nh√¢n vi√™n sau l·ªçc
    const totalEmployees = employees.length;
    
    // ƒê·∫øm nh√¢n vi√™n ƒëang l√†m vi·ªác sau l·ªçc
    const countActive = employees.filter(card => 
      card.getAttribute('data-status') === 'ƒêang l√†m vi·ªác'
    ).length;
    
    // ƒê·∫øm theo vai tr√≤ sau l·ªçc
    const countReception = employees.filter(card => 
      card.getAttribute('data-role') === 'L·ªÖ t√¢n'
    ).length;
    
    const countService = employees.filter(card => 
      card.getAttribute('data-role') === 'Ph·ª•c v·ª•'
    ).length;
    
    const countTechnical = employees.filter(card => 
      card.getAttribute('data-role') === 'K·ªπ thu·∫≠t'
    ).length;
    
    const countManager = employees.filter(card => 
      card.getAttribute('data-role') === 'Qu·∫£n l√Ω'
    ).length;
    
    const countSecurity = employees.filter(card => 
      card.getAttribute('data-role') === 'B·∫£o v·ªá'
    ).length;
    
    // ƒê·∫øm nh√¢n vi√™n full-time sau l·ªçc
    const countFullTime = employees.filter(card => 
      card.getAttribute('data-shift') === 'Full-time'
    ).length;
    
    // C·∫≠p nh·∫≠t c√°c stat card
    updateStatCard('#statTotal', totalEmployees);
    updateStatCard('#statActive', countActive);
    updateStatCard('#statReception', countReception);
    updateStatCard('#statService', countService);
    updateStatCard('#statTechnical', countTechnical);
    updateStatCard('#statManager', countManager);
    updateStatCard('#statSecurity', countSecurity);
    updateStatCard('#statFullTime', countFullTime);
  }
  
  function updateStatCard(selector, value) {
    const element = document.querySelector(selector);
    if (element) {
      element.textContent = value;
    }
  }
  
  function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }
  
  function formatDate(dateString) {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN');
  }
  
  // Helper function cho Handlebars ƒë·ªÉ so s√°nh gi√° tr·ªã
  function eq(a, b) {
    return a === b;
  }

  // ===== EMPLOYEE MANAGEMENT =====
  function openEmployeeModal(employeeData = null) {
    document.getElementById('modalTitle').textContent = employeeData ? 'Ch·ªânh s·ª≠a nh√¢n vi√™n' : 'Th√™m nh√¢n vi√™n m·ªõi';
    document.getElementById('employeeModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';

    if (employeeData) {
      document.getElementById('employeeId').value = employeeData._id || '';
      document.getElementById('employeeMaNV').value = employeeData.MaNV || '';
      document.getElementById('employeeName').value = employeeData.TenNV || '';
      document.getElementById('employeePhone').value = employeeData.SƒêT || '';
      document.getElementById('employeeEmail').value = employeeData.Email || '';
      document.getElementById('employeeRole').value = employeeData.VaiTro || 'L·ªÖ t√¢n';
      document.getElementById('employeeShift').value = employeeData.CaTruc || 'S√°ng (6h-14h)';
      document.getElementById('employeeSalary').value = employeeData.LuongCoBan || '';
      document.getElementById('employeeAllowance').value = employeeData.PhuCap || 0;
      document.getElementById('employeeHireDate').value = employeeData.NgayVaoLam ? new Date(employeeData.NgayVaoLam).toISOString().split('T')[0] : '';
      document.getElementById('employeeBirthDate').value = employeeData.NgaySinh ? new Date(employeeData.NgaySinh).toISOString().split('T')[0] : '';
      document.getElementById('employeeGender').value = employeeData.GioiTinh || '';
      document.getElementById('employeeCCCD').value = employeeData.CCCD || '';
      document.getElementById('employeeStatus').value = employeeData.TrangThai || 'ƒêang l√†m vi·ªác';
      document.getElementById('employeeWorkingHours').value = employeeData.SoGioLam || 0;
      document.getElementById('employeeRevenue').value = employeeData.DoanhSo || 0;
      document.getElementById('employeeRating').value = employeeData.DanhGia || '';
      document.getElementById('employeeAddress').value = employeeData.DiaChi || '';
      document.getElementById('employeeNote').value = employeeData.GhiChu || '';
      document.getElementById('employeeAvatar').value = employeeData.LinkAvatar || '';
      updateAvatarPreview(employeeData.LinkAvatar || '');
    } else {
      resetEmployeeForm();
    }
  }

  function editEmployee(maNV) {
    // G·ª≠i y√™u c·∫ßu API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt nh√¢n vi√™n
    fetch(`/api/nhanvien/${maNV}`)
      .then(response => response.json())
      .then(employeeData => {
        openEmployeeModal(employeeData);
      })
      .catch(error => {
        console.error('L·ªói khi l·∫•y th√¥ng tin nh√¢n vi√™n:', error);
        Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin nh√¢n vi√™n'
        });
      });
  }

  function closeEmployeeModal() {
    document.getElementById('employeeModal').style.display = 'none';
    document.body.style.overflow = 'auto';
  }

  function resetEmployeeForm() {
    document.getElementById('employeeForm').reset();
    document.getElementById('employeeId').value = '';
    document.getElementById('employeeMaNV').value = '';
    document.getElementById('employeeRole').value = 'L·ªÖ t√¢n';
    document.getElementById('employeeShift').value = 'S√°ng (6h-14h)';
    document.getElementById('employeeStatus').value = 'ƒêang l√†m vi·ªác';
    document.getElementById('employeeHireDate').value = new Date().toISOString().split('T')[0];
    document.getElementById('employeeAllowance').value = 0;
    document.getElementById('employeeWorkingHours').value = 0;
    document.getElementById('employeeRevenue').value = 0;
    updateAvatarPreview('');
  }

  function updateAvatarPreview(avatarUrl) {
    const preview = document.getElementById('avatarPreview');
    if (avatarUrl && avatarUrl.trim() !== '') {
      preview.innerHTML = `<img src="${avatarUrl}" alt="Preview" onerror="this.style.display='none'">`;
    } else {
      preview.innerHTML = '<i class="fas fa-user"></i><p>Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>';
    }
  }


  async function saveEmployee(event) {
    event.preventDefault();

    // L·∫•y employeeId tr∆∞·ªõc ƒë·ªÉ x√°c ƒë·ªãnh l√† th√™m m·ªõi hay c·∫≠p nh·∫≠t
    const employeeMaNV = document.getElementById('employeeMaNV').value;
    console.log(employeeMaNV);
    
    const isEdit = !!employeeMaNV;

    const formData = {
      TenNV: document.getElementById('employeeName').value.trim(),
      SƒêT: document.getElementById('employeePhone').value.trim(),
      Email: document.getElementById('employeeEmail').value.trim(),
      VaiTro: document.getElementById('employeeRole').value,
      CaTruc: document.getElementById('employeeShift').value,
      LuongCoBan: document.getElementById('employeeSalary').value ? parseInt(document.getElementById('employeeSalary').value) : 0,
      PhuCap: document.getElementById('employeeAllowance').value ? parseInt(document.getElementById('employeeAllowance').value) : 0,
      NgayVaoLam: document.getElementById('employeeHireDate').value,
      NgaySinh: document.getElementById('employeeBirthDate').value || null,
      GioiTinh: document.getElementById('employeeGender').value || '',
      CCCD: document.getElementById('employeeCCCD').value.trim() || '',
      DiaChi: document.getElementById('employeeAddress').value.trim() || '',
      TrangThai: document.getElementById('employeeStatus').value,
      SoGioLam: document.getElementById('employeeWorkingHours').value ? parseInt(document.getElementById('employeeWorkingHours').value) : 0,
      DoanhSo: document.getElementById('employeeRevenue').value ? parseInt(document.getElementById('employeeRevenue').value) : 0,
      DanhGia: document.getElementById('employeeRating').value ? parseInt(document.getElementById('employeeRating').value) : null,
      GhiChu: document.getElementById('employeeNote').value.trim() || '',
      LinkAvatar: document.getElementById('employeeAvatar').value.trim()
    };

  // Validate required fields
  if (!formData.TenNV) {
    showError('Vui l√≤ng nh·∫≠p t√™n nh√¢n vi√™n');
    return;
  }
  if (!formData.SƒêT) {
    showError('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
    return;
  }
  if (!formData.Email) {
    showError('Vui l√≤ng nh·∫≠p email');
    return;
  }
  if (!formData.VaiTro) {
    showError('Vui l√≤ng ch·ªçn vai tr√≤');
    return;
  }
  if (!formData.CaTruc) {
    showError('Vui l√≤ng ch·ªçn ca tr·ª±c');
    return;
  }
  if (!formData.LuongCoBan) {
    showError('Vui l√≤ng nh·∫≠p l∆∞∆°ng c∆° b·∫£n');
    return;
  }
  if (!formData.NgayVaoLam) {
    showError('Vui l√≤ng ch·ªçn ng√†y v√†o l√†m');
    return;
  }
  if (!formData.TrangThai) {
    showError('Vui l√≤ng ch·ªçn tr·∫°ng th√°i');
    return;
  }

  const url = isEdit ? `/api/nhanvien/${employeeMaNV}` : '/api/nhanvien';
  const method = isEdit ? 'PUT' : 'POST';

  try {
    Swal.fire({
      title: 'ƒêang l∆∞u th√¥ng tin...',
      text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
      allowOutsideClick: false,
      didOpen: () => Swal.showLoading()
    });

    const response = await fetch(url, {
      method: method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    const result = await response.json();
    if (!response.ok) throw new Error(result.error || 'L·ªói server');

    Swal.fire({
      icon: 'success',
      title: 'Th√†nh c√¥ng!',
      text: result.message || `Nh√¢n vi√™n "${formData.TenNV}" ƒë√£ ƒë∆∞·ª£c ${isEdit ? 'c·∫≠p nh·∫≠t' : 'th√™m'} th√†nh c√¥ng!`,
      timer: 1500,
      showConfirmButton: false
    });

    setTimeout(() => {
      location.reload();
    }, 1500);

  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u nh√¢n vi√™n:', error);
    Swal.fire({
      icon: 'error',
      title: 'L·ªói!',
      text: error.message || 'Kh√¥ng th·ªÉ l∆∞u th√¥ng tin nh√¢n vi√™n',
      confirmButtonColor: '#667eea'
    });
  }
}

  async function deleteEmployee(employeeMaNV, employeeName) {
    console.log(employeeMaNV);
    console.log(employeeName);
    const result = await Swal.fire({
      title: 'X√°c nh·∫≠n x√≥a?',
      html: `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n <strong>${employeeName}</strong>?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#e53e3e',
      cancelButtonColor: '#667eea',
      confirmButtonText: 'X√≥a',
      cancelButtonText: 'H·ªßy'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/api/nhanvien/${employeeMaNV}`, { method: 'DELETE' });
        if (!response.ok) throw new Error('L·ªói khi x√≥a nh√¢n vi√™n');

        await Swal.fire({
          icon: 'success',
          title: 'ƒê√£ x√≥a!',
          text: 'Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng',
          timer: 1500,
          showConfirmButton: false
        });

        location.reload();
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: 'Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n'
        });
      }
    }
  }

  // ===== FILTER & SEARCH =====
  function filterEmployees() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const roleFilter = document.getElementById('roleFilter').value;
    const shiftFilter = document.getElementById('shiftFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;

    filteredEmployees = allEmployees.filter(card => {
      const name = card.getAttribute('data-name').toLowerCase();
      const phone = card.getAttribute('data-phone').toLowerCase();
      const email = card.getAttribute('data-email').toLowerCase();
      const role = card.getAttribute('data-role');
      const shift = card.getAttribute('data-shift');
      const status = card.getAttribute('data-status');

      const matchesSearch = !searchTerm || 
        name.includes(searchTerm) || 
        phone.includes(searchTerm) ||
        email.includes(searchTerm);
      const matchesRole = !roleFilter || role === roleFilter;
      const matchesShift = !shiftFilter || shift === shiftFilter;
      const matchesStatus = !statusFilter || status === statusFilter;

      const shouldShow = matchesSearch && matchesRole && matchesShift && matchesStatus;
      card.style.display = shouldShow ? 'block' : 'none';
      return shouldShow;
    });

    // T√≠nh to√°n l·∫°i th·ªëng k√™ d·ª±a tr√™n k·∫øt qu·∫£ l·ªçc
    calculateFilteredStatistics();
    toggleEmptyState(filteredEmployees.length === 0);
  }

  function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('roleFilter').value = '';
    document.getElementById('shiftFilter').value = '';
    document.getElementById('statusFilter').value = '';

    allEmployees.forEach(card => {
      card.style.display = 'block';
    });

    filteredEmployees = [...allEmployees];
    
    // T√≠nh to√°n l·∫°i th·ªëng k√™ to√†n b·ªô
    calculateStatistics();
    toggleEmptyState(false);
  }

  function toggleEmptyState(show) {
    const emptyState = document.getElementById('emptyState');
    const employeesGrid = document.getElementById('employeesGrid');

    if (!emptyState || !employeesGrid) return;

    if (show) {
      employeesGrid.style.display = 'none';
      emptyState.style.display = 'block';
    } else {
      employeesGrid.style.display = 'grid';
      emptyState.style.display = 'none';
    }
  }

  function setupRealTimeSearch() {
    const searchInput = document.getElementById('searchInput');
    let searchTimeout;

    if (searchInput) {
      searchInput.addEventListener('input', function () {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          filterEmployees();
        }, 300);
      });
    }
  }

  // ===== UTILITY FUNCTIONS =====
  function showError(message) {
    Swal.fire({
      icon: 'warning',
      title: 'Thi·∫øu th√¥ng tin',
      text: message,
      confirmButtonColor: '#667eea'
    });
  }

  // ===== INITIALIZATION =====
  document.addEventListener('DOMContentLoaded', function () {
    console.log('üë®‚Äçüíº DOM ƒë√£ load xong');

    // Kh·ªüi t·∫°o d·ªØ li·ªáu
    allEmployees = Array.from(document.querySelectorAll('.employee-card'));
    filteredEmployees = [...allEmployees];

    // T√≠nh to√°n th·ªëng k√™
    calculateStatistics();

    // Thi·∫øt l·∫≠p c√°c event listeners
    setupRealTimeSearch();

    const roleFilter = document.getElementById('roleFilter');
    const shiftFilter = document.getElementById('shiftFilter');
    const statusFilter = document.getElementById('statusFilter');
    
    if (roleFilter) roleFilter.addEventListener('change', filterEmployees);
    if (shiftFilter) shiftFilter.addEventListener('change', filterEmployees);
    if (statusFilter) statusFilter.addEventListener('change', filterEmployees);
  });
</script>

<style>
  /* ===== MAIN CONTENT STYLES ===== */
  .main-content {
    margin-left: 280px;
    transition: margin-left 0.3s ease;
    min-height: 100vh;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  }

  .sidebar-collapsed .main-content {
    margin-left: 80px;
  }

  /* ===== DASHBOARD STYLES ===== */
  .admin-dashboard {
    padding: 24px;
    min-height: 100vh;
  }

  .dashboard-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 16px;
    padding: 28px;
    margin-bottom: 28px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    color: white;
    position: relative;
    overflow: hidden;
  }

  .dashboard-header::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 200px;
    height: 200px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(30%, -30%);
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
    position: relative;
    z-index: 1;
  }

  .header-title {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .title-icon {
    font-size: 3rem;
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }

  .header-title h1 {
    margin: 0;
    font-size: 2rem;
    font-weight: 700;
  }

  .header-title p {
    margin: 8px 0 0 0;
    opacity: 0.9;
    font-size: 1.1rem;
  }

  .header-actions {
    display: flex;
    gap: 16px;
    align-items: center;
  }

  /* ===== BUTTON STYLES ===== */
  .btn-primary {
    background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
    color: white;
    border: none;
    padding: 14px 24px;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 10px;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
    padding: 14px 24px;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  /* ===== SEARCH AND FILTER ===== */
  .search-filter-bar {
    background: white;
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 28px;
    display: flex;
    gap: 24px;
    align-items: center;
    flex-wrap: wrap;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .search-box {
    display: flex;
    align-items: center;
    background: #f8fafc;
    border-radius: 12px;
    padding: 12px 20px;
    flex: 1;
    min-width: 320px;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
  }

  .search-box:focus-within {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .search-box i {
    color: #64748b;
    margin-right: 12px;
    font-size: 1.1rem;
  }

  .search-box input {
    border: none;
    background: none;
    outline: none;
    flex: 1;
    padding: 8px 0;
    font-size: 1rem;
    color: #1e293b;
  }

  .search-box input::placeholder {
    color: #94a3b8;
  }

  .search-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 10px;
    cursor: pointer;
    margin-left: 16px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  }

  .search-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }

  .filter-controls {
    display: flex;
    gap: 16px;
    align-items: center;
    flex-wrap: wrap;
  }

  .filter-select {
    padding: 12px 20px;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    background: white;
    color: #475569;
    min-width: 180px;
    font-size: 1rem;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .filter-select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .clear-filters {
    background: #f1f5f9;
    border: 2px solid #e2e8f0;
    color: #64748b;
    padding: 12px 20px;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    font-weight: 500;
  }

  .clear-filters:hover {
    background: #e2e8f0;
    color: #475569;
    transform: translateY(-1px);
  }

  /* ===== STATS OVERVIEW ===== */
  .stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 32px;
  }

  .stat-card {
    background: white;
    border-radius: 20px;
    padding: 24px;
    display: flex;
    align-items: center;
    gap: 16px;
    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 0, 0, 0.03);
    position: relative;
    overflow: hidden;
  }

  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
  }

  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 35px rgba(0, 0, 0, 0.12);
  }

  .stat-icon {
    width: 70px;
    height: 70px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .stat-icon.total {
    background: linear-gradient(135deg, #fed7d7, #feb2b2);
    color: #c53030;
  }

  .stat-icon.active {
    background: linear-gradient(135deg, #c6f6d5, #9ae6b4);
    color: #276749;
  }

  .stat-icon.reception {
    background: linear-gradient(135deg, #bee3f8, #90cdf4);
    color: #2b6cb0;
  }

  .stat-icon.service {
    background: linear-gradient(135deg, #fefcbf, #faf089);
    color: #d69e2e;
  }

  .stat-icon.technical {
    background: linear-gradient(135deg, #e9d8fd, #d6bcfa);
    color: #6b46c1;
  }

  .stat-icon.manager {
    background: linear-gradient(135deg, #fed7d7, #feb2b2);
    color: #c53030;
  }

  .stat-icon.security {
    background: linear-gradient(135deg, #a0aec0, #718096);
    color: #2d3748;
  }

  .stat-icon.fulltime {
    background: linear-gradient(135deg, #fbd38d, #f6ad55);
    color: #dd6b20;
  }

  .stat-info h3 {
    margin: 0;
    font-size: 2.2rem;
    color: #1e293b;
    font-weight: 700;
  }

  .stat-info p {
    margin: 8px 0 0 0;
    color: #64748b;
    font-size: 1rem;
    font-weight: 500;
  }

  /* ===== EMPLOYEES GRID ===== */
  .employees-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 24px;
  }

  .employee-card {
    background: white;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);
    transition: all 0.4s ease;
    border: 1px solid rgba(0, 0, 0, 0.03);
    position: relative;
  }

  .employee-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
  }

  .employee-image {
    position: relative;
    height: 200px;
    overflow: hidden;
  }

  .employee-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .employee-card:hover .employee-image img {
    transform: scale(1.1);
  }

  .employee-avatar-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 4rem;
  }

  .employee-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.9), rgba(118, 75, 162, 0.9));
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: all 0.4s ease;
  }

  .employee-card:hover .employee-overlay {
    opacity: 1;
  }

  .employee-actions {
    display: flex;
    gap: 16px;
  }

  .btn-edit,
  .btn-delete {
    width: 48px;
    height: 48px;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .btn-edit {
    background: linear-gradient(135deg, #48bb78, #38a169);
    color: white;
  }

  .btn-delete {
    background: linear-gradient(135deg, #f56565, #e53e3e);
    color: white;
  }

  .btn-edit:hover,
  .btn-delete:hover {
    transform: scale(1.1) translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }

  .employee-badge {
    position: absolute;
    top: 16px;
    left: 16px;
    padding: 8px 16px;
    border-radius: 25px;
    font-size: 0.85rem;
    font-weight: 700;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    z-index: 2;
  }

  .employee-badge.L·ªÖt√¢n {
    background: linear-gradient(135deg, rgba(72, 187, 120, 0.95), rgba(56, 161, 105, 0.95));
    color: white;
  }

  .employee-badge.Ph·ª•cv·ª• {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.95), rgba(118, 75, 162, 0.95));
    color: white;
  }

  .employee-badge.K·ªπthu·∫≠t {
    background: linear-gradient(135deg, rgba(245, 101, 101, 0.95), rgba(229, 62, 62, 0.95));
    color: white;
  }

  .employee-badge.Qu·∫£nl√Ω {
    background: linear-gradient(135deg, rgba(237, 137, 54, 0.95), rgba(217, 119, 6, 0.95));
    color: white;
  }

  .employee-badge.B·∫£ov·ªá {
    background: linear-gradient(135deg, rgba(108, 117, 125, 0.95), rgba(73, 80, 87, 0.95));
    color: white;
  }

  .employee-status {
    position: absolute;
    top: 16px;
    right: 16px;
    padding: 8px 16px;
    border-radius: 25px;
    font-size: 0.85rem;
    font-weight: 700;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    z-index: 2;
  }

  .employee-status.active {
    background: linear-gradient(135deg, rgba(72, 187, 120, 0.95), rgba(56, 161, 105, 0.95));
    color: white;
  }

  .employee-status.onleave {
    background: linear-gradient(135deg, rgba(246, 194, 62, 0.95), rgba(237, 137, 54, 0.95));
    color: white;
  }

  .employee-status.inactive {
    background: linear-gradient(135deg, rgba(245, 101, 101, 0.95), rgba(229, 62, 62, 0.95));
    color: white;
  }

  .employee-content {
    padding: 20px;
  }

  .employee-name {
    margin: 0 0 8px 0;
    color: #1e293b;
    font-size: 1.3rem;
    font-weight: 700;
  }

  .employee-code {
    margin: 0 0 16px 0;
    color: #667eea;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .employee-details {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 12px;
    color: #475569;
    font-size: 0.95rem;
  }

  .detail-item i {
    color: #667eea;
    width: 20px;
    font-size: 1rem;
  }

  /* ===== EMPTY STATE ===== */
  .empty-state {
    text-align: center;
    padding: 80px 40px;
    background: white;
    border-radius: 24px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border: 2px dashed #e2e8f0;
  }

  .empty-icon {
    font-size: 5rem;
    margin-bottom: 24px;
    opacity: 0.7;
  }

  .empty-state h3 {
    margin: 0 0 12px 0;
    color: #1e293b;
    font-size: 1.8rem;
    font-weight: 700;
  }

  .empty-state p {
    margin: 0 0 32px 0;
    color: #64748b;
    font-size: 1.2rem;
  }

  /* ===== MODAL STYLES ===== */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    padding: 20px;
    backdrop-filter: blur(8px);
  }

  .modal-container {
    background: white;
    border-radius: 24px;
    width: 100%;
    max-width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: modalSlideIn 0.4s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-30px) scale(0.9);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 28px;
    border-bottom: 2px solid #f1f5f9;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-radius: 24px 24px 0 0;
  }

  .modal-header h2 {
    margin: 0;
    color: #1e293b;
    font-size: 1.8rem;
    font-weight: 700;
  }

  .modal-close {
    background: #f1f5f9;
    border: none;
    font-size: 1.4rem;
    color: #64748b;
    cursor: pointer;
    padding: 8px;
    border-radius: 12px;
    transition: all 0.3s ease;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-close:hover {
    background: #e2e8f0;
    color: #475569;
    transform: rotate(90deg);
  }

  .modal-body {
    padding: 28px;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group.full-width {
    grid-column: 1 / -1;
  }

  .form-group label {
    margin-bottom: 10px;
    color: #374151;
    font-weight: 600;
    font-size: 1rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 14px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: white;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    transform: translateY(-1px);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .avatar-preview {
    border: 3px dashed #e2e8f0;
    border-radius: 16px;
    padding: 50px 30px;
    text-align: center;
    color: #94a3b8;
    margin-top: 10px;
    transition: all 0.3s ease;
    background: #f8fafc;
  }

  .avatar-preview:hover {
    border-color: #667eea;
    color: #667eea;
  }

  .avatar-preview img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 16px;
    padding: 28px;
    border-top: 2px solid #f1f5f9;
    background: #f8fafc;
    border-radius: 0 0 24px 24px;
  }

  /* ===== RESPONSIVE STYLES ===== */
  @media (max-width: 1200px) {
    .main-content {
      margin-left: 280px;
    }
  }

  @media (max-width: 1024px) {
    .main-content {
      margin-left: 80px;
    }

    .employees-grid {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
  }

  @media (max-width: 768px) {
    .main-content {
      margin-left: 0 !important;
      padding: 16px;
    }

    .admin-dashboard {
      padding: 16px;
    }

    .header-content {
      flex-direction: column;
      align-items: stretch;
      text-align: center;
    }

    .header-title {
      justify-content: center;
      text-align: center;
    }

    .search-filter-bar {
      flex-direction: column;
      align-items: stretch;
      padding: 20px;
    }

    .search-box {
      min-width: auto;
      margin-bottom: 16px;
    }

    .filter-controls {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-select {
      min-width: auto;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .stats-overview {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
    }

    .modal-container {
      margin: 10px;
      max-width: none;
    }

    .employees-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }
  }

  @media (max-width: 480px) {
    .admin-dashboard {
      padding: 12px;
    }

    .dashboard-header {
      padding: 20px;
    }

    .header-actions {
      flex-direction: column;
      width: 100%;
    }

    .btn-primary {
      width: 100%;
      justify-content: center;
    }

    .stat-card {
      padding: 20px;
    }

    .stat-icon {
      width: 60px;
      height: 60px;
      font-size: 1.5rem;
    }

    .stat-info h3 {
      font-size: 1.8rem;
    }

    .employee-content {
      padding: 16px;
    }
  }

  /* ===== FIXES ===== */
  .swal2-container {
    z-index: 100000 !important;
  }

  .modal-overlay[style*="display: flex"] {
    display: flex !important;
  }

  .modal-overlay[style*="display: none"] {
    display: none !important;
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
</style>